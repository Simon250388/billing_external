Перем ИзмеренияИсключая;

Процедура ВосстановитьПоследовательность(СервисСтабильныеПериоды,Ошибки) Экспорт  	
		
	МВТ 										= Неопределено;				
	СервисСтабильныеПериоды.Инициализировать(МВТ);
	
	ЗначенияПараметровПоНаправлениямУслуг 		= СервисСтабильныеПериоды.ЗначенияПараметровПоНаправлениямУслуг(МВТ);
	ОписаниеКлючевыхПараметровНорматива 		= СервисСтабильныеПериоды.ОписаниеКлючевыхПараметровНорматива();
	ДанныеКлючейНорматива 						= СервисСтабильныеПериоды.ДанныеКлючейНорматива().Выгрузить();
	СоотвествиеРазрезовНорматива 				= СоотвествиеРазрезовНорматива(МВТ,СервисСтабильныеПериоды);	
		
	ПараметрыОпределенияКлючаНорматива 			= Новый Структура(
	"СоотвествиеРазрезовНорматива, ОписаниеКлючевыхПараметровНорматива, ДанныеКлючейНорматива",
	СоотвествиеРазрезовНорматива, ОписаниеКлючевыхПараметровНорматива, ДанныеКлючейНорматива);
				
	РезультатДокументыДляПроведения  			= СервисСтабильныеПериоды.ДокументыДляПроведения(МВТ);
	Если РезультатДокументыДляПроведения.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	НаборыДанных 								= Новый Структура();
	НаборыДанных.Вставить("ДокументыДляПроведения", 			РезультатДокументыДляПроведения);
	НаборыДанных.Вставить("ДанныеДокументов", 					СервисСтабильныеПериоды.ДанныеДокументов(МВТ));
	НаборыДанных.Вставить("СостояниеНаГраницу", 				СервисСтабильныеПериоды.СостояниеНаГраницу(МВТ));
	НаборыДанных.Вставить("СостояниеНаГраницуШкалы", 			СервисСтабильныеПериоды.СостояниеНаГраницуШкалы(МВТ));
	НаборыДанных.Вставить("СостояниеНаГраницуИзмерители", 		СервисСтабильныеПериоды.СостояниеНаГраницуИзмерители(МВТ));
	НаборыДанных.Вставить("ДанныеДокументовИзмененияПлощади", 	СервисСтабильныеПериоды.ДанныеДокументовИзмененияПлощади(МВТ));
	НаборыДанных.Вставить("ДанныеИзмененияСоставаШкал", 		СервисСтабильныеПериоды.ДанныеИзмененияСоставаШкал(МВТ));
	НаборыДанных.Вставить("ДанныеИзмененияСоставаИзмерители", 	СервисСтабильныеПериоды.ДанныеИзмененияСоставаИзмерителей(МВТ));
	НаборыДанных.Вставить("ИзменяемыеПараметрыПоТипам", 		СервисСтабильныеПериоды.ИзменяемыеПараметрыПоТипам());
	
	ЗаполнитьНаборы(СервисСтабильныеПериоды, НаборыДанных, ПараметрыОпределенияКлючаНорматива, ЗначенияПараметровПоНаправлениямУслуг);
	
КонецПроцедуры

Процедура СравнитьНаборыЗаписей(СтарыйНабор,СтарыйНаборШкалы,СтарыйНаборИзмерители,НовыйНабор,НовыйНаборШкалы,НовыйНаборИзмерители)
	
	СтрокиУдалить  = Новый Массив;
	
	Для Каждого СтрокаНабора Из СтарыйНабор Цикл
		Если ТипЗнч(СтрокаНабора.ДокРегистратор) = Тип("ДокументСсылка.энргВводНачальныхОстатков")
			ИЛИ ТипЗнч(СтрокаНабора.ДокРегистратор) = Тип("ДокументСсылка.энргНачисление") Тогда
			СтрокиУдалить.Добавить(СтрокаНабора);
		КонецЕсли;		
	КонецЦикла;
	
	Для Сч = 0 По СтрокиУдалить.ВГраница() Цикл
		СтарыйНабор.Удалить(СтрокиУдалить[Сч]);
	КонецЦикла;
	
	СтрокиУдалить  = Новый Массив;
	
	Для Каждого СтрокаНабора Из СтарыйНаборШкалы Цикл
		Если ТипЗнч(СтрокаНабора.ДокРегистратор) = Тип("ДокументСсылка.энргВводНачальныхОстатков")
			ИЛИ ТипЗнч(СтрокаНабора.ДокРегистратор) = Тип("ДокументСсылка.энргНачисление") Тогда
			СтрокиУдалить.Добавить(СтрокаНабора);
		КонецЕсли;		
	КонецЦикла;
	
	Для Сч = 0 По СтрокиУдалить.ВГраница() Цикл
		СтарыйНаборШкалы.Удалить(СтрокиУдалить[Сч]);
	КонецЦикла;
	
	СтрокиУдалить  = Новый Массив;
	
	Для Каждого СтрокаНабора Из СтарыйНаборИзмерители Цикл
		Если ТипЗнч(СтрокаНабора.ДокРегистратор) = Тип("ДокументСсылка.энргВводНачальныхОстатков")
			ИЛИ ТипЗнч(СтрокаНабора.ДокРегистратор) = Тип("ДокументСсылка.энргНачисление") Тогда
			СтрокиУдалить.Добавить(СтрокаНабора);
		КонецЕсли;		
	КонецЦикла;
	
	Для Сч = 0 По СтрокиУдалить.ВГраница() Цикл
		СтарыйНаборИзмерители.Удалить(СтрокиУдалить[Сч]);
	КонецЦикла;	 	
	
	Если НЕ СтарыйНабор.Количество() = НовыйНабор.Количество() Тогда
		А = 0;
		//ВызватьИсключение "СравнениеНаборов:Разное количество строк";
	КонецЕсли;
	
	Если НЕ СтарыйНаборШкалы.Количество() = НовыйНаборШкалы.Количество() Тогда
		А = 0;
		//ВызватьИсключение "СравнениеНаборов:Разное количество строк";
	КонецЕсли;
	
	Если НЕ СтарыйНаборИзмерители.Количество() = НовыйНаборИзмерители.Количество() Тогда
		А = 0;
		//ВызватьИсключение "СравнениеНаборов:Разное количество строк";
	КонецЕсли;
	
	НеНайденыеСтроки 				= Новый Массив;
	СтрокиРазныеРесурсы 			= Новый Массив;
	Измерения 						= Новый Структура("Организация,ПериодНачисления,Район,ЧастныйСектор,Строение,Помещение,Услуга,ТочкаУчета,НомерПозиции,ДокРегистратор");
	ВспомогательныеИзмерения 		= Новый Структура("ДатаРегистратора");
	Ресурсы 						= Метаданные.РегистрыСведений.энргСтабильныеПериоды.Ресурсы;
	Для Каждого СтрокаСтарогоНабора Из СтарыйНабор Цикл
		ЕстьТакаяСтрока 			= Ложь;
		Для Каждого СтрокаНовогоНабора Из НовыйНабор Цикл
			мИзмерения 				= Новый Массив;
			ВсеИзмеренияРавны 		= Истина;
			Для Каждого Поле Из Измерения Цикл
				Если НЕ СтрокаСтарогоНабора[Поле.Ключ] = СтрокаНовогоНабора[Поле.Ключ] Тогда
					ВсеИзмеренияРавны = Ложь;
					Прервать;
				КонецЕсли;
				мИзмерения.Добавить(Новый Структура("Поле, Значение", Поле.Ключ, СтрокаСтарогоНабора[Поле.Ключ]));
			КонецЦикла;
			
			Если НЕ ВсеИзмеренияРавны Тогда
				Продолжить;
			КонецЕсли;
			
			РесурсыНеРавны 				= Новый Массив;
			ВсеРесурсыРавны 			= Истина;
			Для Каждого Поле Из ВспомогательныеИзмерения Цикл
				Если НЕ СтрокаСтарогоНабора[Поле.Ключ] = СтрокаНовогоНабора[Поле.Ключ] Тогда
					ВсеРесурсыРавны = Ложь;
					РесурсыНеРавны.Добавить(Новый Структура("Поле, СтароеЗначение, НовоеЗначение", Поле.Ключ, СтрокаСтарогоНабора[Поле.Ключ],СтрокаНовогоНабора[Поле.Ключ]));
				КонецЕсли;				
			КонецЦикла;
			
			Для Каждого Поле Из Ресурсы Цикл
				Если НЕ СтрокаСтарогоНабора[Поле.Имя] = СтрокаНовогоНабора[Поле.Имя] Тогда
					ВсеРесурсыРавны = Ложь;
					РесурсыНеРавны.Добавить(Новый Структура("Поле, СтароеЗначение, НовоеЗначение", Поле.Имя, СтрокаСтарогоНабора[Поле.Имя],СтрокаНовогоНабора[Поле.Имя]));
				КонецЕсли;				
			КонецЦикла;
			
			Если ВсеИзмеренияРавны И ВсеРесурсыРавны Тогда
				ЕстьТакаяСтрока 		= Истина;
				Прервать;
			ИначеЕсли ВсеИзмеренияРавны Тогда
				ЕстьТакаяСтрока 		= Истина;
				СтрокиРазныеРесурсы.Добавить(Новый Структура("Измерения,Ресурсы",мИзмерения,РесурсыНеРавны));
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Если НЕ ЕстьТакаяСтрока Тогда
			НеНайденыеСтроки.Добавить(СтрокаСтарогоНабора);
		КонецЕсли;		
	КонецЦикла;
	
	Если НеНайденыеСтроки.Количество() > 0 Тогда
		А = 0;
		//ВызватьИсключение "СравнениеНаборов:Фантомные строки";
	КонецЕсли;
	
	Если СтрокиРазныеРесурсы.Количество() > 0 Тогда
		А = 0;
		//	ВызватьИсключение "СравнениеНаборов:Разное содержимое строк";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаборы(СервисСтабильныеПериоды, НаборыДанных, ПараметрыОпределенияКлючаНорматива, ЗначенияПараметровПоНаправлениямУслуг)
	перем текОрганизация,текПериодНачисления,текРайон,текЧастныйСектор,текСтроение,текПомещение;
	
	РезультатДокументыДляПроведения 						= НаборыДанных.ДокументыДляПроведения;
	РезультатДанныеДокументов 								= НаборыДанных.ДанныеДокументов;
	РезультатСостояниеНаГраницу 							= НаборыДанных.СостояниеНаГраницу;
	РезультатСостояниеНаГраницуШкалы 						= НаборыДанных.СостояниеНаГраницуШкалы;
	РезультатСостояниеНаГраницуИзмерители 					= НаборыДанных.СостояниеНаГраницуИзмерители;
	РезультатДанныеДокументовИзмененияПлощади 				= НаборыДанных.ДанныеДокументовИзмененияПлощади;
	РезультатДанныеДокументовИзмененияСоставаШкал 			= НаборыДанных.ДанныеИзмененияСоставаШкал;
	РезультатДанныеИзмененияСоставаИзмерители 				= НаборыДанных.ДанныеИзмененияСоставаИзмерители;
	
	ИзменяемыеПараметрыПоТипам 								= НаборыДанных.ИзменяемыеПараметрыПоТипам;
	
	Выборка  												= РезультатДокументыДляПроведения.Выбрать();
	
	ВыборкаСостояниеНаГраницу								= РезультатСостояниеНаГраницу.Выбрать();	
	ЕстьСледующиеСостояниеНаГраницу 						= ВыборкаСостояниеНаГраницу.Следующий();
	
	ВыборкаСостояниеНаГраницуШкалы							= РезультатСостояниеНаГраницуШкалы.Выбрать();	
	ЕстьСледующиеСостояниеНаГраницуШкалы					= ВыборкаСостояниеНаГраницуШкалы.Следующий();
	  	
	ВыборкаСостояниеНаГраницуИзмерители						= РезультатСостояниеНаГраницуИзмерители.Выбрать();	
	ЕстьСледующиеСостояниеНаГраницуИзмерители				= ВыборкаСостояниеНаГраницуИзмерители.Следующий();
	
	ВыборкаДанныеДокументов 								= РезультатДанныеДокументов.Выбрать();
	ЕстьСледующиеДанные 									= ВыборкаДанныеДокументов.Следующий();
	
	ВыборкаИзмененияПлощади 								= РезультатДанныеДокументовИзмененияПлощади.Выбрать();
	ЕстьСледующиеИзмененияПлощади							= ВыборкаИзмененияПлощади.Следующий();
	
	ВыборкаИзмененияСоставаШкал								= РезультатДанныеДокументовИзмененияСоставаШкал.Выбрать();
	ЕстьСледующиеИзмененияСоставаШкал						= ВыборкаИзмененияСоставаШкал.Следующий();
		
	ВыборкаИзмененияИзмерителей								= РезультатДанныеИзмененияСоставаИзмерители.Выбрать();
	ЕстьСледующиеИзмененияИзмерителей						= ВыборкаИзмененияИзмерителей.Следующий();
		
	ДанныеСтроки 											= ДанныеСтрокиСтабильногоПериода();	
	Ресурсы 												= "";
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Ресурсы Цикл
		Ресурсы 											= Ресурсы  +?(СтрДлина(Ресурсы)>0,",","") + Ресурс.Имя;
	КонецЦикла;
	Ресурсы 												= Ресурсы  +?(СтрДлина(Ресурсы)>0,",","") + "НомерПозиции";
	Ресурсы 												= Ресурсы  +?(СтрДлина(Ресурсы)>0,",","") + "КоличествоЧеловек";
	Ресурсы 												= Ресурсы  +?(СтрДлина(Ресурсы)>0,",","") + "Шкалы";
	Ресурсы 												= Ресурсы  +?(СтрДлина(Ресурсы)>0,",","") + "Измерители";
	
	РесурсыШкалы											= "";
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.Ресурсы Цикл
		РесурсыШкалы 										= РесурсыШкалы  +?(СтрДлина(РесурсыШкалы)>0,",","") + Ресурс.Имя;
	КонецЦикла;
	
	РесурсыИзмерители										= "";
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.энргСтабильныеПериодыИзмерителиНаправлений.Ресурсы Цикл
		РесурсыИзмерители 								= РесурсыИзмерители  +?(СтрДлина(РесурсыИзмерители)>0,",","") + Ресурс.Имя;
	КонецЦикла;
	
	ОписаниеРесурсов 										= Новый ФиксированнаяСтруктура(Ресурсы);
	ОписаниеРесурсовШкалы									= Новый ФиксированнаяСтруктура(РесурсыШкалы);
	ОписаниеРесурсовИзмерителей								= Новый ФиксированнаяСтруктура(РесурсыИзмерители);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ текПериодНачисления = Выборка.ПериодНачисления
			ИЛИ НЕ текРайон = Выборка.Район
			ИЛИ НЕ текЧастныйСектор = Выборка.ЧастныйСектор
			ИЛИ НЕ текСтроение = Выборка.Строение
			ИЛИ НЕ текПомещение = Выборка.Помещение Тогда
			
			СервисСтабильныеПериоды.ПослеПроведенияПомещения(текОрганизация,текПериодНачисления,текРайон,текЧастныйСектор,текСтроение,текПомещение);
			
			Если НЕ текПериодНачисления = Выборка.ПериодНачисления
				И текРайон = Выборка.Район
				И текЧастныйСектор = Выборка.ЧастныйСектор
				И текСтроение = Выборка.Строение
				И текПомещение = Выборка.Помещение Тогда
				
				// добавить в набор начальные данные			
				ВызватьИсключение "Метод не реализован";  				
			КонецЕсли; 			
			
			текРегистратор 									= Неопределено;
			
			ТекущиеДанныеПомещения 							= Новый Соответствие;
			
			Пока Выборка.ЧастныйСектор = ВыборкаСостояниеНаГраницу.ЧастныйСектор
				И Выборка.Строение = ВыборкаСостояниеНаГраницу.Строение
				И Выборка.Помещение = ВыборкаСостояниеНаГраницу.Помещение
				И ЕстьСледующиеСостояниеНаГраницу Цикл				
				
				Ресурсы 									= Новый Структура(ОписаниеРесурсов);
				ЗаполнитьЗначенияСвойств(Ресурсы,ВыборкаСостояниеНаГраницу);
				Ресурсы.Шкалы 								= Новый Массив;
				Ресурсы.Измерители							= Новый Массив;				
				
				Если НЕ ТекущиеДанныеПомещения[ВыборкаСостояниеНаГраницу.ТочкаУчета]= Неопределено Тогда
					ТекущиеДанныеПомещения[ВыборкаСостояниеНаГраницу.ТочкаУчета].Вставить(ВыборкаСостояниеНаГраницу.Услуга,Ресурсы);		
				Иначе
					СоотвествиеУслуга 						= Новый Соответствие;
					СоотвествиеУслуга.Вставить(ВыборкаСостояниеНаГраницу.Услуга, Ресурсы);
					ТекущиеДанныеПомещения.Вставить(ВыборкаСостояниеНаГраницу.ТочкаУчета, СоотвествиеУслуга);
				КонецЕсли;				
				
				ЕстьСледующиеСостояниеНаГраницу 			= ВыборкаСостояниеНаГраницу.Следующий();
			КонецЦикла;
			
			Пока Выборка.ЧастныйСектор = ВыборкаСостояниеНаГраницуШкалы.ЧастныйСектор
				И Выборка.Строение = ВыборкаСостояниеНаГраницуШкалы.Строение
				И Выборка.Помещение = ВыборкаСостояниеНаГраницуШкалы.Помещение
				И ЕстьСледующиеСостояниеНаГраницуШкалы Цикл				
				
				РесурсыШкал									= Новый Структура(ОписаниеРесурсовШкалы);
				РесурсыШкал.Вставить("Шкала", 		Справочники.энргШкалыПриборовУчета.ПустаяСсылка());
				ЗаполнитьЗначенияСвойств(РесурсыШкал,ВыборкаСостояниеНаГраницуШкалы);
				
				Услуги 										= ТекущиеДанныеПомещения[ВыборкаСостояниеНаГраницуШкалы.ТочкаУчета];
				Для Каждого КлючЗначение Из Услуги Цикл
					Ресурсы 								= КлючЗначение.Значение;					
					Ресурсы.Шкалы.Добавить(РесурсыШкал)
				КонецЦикла;  				
								
				ЕстьСледующиеСостояниеНаГраницуШкалы 		= ВыборкаСостояниеНаГраницуШкалы.Следующий();
			КонецЦикла;
			
			Пока Выборка.ЧастныйСектор = ВыборкаСостояниеНаГраницуИзмерители.ЧастныйСектор
				И Выборка.Строение = ВыборкаСостояниеНаГраницуИзмерители.Строение
				И Выборка.Помещение = ВыборкаСостояниеНаГраницуИзмерители.Помещение
				И ЕстьСледующиеСостояниеНаГраницуИзмерители Цикл				
				
				РесурсыИзмеретели							= Новый Структура(ОписаниеРесурсовИзмерителей);
				РесурсыИзмеретели.Вставить("Измеритель", Справочники.энргНаправлениеИспользованияТочекУчета.ПустаяСсылка());
				ЗаполнитьЗначенияСвойств(РесурсыИзмеретели,ВыборкаСостояниеНаГраницуИзмерители);
				
				Услуги 										= ТекущиеДанныеПомещения[ВыборкаСостояниеНаГраницуИзмерители.ТочкаУчета];
				Для Каждого КлючЗначение Из Услуги Цикл
					Ресурсы 								= КлючЗначение.Значение;					
					Ресурсы.Измерители.Добавить(РесурсыИзмеретели);					
				КонецЦикла; 	
								
				ЕстьСледующиеСостояниеНаГраницуИзмерители 	= ВыборкаСостояниеНаГраницуИзмерители.Следующий();
			КонецЦикла;			
		КонецЕсли;		
		
		Если Выборка.СостояниеПроведения  = Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности Тогда
			текОрганизация 									= Выборка.Организация;		
			текПериодНачисления 							= Выборка.ПериодНачисления;
			текРайон 										= Выборка.Район;
			текЧастныйСектор								= Выборка.ЧастныйСектор;
			текСтроение 									= Выборка.Строение;
			текПомещение 									= Выборка.Помещение;
			Продолжить;			
		КонецЕсли;
		
		ДанныеДокумента 									= Неопределено;		
		Пока Выборка.ЧастныйСектор = ВыборкаДанныеДокументов.ЧастныйСектор
			И Выборка.Строение = ВыборкаДанныеДокументов.Строение
			И Выборка.Помещение = ВыборкаДанныеДокументов.Помещение
			И Выборка.ДокРегистратор = ВыборкаДанныеДокументов.ДокРегистратор
			И ЕстьСледующиеДанные Цикл				
			Если ДанныеДокумента = Неопределено Тогда
				ДанныеДокумента 							= Новый Структура("ВидОперации,ДанныеДляПроведения", ВыборкаДанныеДокументов.ВидОперации,Новый Массив);				
			КонецЕсли;
			НоваяСтрока 									= Новый Структура(ДанныеСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанныеДокументов);
			ДанныеДокумента.ДанныеДляПроведения.Добавить(НоваяСтрока);			
			ЕстьСледующиеДанные 							= ВыборкаДанныеДокументов.Следующий();
		КонецЦикла;
		
		ИзмененияПлощади  									= Новый Массив;
		
		Пока Выборка.ЧастныйСектор = ВыборкаИзмененияПлощади.ЧастныйСектор
			И Выборка.Строение = ВыборкаИзмененияПлощади.Строение
			И Выборка.Помещение = ВыборкаИзмененияПлощади.Помещение
			И Выборка.ДокРегистратор = ВыборкаИзмененияПлощади.ДокРегистратор
			И ЕстьСледующиеИзмененияПлощади Цикл				
			
			ИзмененияПлощади.Добавить(Новый Структура("ВидПлощади,Значение", ВыборкаИзмененияПлощади.ВидПлощади,  ВыборкаИзмененияПлощади.Значение));
			
			ЕстьСледующиеИзмененияПлощади				= ВыборкаИзмененияПлощади.Следующий();
		КонецЦикла;
		
		ИзмененияСоставаШкал  							= Новый Массив;
		
		Пока Выборка.ЧастныйСектор = ВыборкаИзмененияСоставаШкал.ЧастныйСектор
			И Выборка.Строение = ВыборкаИзмененияСоставаШкал.Строение
			И Выборка.Помещение = ВыборкаИзмененияСоставаШкал.Помещение
			И Выборка.ДокРегистратор = ВыборкаИзмененияСоставаШкал.ДокРегистратор
			И ЕстьСледующиеИзмененияСоставаШкал Цикл				
			
			СтрокаСоставаШкал 							= Новый Структура(ОписаниеРесурсовШкалы);
			СтрокаСоставаШкал.Вставить("ТочкаУчета", 	Неопределено);
			СтрокаСоставаШкал.Вставить("Шкала", 		Неопределено);
			ЗаполнитьЗначенияСвойств(СтрокаСоставаШкал, ВыборкаИзмененияСоставаШкал);
			ИзмененияСоставаШкал.Добавить(СтрокаСоставаШкал);
			
			ЕстьСледующиеИзмененияСоставаШкал			= ВыборкаИзмененияСоставаШкал.Следующий();
		КонецЦикла;
		
		ИзмененияИзмерителей  							= Новый Массив;
		
		Пока Выборка.ЧастныйСектор = ВыборкаИзмененияИзмерителей.ЧастныйСектор
			И Выборка.Строение = ВыборкаИзмененияИзмерителей.Строение
			И Выборка.Помещение = ВыборкаИзмененияИзмерителей.Помещение
			И Выборка.ДокРегистратор = ВыборкаИзмененияИзмерителей.ДокРегистратор
			И ЕстьСледующиеИзмененияИзмерителей Цикл				
			
			СтрокаИзмерителей 							= Новый Структура(ОписаниеРесурсовИзмерителей);
			СтрокаИзмерителей.Вставить("ТочкаУчета", 	Неопределено);
			СтрокаИзмерителей.Вставить("Измеритель", 	Неопределено);
			ЗаполнитьЗначенияСвойств(СтрокаИзмерителей, ВыборкаИзмененияИзмерителей);
			ИзмененияИзмерителей.Добавить(СтрокаИзмерителей);
			
			ЕстьСледующиеИзмененияИзмерителей			= ВыборкаИзмененияИзмерителей.Следующий();
		КонецЦикла;
		
		
		СервисСтабильныеПериоды.ПередПроведениемДокумента(Выборка);
				
		Если НЕ ДанныеДокумента = Неопределено
			И Не ИзменяемыеПараметрыПоТипам[ТипЗнч(Выборка.ДокРегистратор)] = Неопределено 
			И НЕ ИзменяемыеПараметрыПоТипам[ТипЗнч(Выборка.ДокРегистратор)][ДанныеДокумента.ВидОперации] = Неопределено Тогда			
			ИзменяемыеПараметрыРасчета		 			= ИзменяемыеПараметрыПоТипам[ТипЗнч(Выборка.ДокРегистратор)][ДанныеДокумента.ВидОперации];
			ДанныеДляПроведения 						= ДанныеДокумента.ДанныеДляПроведения;
		ИначеЕсли ДанныеДокумента = Неопределено И НЕ ИзмененияПлощади.Количество() = 0 Тогда
			// изменяется только площадь
			Параметры  										= Новый Структура;
			Параметры.Вставить("ОписаниеРесурсов", 						ОписаниеРесурсов);
			Параметры.Вставить("ПараметрыОпределенияКлючаНорматива", 	ПараметрыОпределенияКлючаНорматива);
			Параметры.Вставить("НаборПериоды", 							СервисСтабильныеПериоды.НаборПериоды);
			Параметры.Вставить("НаборШкалы", 							СервисСтабильныеПериоды.НаборШкалы);
			Параметры.Вставить("НаборИзмерители", 						СервисСтабильныеПериоды.НаборИзмерители);
			Параметры.Вставить("ИзмененияПлощади", 						ИзмененияПлощади);
			Параметры.Вставить("ИзмененияСоставаШкал",					ИзмененияСоставаШкал);
			Параметры.Вставить("ИзмененияИзмерителей",					ИзмененияИзмерителей);
			Параметры.Вставить("ЗначенияПараметровПоНаправлениямУслуг", ЗначенияПараметровПоНаправлениямУслуг);
			Параметры.Вставить("ОписаниеРесурсовШкалы", 				ОписаниеРесурсовШкалы);
			Параметры.Вставить("ОписаниеРесурсовИзмерителей", 			ОписаниеРесурсовИзмерителей);
		
			Для Каждого КлючЗначениеТочка Из ТекущиеДанныеПомещения Цикл
				ЗначенияРесурсов 						= Неопределено;
				Для Каждого КлючЗначениеУслуга Из КлючЗначениеТочка.Значение Цикл
					ЗначенияРесурсов 					= КлючЗначениеУслуга.Значение;
					ЗначенияРесурсов.НомерПозиции 		= ЗначенияРесурсов.НомерПозиции + 1;
					ДобавитьСтрокуНабора(Параметры,ЗначенияРесурсов,Выборка,КлючЗначениеУслуга.Ключ,КлючЗначениеТочка.Ключ);
				КонецЦикла;	
				ДобавитьСтрокуНабораШкал(Параметры,ЗначенияРесурсов.Шкалы,Выборка,ЗначенияРесурсов.НомерПозиции, КлючЗначениеТочка.Ключ);
			КонецЦикла; 			
			текОрганизация 								= Выборка.Организация;		
			текПериодНачисления 						= Выборка.ПериодНачисления;
			текРайон 									= Выборка.Район;
			текЧастныйСектор							= Выборка.ЧастныйСектор;
			текСтроение 								= Выборка.Строение;
			текПомещение 								= Выборка.Помещение;
			Продолжить;
		Иначе	
			текОрганизация 								= Выборка.Организация;		
			текПериодНачисления 						= Выборка.ПериодНачисления;
			текРайон 									= Выборка.Район;
			текЧастныйСектор							= Выборка.ЧастныйСектор;
			текСтроение 								= Выборка.Строение;
			текПомещение 								= Выборка.Помещение;
			Продолжить;			
		КонецЕсли;
		
		Параметры  										= Новый Структура;
		Параметры.Вставить("ОписаниеРесурсов", 						ОписаниеРесурсов);
		Параметры.Вставить("ПараметрыОпределенияКлючаНорматива", 	ПараметрыОпределенияКлючаНорматива);
		Параметры.Вставить("НаборПериоды", 							СервисСтабильныеПериоды.НаборПериоды);
		Параметры.Вставить("НаборШкалы", 							СервисСтабильныеПериоды.НаборШкалы);
		Параметры.Вставить("НаборИзмерители", 						СервисСтабильныеПериоды.НаборИзмерители);
		Параметры.Вставить("ИзмененияПлощади", 						ИзмененияПлощади);
		Параметры.Вставить("ИзмененияСоставаШкал",					ИзмененияСоставаШкал);
		Параметры.Вставить("ИзмененияИзмерителей",					ИзмененияИзмерителей);
		Параметры.Вставить("ЗначенияПараметровПоНаправлениямУслуг", ЗначенияПараметровПоНаправлениямУслуг);
		Параметры.Вставить("ОписаниеРесурсовШкалы", 				ОписаниеРесурсовШкалы);
		Параметры.Вставить("ОписаниеРесурсовИзмерителей", 			ОписаниеРесурсовИзмерителей);
		
		
		Для Порядок = 0 ПО ИзменяемыеПараметрыРасчета.ВГраница() Цикл
			
			Если ТипЗнч(ИзменяемыеПараметрыРасчета[Порядок])= Тип("Строка") И ИзменяемыеПараметрыРасчета[Порядок] = "*" Тогда
				// в результате запроса есть все свойства
				
				ДобавитьНовыеЗаписиПомещения(ТекущиеДанныеПомещения, Параметры, ДанныеДляПроведения);
				
			ИначеЕсли ИзменяемыеПараметрыРасчета[Порядок].Свойство("Ключи") И  НЕ СтрНайти(ИзменяемыеПараметрыРасчета[Порядок].Ключи, "ТочкаУчета") = 0 И НЕ СтрНайти(ИзменяемыеПараметрыРасчета[Порядок].Ключи, "Услуга") = 0
				И ИзменяемыеПараметрыРасчета[Порядок].Свойство("НоваяТочка") И ИзменяемыеПараметрыРасчета[Порядок].НоваяТочка  Тогда
				
				ДобавитьНовуюТочкуУчета(ТекущиеДанныеПомещения, Порядок, ИзменяемыеПараметрыРасчета[Порядок], Параметры, ДанныеДляПроведения);
				
			ИначеЕсли ИзменяемыеПараметрыРасчета[Порядок].Свойство("Ключи") и НЕ СтрНайти(ИзменяемыеПараметрыРасчета[Порядок].Ключи, "ТочкаУчета") = 0 И НЕ СтрНайти(ИзменяемыеПараметрыРасчета[Порядок].Ключи, "Услуга") = 0 Тогда
				
				ИзменитьПараметрыУслугиТочкиУчета(ТекущиеДанныеПомещения, Порядок, ИзменяемыеПараметрыРасчета[Порядок], Параметры, ДанныеДляПроведения);
				
			ИначеЕсли ИзменяемыеПараметрыРасчета[Порядок].Свойство("Ключи") и СтрНайти(ИзменяемыеПараметрыРасчета[Порядок].Ключи, "ТочкаУчета") = 0 И НЕ СтрНайти(ИзменяемыеПараметрыРасчета[Порядок].Ключи, "Услуга") = 0 Тогда
				
				ИзменитьПараметрыУслуги(ТекущиеДанныеПомещения, Порядок, ИзменяемыеПараметрыРасчета[Порядок], Параметры, ДанныеДляПроведения);
				
			ИначеЕсли ИзменяемыеПараметрыРасчета[Порядок].Свойство("Ключи") и НЕ СтрНайти(ИзменяемыеПараметрыРасчета[Порядок].Ключи, "ТочкаУчета") = 0 Тогда
				
				ИзменитьПараметрыТочкиУчета(ТекущиеДанныеПомещения, Порядок, ИзменяемыеПараметрыРасчета[Порядок], Параметры, ДанныеДляПроведения);	
				
			Иначе 
				// Изменяем простые свойства всех точек учета
				врДанныеДляПроведения 			= ДанныеДляПроведения;
				Если ДанныеДляПроведения.Количество() = 0 Тогда
					врДанныеДляПроведения 			= Новый Массив;
					врДанныеДляПроведения.Добавить(Новый Структура("Организация,ПериодНачисления,Район,ЧастныйСектор,Строение,Помещение,ПериодРегистрации, ДокРегистратор, ДатаРегистратора, Порядок",
					Выборка.Организация,Выборка.ПериодНачисления,Выборка.Район,Выборка.ЧастныйСектор, Выборка.Строение, Выборка.Помещение, Выборка.ПериодРегистрации, Выборка.ДокРегистратор, Выборка.ДатаРегистратора,Порядок));
				КонецЕсли;
				ИзменитьСвойстваВсехТочекУчета(ТекущиеДанныеПомещения, Порядок, ИзменяемыеПараметрыРасчета[Порядок], Параметры, врДанныеДляПроведения);				
			КонецЕсли;
		КонецЦикла; 		
		текОрганизация 								= Выборка.Организация;		
		текПериодНачисления 						= Выборка.ПериодНачисления;
		текРайон 									= Выборка.Район;
		текЧастныйСектор							= Выборка.ЧастныйСектор;
		текСтроение 								= Выборка.Строение;
		текПомещение 								= Выборка.Помещение;		
	КонецЦикла;	
	
	СервисСтабильныеПериоды.ПослеПроведенияПомещения(текОрганизация,текПериодНачисления,текРайон,текЧастныйСектор,текСтроение,текПомещение);
		
КонецПроцедуры

Процедура ДобавитьНовыеЗаписиПомещения(ТекущиеДанныеПомещения, Параметры, ДанныеДокумента)
	
	ОписаниеРесурсов 				= Параметры.ОписаниеРесурсов;
	мТочкиУчета 					= Новый Массив;
	Для Сч = 0 По ДанныеДокумента.ВГраница() Цикл		
		Ресурсы 					= Новый Структура(ОписаниеРесурсов);
		ЗаполнитьЗначенияСвойств(Ресурсы,ДанныеДокумента[Сч]);
		Ресурсы.НомерПозиции 		= 0;
		Если НЕ ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета]= Неопределено Тогда
			ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета].Вставить(ДанныеДокумента[Сч].Услуга,Ресурсы);		
		Иначе
			СоотвествиеУслуга 		= Новый Соответствие;
			СоотвествиеУслуга.Вставить(ДанныеДокумента[Сч].Услуга, Ресурсы);
			ТекущиеДанныеПомещения.Вставить(ДанныеДокумента[Сч].ТочкаУчета, СоотвествиеУслуга);
		КонецЕсли; 		
		
		ДобавитьСтрокуНабора(Параметры,Ресурсы,ДанныеДокумента[Сч],ДанныеДокумента[Сч].Услуга);
		ДобавитьНовыйСоставШкал(Параметры, Ресурсы, ДанныеДокумента[Сч].ТочкаУчета);		
		ДобавитьЗначенияИзмерителей(Параметры, Ресурсы, ДанныеДокумента[Сч].ТочкаУчета, ДанныеДокумента[Сч].Услуга, Ресурсы.НаправлениеИспользованияТУ);
		
		Если мТочкиУчета.Найти(ДанныеДокумента[Сч].ТочкаУчета) = Неопределено Тогда			
			ДобавитьСтрокуНабораШкал(Параметры,Ресурсы.Шкалы,ДанныеДокумента[Сч],Ресурсы.НомерПозиции);	
			ДобавитьНовуюСтрокуИзмерителей(Параметры,Ресурсы.Измерители,ДанныеДокумента[Сч],Ресурсы.НомерПозиции);			
			мТочкиУчета.Добавить(ДанныеДокумента[Сч].ТочкаУчета);
		КонецЕсли;		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьНовуюТочкуУчета(ТекущиеДанныеПомещения, Порядок, ИзменяемыеПараметры, Параметры , ДанныеДокумента)
	
	Ресурсы  							= ИзменяемыеПараметры.Ресурсы;
	
	ОбщиеРесурсы 						= Неопределено;			
	Для Каждого КлючЗначениеТочка ИЗ ТекущиеДанныеПомещения Цикл
		Для Каждого КлючЗначениеУслуга Из КлючЗначениеТочка.Значение Цикл
			ОбщиеРесурсы				= КлючЗначениеУслуга.Значение;
			Прервать;
		КонецЦикла;
		Прервать;
	КонецЦикла;	
	
	Если ОбщиеРесурсы = Неопределено Тогда
		Отказ 							= Истина;
	КонецЕсли;
	
	мТочкиУчета 						= Новый Массив;
	Для Сч = 0 По ДанныеДокумента.ВГраница() Цикл		
		ТекущиеРесурсы 					= Неопределено;
		Если НЕ ОбщиеРесурсы = Неопределено Тогда
			врТекущиеРесурсы 			= Новый ФиксированнаяСтруктура(ОбщиеРесурсы);
			ТекущиеРесурсы 				= Новый Структура(врТекущиеРесурсы);
		Иначе
			ТекущиеРесурсы 				= Новый Структура(Параметры.ОписаниеРесурсов);
		КонецЕсли;
		
		ТекущиеРесурсы.Шкалы 			= Новый Массив;
		ТекущиеРесурсы.Измерители 		= Новый Массив;
		ЗаполнитьЗначенияСвойств(ТекущиеРесурсы,ДанныеДокумента[Сч],СтрЗаменить(Ресурсы,Символы.ПС,""));
		ТекущиеРесурсы.НомерПозиции = 0;
		Если НЕ ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета]= Неопределено Тогда
			ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета].Вставить(ДанныеДокумента[Сч].Услуга,ТекущиеРесурсы);		
		Иначе
			СоотвествиеУслуга 		= Новый Соответствие;
			СоотвествиеУслуга.Вставить(ДанныеДокумента[Сч].Услуга, ТекущиеРесурсы);
			ТекущиеДанныеПомещения.Вставить(ДанныеДокумента[Сч].ТочкаУчета, СоотвествиеУслуга);
		КонецЕсли; 		
				
		ДобавитьНовыйСоставШкал(Параметры, ТекущиеРесурсы, ДанныеДокумента[Сч].ТочкаУчета);
		ДобавитьЗначенияИзмерителей(Параметры, ТекущиеРесурсы, ДанныеДокумента[Сч].ТочкаУчета, ДанныеДокумента[Сч].Услуга, ТекущиеРесурсы.НаправлениеИспользованияТУ);
		ДобавитьНовуюСтрокуИзмерителей(Параметры,ТекущиеРесурсы.Измерители,ДанныеДокумента[Сч],ТекущиеРесурсы.НомерПозиции);
		
		Если мТочкиУчета.Найти(ДанныеДокумента[Сч].ТочкаУчета) = Неопределено Тогда			
			ДобавитьСтрокуНабораШкал(Параметры,ТекущиеРесурсы.Шкалы,ДанныеДокумента[Сч],ТекущиеРесурсы.НомерПозиции); 			
			мТочкиУчета.Добавить(ДанныеДокумента[Сч].ТочкаУчета);
		КонецЕсли;
		
		ДобавитьСтрокуНабора(Параметры,ТекущиеРесурсы,ДанныеДокумента[Сч],ДанныеДокумента[Сч].Услуга);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьСвойстваВсехТочекУчета(ТекущиеДанныеПомещения,Порядок,ИзменяемыеПараметры, Параметры, ДанныеДокумента)
	
	Ресурсы 												= ИзменяемыеПараметры.Ресурсы;
	мРесурсы 												= СтрРазделить(Ресурсы,",");
	ИндексСоставЖильцов 									= мРесурсы.Найти("СоставЖильцов");
	СвойстваСоставаЖильцов 									= Неопределено;	
	Если НЕ ИндексСоставЖильцов = Неопределено Тогда
		СвойстваСоставаЖильцов 								= ИзменяемыеПараметры.СвойстваСоставаЖильцов;		
		мРесурсы.Удалить(ИндексСоставЖильцов);
	КонецЕсли;
	
	яРесурсы 												= СтрСоединить(мРесурсы,",");
	
	яДАнныеДокумента 										= Неопределено;
	Для Сч = 0 По ДанныеДокумента.ВГРаница() Цикл
		Если ДанныеДокумента[Сч].Порядок  = Порядок Тогда
			яДАнныеДокумента 								= ДанныеДокумента[Сч];
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	Для Каждого КлючЗначениеТочка Из ТекущиеДанныеПомещения Цикл
		Для Каждого КлючЗначениеТочкаУслуга Из КлючЗначениеТочка.Значение Цикл
			ЗначенияРесурсов 								= КлючЗначениеТочкаУслуга.Значение;
			ЗначенияРесурсов.НомерПозиции 					= ЗначенияРесурсов.НомерПозиции + 1;
			ЗаполнитьЗначенияСвойств(ЗначенияРесурсов,яДАнныеДокумента,яРесурсы);
			Если НЕ ИндексСоставЖильцов = Неопределено Тогда
				 УстановитьКоличествоЖильцов(ЗначенияРесурсов, яДАнныеДокумента.СоставЖильцов, яДАнныеДокумента.КлючПомещения, СвойстваСоставаЖильцов, яДАнныеДокумента);
			КонецЕсли;			
			ДобавитьСтрокуНабора(Параметры,ЗначенияРесурсов,яДАнныеДокумента,КлючЗначениеТочкаУслуга.Ключ, КлючЗначениеТочка.Ключ);
			ИзменитьСоставШкалы(Параметры, ЗначенияРесурсов, КлючЗначениеТочка.Ключ);
		КонецЦикла;  		
		ДобавитьСтрокуНабораШкал(Параметры,ЗначенияРесурсов.Шкалы,яДАнныеДокумента,ЗначенияРесурсов.НомерПозиции, КлючЗначениеТочка.Ключ);			
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуНабора(Параметры,Ресурсы, ДанныеСтрокиДокумента, Услуга, ТочкаУчета = Неопределено)
	
	Если Не ТочкаУчета = Неопределено Тогда
		яТочкаУчета	 							= ТочкаУчета;
	Иначе
		яТочкаУчета								= ДанныеСтрокиДокумента.ТочкаУчета;
	КонецЕсли;
	
	НаборПериоды 								= Параметры.НаборПериоды;
			
	ЗаполнитьКлючиНорматива(Услуга, Ресурсы, Параметры.ПараметрыОпределенияКлючаНорматива);
	УстановитьЗначениеПлощади(Параметры, Ресурсы, ДанныеСтрокиДокумента.ПериодНачисления, Услуга);
		
	СтрокаНабора 								= НаборПериоды.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНабора,Ресурсы);
	
	СтрокаНабора.Организация	 				= ДанныеСтрокиДокумента.Организация;
	СтрокаНабора.ПериодНачисления 				= ДанныеСтрокиДокумента.ПериодНачисления;
	СтрокаНабора.Район			 				= ДанныеСтрокиДокумента.Район;
	СтрокаНабора.ЧастныйСектор	 				= ДанныеСтрокиДокумента.ЧастныйСектор;
	СтрокаНабора.Строение		 				= ДанныеСтрокиДокумента.Строение;
	СтрокаНабора.Помещение		 				= ДанныеСтрокиДокумента.Помещение;
	СтрокаНабора.Услуга			 				= Услуга;
	СтрокаНабора.ПериодРегистрации 				= ДанныеСтрокиДокумента.ПериодРегистрации;
	СтрокаНабора.ТочкаУчета		 				= яТочкаУчета;
	СтрокаНабора.ДокРегистратор 				= ДанныеСтрокиДокумента.ДокРегистратор;
	СтрокаНабора.ДатаРегистратора 				= ДанныеСтрокиДокумента.ДатаРегистратора;
	СтрокаНабора.НомерПозиции 					= Ресурсы.НомерПозиции;
			
КонецПроцедуры

Процедура ДобавитьСтрокуНабораШкал(Параметры, Шкалы, ДанныеСтрокиДокумента, НомерПозиции, ТочкаУчета = Неопределено)
	
	Если Не ТочкаУчета = Неопределено Тогда
		яТочкаУчета	 							= ТочкаУчета;
	Иначе
		яТочкаУчета								= ДанныеСтрокиДокумента.ТочкаУчета;
	КонецЕсли;
	
	НаборШкалы 									= Параметры.НаборШкалы;
		
	//Для Сч = 0 По ИзмененияСоставаШкал.ВГраница() Цикл				
	//	ДанныеСтроки  							= Новый Структура(Параметры.ОписаниеРесурсовШкалы);
	//	ДанныеСтроки.Вставить("Шкала", Неопределено);
	//	ЗаполнитьЗначенияСвойств(ДанныеСтроки,ИзмененияСоставаШкал[Сч]);
	//	Шкалы.Добавить(ДанныеСтроки);
	//КонецЦикла;
	
	Для Сч = 0 ПО Шкалы.ВГраница() Цикл 
		ДанныеСтроки 							= Шкалы[Сч];
		СтрокаНабор 							= НаборШкалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабор, ДанныеСтроки);
		СтрокаНабор.Организация 				= ДанныеСтрокиДокумента.Организация;
		СтрокаНабор.ПериодНачисления			= ДанныеСтрокиДокумента.ПериодНачисления;
		СтрокаНабор.Район						= ДанныеСтрокиДокумента.Район;
		СтрокаНабор.ЧастныйСектор				= ДанныеСтрокиДокумента.ЧастныйСектор;
		СтрокаНабор.Строение					= ДанныеСтрокиДокумента.Строение;
		СтрокаНабор.Помещение					= ДанныеСтрокиДокумента.Помещение;
		СтрокаНабор.НомерПозиции 				= НомерПозиции;
		СтрокаНабор.ТочкаУчета					= яТочкаУчета;
		СтрокаНабор.ДокРегистратор				= ДанныеСтрокиДокумента.ДокРегистратор;
		СтрокаНабор.ДатаРегистратора			= ДанныеСтрокиДокумента.ДатаРегистратора;		
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьНовуюСтрокуИзмерителей(Параметры, Измерители, ДанныеСтрокиДокумента, НомерПозиции, ТочкаУчета = Неопределено)
	
	Если Не ТочкаУчета = Неопределено Тогда
		яТочкаУчета	 							= ТочкаУчета;
	Иначе
		яТочкаУчета								= ДанныеСтрокиДокумента.ТочкаУчета;
	КонецЕсли;
	
	НаборИзмерители 							= Параметры.НаборИзмерители;
			
	Для Сч = 0 ПО Измерители.ВГраница() Цикл 
		ДанныеСтроки 							= Измерители[Сч];
		СтрокаНабор 							= НаборИзмерители.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабор, ДанныеСтроки);
		СтрокаНабор.Организация 				= ДанныеСтрокиДокумента.Организация;
		СтрокаНабор.ПериодНачисления			= ДанныеСтрокиДокумента.ПериодНачисления;
		СтрокаНабор.Район						= ДанныеСтрокиДокумента.Район;
		СтрокаНабор.ЧастныйСектор				= ДанныеСтрокиДокумента.ЧастныйСектор;
		СтрокаНабор.Строение					= ДанныеСтрокиДокумента.Строение;
		СтрокаНабор.Помещение					= ДанныеСтрокиДокумента.Помещение;
		СтрокаНабор.НомерПозиции 				= НомерПозиции;
		СтрокаНабор.ТочкаУчета					= яТочкаУчета;
		СтрокаНабор.ДокРегистратор				= ДанныеСтрокиДокумента.ДокРегистратор;
		СтрокаНабор.ДатаРегистратора			= ДанныеСтрокиДокумента.ДатаРегистратора;		
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьКлючиНорматива(Услуга, Ресурсы, ПараметрыОпределенияКлючаНорматива) 
	Ресурсы.КоличествоЧеловек 				= энргРаботаСПараметрамиРасчетаАбонентаСервер.КоличествоЧеловек(Ресурсы);	
	Ресурсы.КлючНорматива 					= ОпределитьКлючНорматива(Услуга,Ресурсы,Ложь,ПараметрыОпределенияКлючаНорматива);
	Ресурсы.КлючСоцНорматива 				= ОпределитьКлючНорматива(Услуга,Ресурсы,Истина,ПараметрыОпределенияКлючаНорматива);	
КонецПроцедуры

Процедура ИзменитьПараметрыТочкиУчета(ТекущиеДанныеПомещения, Порядок, ИзменяемыПараметры, Параметры, ДанныеДокумента)
	
	Ресурсы 								= ИзменяемыПараметры.Ресурсы;
	мТочкиУчета 							= Новый Массив;
	Для Сч = 0 По ДанныеДокумента.ВГраница() Цикл 		
		
		Если НЕ ДанныеДокумента[Сч].Порядок  = Порядок Тогда
			Продолжить;
		КонецЕсли;
				
		ДанныеТочкиУчета 					= ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета];
		
		Если ДанныеТочкиУчета = Неопределено Тогда
			Отказ 							= Истина;
			Продолжить;
		КонецЕсли;		
		
		Для Каждого КлючЗначениеУслуга Из ДанныеТочкиУчета Цикл
			ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета][КлючЗначениеУслуга.Ключ].НомерПозиции 	= ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета][КлючЗначениеУслуга.Ключ].НомерПозиции + 1;
			ЗаполнитьЗначенияСвойств(ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета][КлючЗначениеУслуга.Ключ],ДанныеДокумента[Сч],Ресурсы);
			ДобавитьСтрокуНабора(Параметры,ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета][КлючЗначениеУслуга.Ключ],ДанныеДокумента[Сч],КлючЗначениеУслуга.Ключ);
			
			ТекущиеРесурсы 					= ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета][КлючЗначениеУслуга.Ключ];
			
			ДобавитьНовыйСоставШкал(Параметры,ТекущиеРесурсы,ДанныеДокумента[Сч].ТочкаУчета);
			ДобавитьЗначенияИзмерителей(Параметры,ТекущиеРесурсы,ДанныеДокумента[Сч].ТочкаУчета,КлючЗначениеУслуга.Ключ, ТекущиеРесурсы.НаправлениеИспользованияТУ);
			 			
			Если мТочкиУчета.Найти(ДанныеДокумента[Сч].ТочкаУчета) = Неопределено Тогда			
				ДобавитьСтрокуНабораШкал(Параметры,ТекущиеРесурсы.Шкалы,ДанныеДокумента[Сч],ТекущиеРесурсы.НомерПозиции);
				ДобавитьНовуюСтрокуИзмерителей(Параметры,ТекущиеРесурсы.Измерители,ДанныеДокумента[Сч],ТекущиеРесурсы.НомерПозиции);
				мТочкиУчета.Добавить(ДанныеДокумента[Сч].ТочкаУчета);
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ИзменитьПараметрыУслугиТочкиУчета(ТекущиеДанныеПомещения, Порядок, ИзменяемыПараметры, Параметры, ДанныеДокумента)
	
	Ресурсы 						= ИзменяемыПараметры.Ресурсы;
	мТочкиУчета 					= Новый Массив;
	
	Для Сч = 0 По ДанныеДокумента.ВГраница() Цикл 		
		
		Если Не ДанныеДокумента[Сч].Порядок = Порядок Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеТочкиУчета 			= ТекущиеДанныеПомещения[ДанныеДокумента[Сч].ТочкаУчета];
		
		Если ДанныеТочкиУчета = Неопределено Тогда
			Отказ 					= Истина;
			Продолжить;
		КонецЕсли;
		
		ДанныеТочкиУслуги 			= ДанныеТочкиУчета[ДанныеДокумента[Сч].Услуга];
		
		Если ДанныеТочкиУслуги = Неопределено Тогда
			Отказ 					= Истина;
			Продолжить;
		КонецЕсли;		
		
		ЗаполнитьЗначенияСвойств(ДанныеТочкиУслуги,ДанныеДокумента[Сч],Ресурсы);
		ДанныеТочкиУслуги.НомерПозиции 	= ДанныеТочкиУслуги.НомерПозиции + 1;
		
		ДобавитьСтрокуНабора(Параметры,ДанныеТочкиУслуги,ДанныеДокумента[Сч],ДанныеДокумента[Сч].Услуга);
		ДобавитьНовыйСоставШкал(Параметры,ДанныеТочкиУслуги,ДанныеДокумента[Сч].ТочкаУчета);		
		
		Если мТочкиУчета.Найти(ДанныеДокумента[Сч].ТочкаУчета) = Неопределено Тогда			
			ДобавитьСтрокуНабораШкал(Параметры,ДанныеТочкиУслуги.Шкалы,ДанныеДокумента[Сч],ДанныеТочкиУслуги.НомерПозиции);
			мТочкиУчета.Добавить(ДанныеДокумента[Сч].ТочкаУчета);
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ИзменитьПараметрыУслуги(ТекущиеДанныеПомещения, Порядок, ИзменяемыПараметры, Параметры, ДанныеДокумента)
	
	Ресурсы 									= ИзменяемыПараметры.Ресурсы;
		
	Для Сч = 0 По ДанныеДокумента.ВГраница() Цикл
		Для Каждого КлючЗначениеТочка Из ТекущиеДанныеПомещения Цикл
			ЕстьНужнаяУслуга 				 	= Ложь;
			Для Каждого КлючЗначениеУслуга Из КлючЗначениеТочка.Значение Цикл
				Если КлючЗначениеУслуга.Ключ =  ДанныеДокумента[Сч].Услуга Тогда
					ЕстьНужнаяУслуга 			= Истина;
					Прервать;
				КонецЕсли;				
			КонецЦикла;
			
			Если Не ЕстьНужнаяУслуга Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого КлючЗначениеУслуга Из КлючЗначениеТочка.Значение Цикл
				ДанныеТочкиУслуги 				= КлючЗначениеУслуга.Значение;				
				Если КлючЗначениеУслуга.Ключ  	= ДанныеДокумента[Сч].Услуга Тогда					
					ЗаполнитьЗначенияСвойств(ДанныеТочкиУслуги,ДанныеДокумента[Сч],Ресурсы);					
				КонецЕсли;				
				ДанныеТочкиУслуги.НомерПозиции 	= ДанныеТочкиУслуги.НомерПозиции + 1;
				ДобавитьСтрокуНабора(Параметры,ДанныеТочкиУслуги,ДанныеДокумента[Сч],КлючЗначениеУслуга.Ключ, КлючЗначениеТочка.Ключ);				
			КонецЦикла;			
			
			ДобавитьСтрокуНабораШкал(Параметры,ДанныеТочкиУслуги.Шкалы,ДанныеДокумента[Сч],ДанныеТочкиУслуги.НомерПозиции,КлючЗначениеТочка.Ключ);
			
		КонецЦикла;		
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьЗначениеПлощади(Параметры, Ресурсы, ПериодНачисления, Услуга)
	
	Если Параметры.ИзмененияПлощади.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПараметровПериодНачисления	= Параметры.ЗначенияПараметровПоНаправлениямУслуг[ПериодНачисления];
	Если ЗначенияПараметровПериодНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПараметровПоУслуге 			= ЗначенияПараметровПериодНачисления[Услуга];
	Если ЗначенияПараметровПоУслуге = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПараметров 					= ЗначенияПараметровПоУслуге[Ресурсы.НаправлениеИспользованияТУ];
	
	Если ЗначенияПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидПлощади 	 						= ЗначенияПараметров.ВидПлощади;
	
	Если НЕ ЗначениеЗаполнено(ВидПлощади) Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 0 По Параметры.ИзмененияПлощади.ВГраница() Цикл
		Если Параметры.ИзмененияПлощади[Сч].ВидПлощади  = ВидПлощади Тогда
			Ресурсы.ЗначениеПлощади 	= Параметры.ИзмененияПлощади[Сч].Значение;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКоличествоЖильцов(ЗначенияРесурсов, КоличествоЖильцов, КлючПомещения, СвойстваСоставаЖильцов, ДАнныеДокумента)
	
	яСоставЖильцов 						= Новый ФиксированнаяСтруктура("КоличествоПроживающих,КоличествоПрописанных,КоличествоСобственников", 0, 0, 0);
		
	IDКлючПомещения 					= "" + КлючПомещения.УникальныйИдентификатор();
	СоставЖильцов  						= Новый Соответствие;
	Если НЕ ПустаяСтрока(ЗначенияРесурсов.СоставЖильцов) Тогда
		Чтение  						= Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ЗначенияРесурсов.СоставЖильцов);
		СоставЖильцов 					= ПрочитатьJSON(Чтение,Истина);
	КонецЕсли;
	
	Если СоставЖильцов[IDКлючПомещения] = Неопределено Тогда
		Значение 						= Новый Структура(яСоставЖильцов);
		ЗаполнитьЗначенияСвойств(Значение,ДАнныеДокумента,СвойстваСоставаЖильцов); 
		СоставЖильцов.Вставить(IDКлючПомещения, Значение);
	Иначе
		ВызватьИсключение "Метод не реализован";
		СоставЖильцов[IDКлючПомещения] = КоличествоЖильцов;
	КонецЕсли; 	
	
	НовоеЗначение  						= 0;
	
	Для Каждого КлючЗначение Из СоставЖильцов Цикл
		врЗначение 						= энргРаботаСПараметрамиРасчетаАбонентаСервер.КоличествоЧеловек(КлючЗначение.Значение);
		НовоеЗначение 					= НовоеЗначение +  врЗначение;
	КонецЦикла;	
	
	Запись 								= Новый ЗаписьJSON;
	Запись.УстановитьСтроку();	
	ЗаписатьJSON(Запись,СоставЖильцов);
	
	ЗначенияРесурсов.КоличествоЖильцов 	= НовоеЗначение;
	ЗначенияРесурсов.СоставЖильцов 		= Запись.Закрыть()
	
КонецПроцедуры

Процедура ДобавитьНовыйСоставШкал(Параметры,Ресурсы, ТочкаУчета)
	
	Если Ресурсы.Шкалы = Неопределено Тогда
		Ресурсы.Шкалы 		= Новый Массив; 			
	КонецЕсли;
	
	ИзменениеСоставаШкал 		= Параметры.ИзмененияСоставаШкал;
	
	Если ИзменениеСоставаШкал.Количество()  = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Очищены 					= Ложь;
	
	Для Сч = 0 По ИзменениеСоставаШкал.ВГраница() Цикл
		Если НЕ ИзменениеСоставаШкал[Сч].ТочкаУчета  = ТочкаУчета Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Очищены Тогда
			Ресурсы.Шкалы.Очистить();
			Очищены				= Истина;
		КонецЕсли;
				
		ДанныеСтрокиШкалы 		= Новый Структура(Параметры.ОписаниеРесурсовШкалы); 		
		ДанныеСтрокиШкалы.Вставить("Шкала", Неопределено);  
		
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиШкалы, ИзменениеСоставаШкал[Сч]);
		Ресурсы.Шкалы.Добавить(ДанныеСтрокиШкалы);		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЗначенияИзмерителей(Параметры,Ресурсы, ТочкаУчета, Услуга, НаправлениеИспользованияТУ)
	
	Если Ресурсы.Измерители = Неопределено Тогда
		Ресурсы.Измерители 						= Новый Массив; 			
	КонецЕсли;
	
	ИзмененияИзмерителей 						= Параметры.ИзмененияИзмерителей;
	
	Если ИзмененияИзмерителей.Количество()  = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 0 По ИзмененияИзмерителей.ВГраница() Цикл
		Если НЕ ИзмененияИзмерителей[Сч].ТочкаУчета  = ТочкаУчета Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтрокиИзмерителей					= Новый Структура(Параметры.ОписаниеРесурсовИзмерителей); 		
		ДанныеСтрокиИзмерителей.Вставить("Измеритель", Неопределено);  
		
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиИзмерителей, ИзмененияИзмерителей[Сч]);
		
		РесурсыКлючиНорматива 					= Новый Структура(Параметры.ОписаниеРесурсовИзмерителей);
		ЗаполнитьЗначенияСвойств(РесурсыКлючиНорматива,ДанныеСтрокиИзмерителей);
		РесурсыКлючиНорматива.Вставить("ИзмерительНаправленияИспользования",ДанныеСтрокиИзмерителей.Измеритель);
		РесурсыКлючиНорматива.Вставить("НаправлениеИспользованияТУ", 		НаправлениеИспользованияТУ); 		
		
		ДанныеСтрокиИзмерителей.КлючНорматива 	= ОпределитьКлючНорматива(Услуга,РесурсыКлючиНорматива, Ложь, Параметры.ПараметрыОпределенияКлючаНорматива);
		Ресурсы.Измерители.Добавить(ДанныеСтрокиИзмерителей);
	КонецЦикла;

КонецПроцедуры

Процедура ИзменитьСоставШкалы(Параметры, Ресурсы, ТочкаУчета)
	
	ИзменениеСоставаШкал 				= Параметры.ИзмененияСоставаШкал;
	
	Если ИзменениеСоставаШкал.Количество()  = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 0 По ИзменениеСоставаШкал.ВГраница() Цикл
		Если НЕ ИзменениеСоставаШкал[Сч].ТочкаУчета  = ТочкаУчета Тогда
			Продолжить;
		КонецЕсли;
		Для Индекс = 0 По Ресурсы.Шкалы.ВГраница() Цикл
			Если ИзменениеСоставаШкал[Сч].Шкала = Ресурсы.Шкалы[Индекс].Шкала Тогда
				ДанныеСтрокиШкалы 		= Новый Структура(Параметры.ОписаниеРесурсовШкалы); 		
				ДанныеСтрокиШкалы.Вставить("Шкала", Неопределено); 
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиШкалы, ИзменениеСоставаШкал[Сч]);
				Ресурсы.Шкалы[Индекс] 	= ДанныеСтрокиШкалы;
			КонецЕсли;			
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

Функция СоотвествиеРазрезовНорматива(МВТ,СервисСтабильныеПериоды) 
	
	ПараметрыРазреза						= РегистрыСведений.энргУстановленныеПараметрыРасчетаНорматива.СтруктураПараметровРазреза();
	
	СоотвествиеРазрезовНорматива			= Новый Соответствие;
	
	РезультатРазрезыНорматива 				= СервисСтабильныеПериоды.ДействующуюРазрезыНорматива(МВТ);
			
	Выборка 								= РезультатРазрезыНорматива.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СоотвествиеРазрезовНорматива[Выборка.Услуга] = Неопределено Тогда
			
			яПараметрыРазреза 				= Новый Структура(ПараметрыРазреза);
			ЗаполнитьЗначенияСвойств(яПараметрыРазреза,Выборка);
			СоответствиеСоциальныйНорматива = Новый Соответствие;
			СоответствиеСоциальныйНорматива.Вставить(Выборка.СоциальныйНорматив, яПараметрыРазреза);
			СоответствиеНаправление 			= Новый Соответствие;
			СоответствиеНаправление.Вставить(Выборка.НаправлениеИспользованияТУ, СоответствиеСоциальныйНорматива);
			СоотвествиеРазрезовНорматива.Вставить(Выборка.Услуга, СоответствиеНаправление);
		ИначеЕсли СоотвествиеРазрезовНорматива[Выборка.Услуга][Выборка.НаправлениеИспользованияТУ] = Неопределено Тогда
			
			яПараметрыРазреза 				= Новый Структура(ПараметрыРазреза);
			ЗаполнитьЗначенияСвойств(яПараметрыРазреза,Выборка);
			СоответствиеСоциальныйНорматива = Новый Соответствие;
			СоответствиеСоциальныйНорматива.Вставить(Выборка.СоциальныйНорматив, яПараметрыРазреза);
			СоотвествиеРазрезовНорматива[Выборка.Услуга].Вставить(Выборка.НаправлениеИспользованияТУ, СоответствиеСоциальныйНорматива);
			
		ИначеЕсли СоотвествиеРазрезовНорматива[Выборка.Услуга][Выборка.НаправлениеИспользованияТУ][Выборка.СоциальныйНорматив] = Неопределено Тогда
			
			яПараметрыРазреза 				= Новый Структура(ПараметрыРазреза);
			ЗаполнитьЗначенияСвойств(яПараметрыРазреза,Выборка);
			СоотвествиеРазрезовНорматива[Выборка.Услуга][Выборка.НаправлениеИспользованияТУ].Вставить(Выборка.СоциальныйНорматив, яПараметрыРазреза);
			
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат СоотвествиеРазрезовНорматива;
	
КонецФункции

Функция ОпределитьКлючНорматива(Услуга,Ресурсы,СоциальныйНорматив,ПараметрыОпределенияКлючаНорматива)  
	
	СоотвествиеРазрезовНорматива 			= ПараметрыОпределенияКлючаНорматива.СоотвествиеРазрезовНорматива;	
	ОписаниеКлючевыхПараметровНорматива 	= ПараметрыОпределенияКлючаНорматива.ОписаниеКлючевыхПараметровНорматива;
	ДанныеКлючейНорматива 					= ПараметрыОпределенияКлючаНорматива.ДанныеКлючейНорматива;
	
	РазарезыПоУслуге 						= СоотвествиеРазрезовНорматива[Услуга];
	
	Если РазарезыПоУслуге = Неопределено Тогда
		Возврат Справочники.энргКлючиНормативов.ПустаяСсылка();
	КонецЕсли;	
	
	ВидыРазрезовСоциальныйНорматива  		= РазарезыПоУслуге[Ресурсы.НаправлениеИспользованияТУ];
	
	Если ВидыРазрезовСоциальныйНорматива = Неопределено Тогда
		Возврат Справочники.энргКлючиНормативов.ПустаяСсылка();
	КонецЕсли;
	
	ЗначенияРазрезов 						= ВидыРазрезовСоциальныйНорматива[СоциальныйНорматив];
	
	Если ЗначенияРазрезов = Неопределено Тогда
		Возврат Справочники.энргКлючиНормативов.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыПоиска 						= Новый Структура;
	
	ПараметрыРазреза						= РегистрыСведений.энргУстановленныеПараметрыРасчетаНорматива.СтруктураПараметровРазреза();
	СтруктураПоиска 						= Новый Структура;
	СтруктураПоискаДиапозон					= Новый Структура;
	
	Для Каждого КлючЗначение Из ЗначенияРазрезов Цикл
		ОписаниеПараметра 					= ОписаниеКлючевыхПараметровНорматива[ПараметрыРазреза[КлючЗначение.Ключ]];
		Если КлючЗначение.Значение И ОписаниеПараметра.Диапазон Тогда			
			СтруктураПоискаДиапозон.Вставить(ОписаниеПараметра.Имя, Ресурсы[ОписаниеПараметра.Имя]);
		ИначеЕсли КлючЗначение.Значение Тогда
			Если Ресурсы.Свойство(ОписаниеПараметра.Имя) Тогда
				// для измерителей направлений ключ определяем отдельно
				СтруктураПоиска.Вставить(ОписаниеПараметра.Имя, Ресурсы[ОписаниеПараметра.Имя]);
			КонецЕсли;
		ИначеЕсли ОписаниеПараметра.Диапазон Тогда
			СтруктураПоиска.Вставить(ОписаниеПараметра.Имя + "От", ОписаниеПараметра.ЗначениеПоУмолчанию);
			СтруктураПоиска.Вставить(ОписаниеПараметра.Имя + "До", ОписаниеПараметра.ЗначениеПоУмолчанию);
		Иначе	
			СтруктураПоиска.Вставить(ОписаниеПараметра.Имя, ОписаниеПараметра.ЗначениеПоУмолчанию);
		КонецЕсли;		
	КонецЦикла;	
	
	// TODO FIX ME	
	Если ЗначенияРазрезов.РазрезВидСобственности И НЕ ЗначениеЗаполнено(Ресурсы.ВидСобственности) Тогда
		Ресурсы.ВидСобственности 			= Перечисления.энргТипыСобственниковЖилья.ЧастнаяСобственность;
		СтруктураПоиска.ВидСобственности	= Ресурсы.ВидСобственности;
	КонецЕсли;   	
	
	ВозможныеКлючи 							= ДанныеКлючейНорматива.НайтиСтроки(СтруктураПоиска);
	Для Сч = 0 ПО ВозможныеКлючи.ВГраница() Цикл
		КлючПодходит 						= Истина;
		Для Каждого КлючЗначение Из СтруктураПоискаДиапозон Цикл						
			Если ВозможныеКлючи[Сч][КлючЗначение.Ключ + "До"] = 0 Тогда
				Если НЕ (КлючЗначение.Значение >= ВозможныеКлючи[Сч][КлючЗначение.Ключ + "От"]
					И ВозможныеКлючи[Сч][КлючЗначение.Ключ + "От"]) Тогда
					КлючПодходит 			= Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				Если НЕ (ВозможныеКлючи[Сч][КлючЗначение.Ключ + "От"] <= Ресурсы[КлючЗначение.Ключ] 
					И Ресурсы[КлючЗначение.Ключ] < ВозможныеКлючи[Сч][КлючЗначение.Ключ + "До"]
					И ВозможныеКлючи[Сч][КлючЗначение.Ключ + "От"] > 0) Тогда
					КлючПодходит 			= Ложь;
					Прервать;
				КонецЕсли;				
			КонецЕсли;			
		КонецЦикла;
		Если КлючПодходит Тогда
			Возврат ВозможныеКлючи[Сч].Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Справочники.энргКлючиНормативов.ПустаяСсылка();
	
КонецФункции

Функция ДанныеСтрокиСтабильногоПериода()
	мИзмеренияИсключая  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияИсключая,",");
	
	ДанныеСтроки 		= Новый Структура;
	Для Каждого Измерение ИЗ Метаданные.РегистрыСведений.энргСтабильныеПериоды.Измерения Цикл
		Если НЕ мИзмеренияИсключая.Найти(Измерение.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСтроки.Вставить(Измерение.Имя, 		Неопределено);
	КонецЦикла;
	
	Ресурсы		 		= Метаданные.РегистрыСведений.энргСтабильныеПериоды.Ресурсы;
	Для Каждого Ресурс Из Ресурсы Цикл
		ДанныеСтроки.Вставить(Ресурс.Имя, Неопределено);
	КонецЦикла;
	
	ДанныеСтроки.Вставить("КлючПомещения", 			Неопределено);
	ДанныеСтроки.Вставить("Порядок", 				Неопределено);
	
	Возврат Новый ФиксированнаяСтруктура(ДанныеСтроки);
	
КонецФункции
