Перем Организация Экспорт;
Перем ПериодНачисления Экспорт;
Перем Район Экспорт;
Перем ЧастныйСектор Экспорт;
Перем Строение Экспорт;
Перем мПомещения Экспорт;
Перем ВидОперацийНачисления Экспорт;
перем ПериодНачисленияНачало Экспорт;
перем ПериодНачисленияЗавершение Экспорт;
перем НаборОбъемНачислений Экспорт ;
перем НаборОбъемНачисленийПомещений Экспорт ;
перем МенеджерДокументовНачислений Экспорт; 
перем ГраницыПериодаНачисления, ДокументОбъект, НаборВыполненные;
перем ИмяТаблицыПериодов;
перем НаборПериоды, НаборШкалы, НаборИзмерители, НаборМаксимальныеПоказания, НаборПредоставленныеПоказания, НаборМаксимальныеПоказанияСрез, НаборНаличиеПрибораСНачалаГода;

Процедура Инициализировать(МВТ, ПолучаемыеНаборы)  Экспорт 
	
	Схема 										= Неопределено;
	
	Если ВидОперацийНачисления = Неопределено Тогда
		ЗаполнитьТаблицуПериодов(Схема);
	Иначе
		ГраницыПериодаНачисления 				= Обработки.энргГраницыПериодаНачисленияМенеджер.ГраницыРасчетногоПериода(Организация,Район,ПериодНачисления,Ложь);
	КонецЕсли;
	
	Для Сч = 0 По ПолучаемыеНаборы.ВГраница() Цикл
		 ДобавитьНаборВСхему(Схема, ПолучаемыеНаборы[Сч].ИмяНабора, ПолучаемыеНаборы[Сч].ТаблицаДляПомещения);
	КонецЦикла;		
	
	Запрос  									= Новый Запрос(Схема.ПолучитьТекстЗапроса());
		
	ПараметрыЗапроса  							= Запрос.НайтиПараметры();
	Если НЕ ПараметрыЗапроса.Найти("Организация") = Неопределено Тогда
		Запрос.УстановитьПараметр("Организация",						Организация);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("Район") = Неопределено Тогда
		Запрос.УстановитьПараметр("Район",								Район);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("ЧастныйСектор") = Неопределено Тогда
		Запрос.УстановитьПараметр("ЧастныйСектор",						ЧастныйСектор);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("Строение") = Неопределено Тогда
		Запрос.УстановитьПараметр("Строение",							Строение);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("мПомещения") = Неопределено Тогда
		Запрос.УстановитьПараметр("мПомещения",							мПомещения);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("МКД") = Неопределено Тогда
		МКД 										=?(НЕ ЧастныйСектор, Строение, Справочники.энргСтроения.ПустаяСсылка());
		Запрос.УстановитьПараметр("МКД",								МКД);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("ПериодНачисленияНачало") = Неопределено Тогда
		Запрос.УстановитьПараметр("ПериодНачисленияНачало",				ПериодНачисленияНачало);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("НаборПериоды") = Неопределено Тогда
		Запрос.УстановитьПараметр("НаборПериоды",						НаборПериоды.Выгрузить());
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("НаборШкалы") = Неопределено Тогда
		Запрос.УстановитьПараметр("НаборШкалы",							НаборШкалы.Выгрузить());
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("НаборИзмерители") = Неопределено Тогда
		Запрос.УстановитьПараметр("НаборИзмерители",					НаборИзмерители.Выгрузить());
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("НаборПредоставленныеПоказания") = Неопределено Тогда
		Запрос.УстановитьПараметр("НаборПредоставленныеПоказания",		НаборПредоставленныеПоказания);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("НаборМаксимальныеПоказанияСрез") = Неопределено Тогда
		Запрос.УстановитьПараметр("НаборМаксимальныеПоказанияСрез",		НаборМаксимальныеПоказанияСрез);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("НаборНаличиеПрибораСНачалаГода") = Неопределено Тогда
		Запрос.УстановитьПараметр("НаборНаличиеПрибораСНачалаГода",		НаборНаличиеПрибораСНачалаГода);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("ВидОперацийНачисления") = Неопределено Тогда
		Запрос.УстановитьПараметр("ВидОперацийНачисления",				ВидОперацийНачисления);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("ПериодНовогоТарифа") = Неопределено Тогда
		Запрос.УстановитьПараметр("ПериодНовогоТарифа",					Константы.энргДеньНачалаПримененияНовогоТарифа.Получить());
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("ТекущийПериодНачисления") = Неопределено Тогда
		Запрос.УстановитьПараметр("ТекущийПериодНачисления",			ПериодНачисления);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("НачалоПериода") = Неопределено Тогда
		ГраницыОтчетногоПериода 				= Обработки.энргГраницыПериодаНачисленияМенеджер.ГраницыРасчетногоПериода(Организация,Район,ПериодНачисленияНачало);
		Запрос.УстановитьПараметр("НачалоПериода",			ГраницыОтчетногоПериода.НачалоОП);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("ОкончаниеПериода") = Неопределено Тогда
		ГраницыОтчетногоПериода 				= Обработки.энргГраницыПериодаНачисленияМенеджер.ГраницыРасчетногоПериода(Организация,Район,ПериодНачисленияЗавершение);
		Запрос.УстановитьПараметр("ОкончаниеПериода",			ГраницыОтчетногоПериода.ЗавершениеОП);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("НачалоПериодаРасчета") = Неопределено Тогда
		Запрос.УстановитьПараметр("НачалоПериодаРасчета",		ГраницыПериодаНачисления.НачалоОП);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("ЗавершениеПериодаРасчета") = Неопределено Тогда
		Запрос.УстановитьПараметр("ЗавершениеПериодаРасчета",	ГраницыПериодаНачисления.ЗавершениеОП);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("КоличествоДнейВПериодеРасчета") = Неопределено Тогда
		Запрос.УстановитьПараметр("КоличествоДнейВПериодеРасчета",ГраницыПериодаНачисления.ДнейВПериоде);
	КонецЕсли;
	Если НЕ ПараметрыЗапроса.Найти("ПредыдущийПериодНачисленияНачало") = Неопределено Тогда
		Запрос.УстановитьПараметр("ПредыдущийПериодНачисленияНачало",ДобавитьМесяц(ПериодНачисленияНачало,-1));
	КонецЕсли;	
	Если НЕ ПараметрыЗапроса.Найти("ПериодНачисления") = Неопределено Тогда
		Запрос.УстановитьПараметр("ПериодНачисления", ПериодНачисления);
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц 				= МВТ;
	
	Запрос.Выполнить();	
	
	НаборОбъемНачислений 						= РегистрыНакопления.энргОбъемНачислений.СоздатьНаборЗаписей();
	НаборОбъемНачисленийПомещений 				= РегистрыНакопления.энргОбъемНачисленийПомещенийСРазделеннымиЛС.СоздатьНаборЗаписей();
	
КонецПроцедуры

Процедура УстановитьНаборы(НаборыДанных) Экспорт 
	
	НаборПериоды 					= НаборыДанных.НаборСтабильныеПериоды;
	НаборШкалы 						= НаборыДанных.НаборСтабильныеПериодыШкалы;
	НаборИзмерители 				= НаборыДанных.НаборСтабильныеПериодыИзмерители;
	НаборМаксимальныеПоказания		= НаборыДанных.НаборПоказаний;	
	НаборПредоставленныеПоказания 	= ЗаполнитьПредоставленныеПоказания();
	НаборМаксимальныеПоказанияСрез 	= ЗаполнитьМаксимальныеПоказанияСрез();
	НаборНаличиеПрибораСНачалаГода 	= ЗаполнитьНаличиеПрибораСНачалаГода();
КонецПроцедуры

Процедура ПередПроведениемМКД(МКД, яДокументСсылка, ПометкаУдаления) Экспорт 
	Если ВидОперацийНачисления = Перечисления.энргВидыОперацийНачисления.ПерерасчетИзменениеПризнакаНаличияПрибораУчетаСНачалаГода Тогда
		НачатьТранзакцию();
		
		ДокументОбъект 									= Неопределено;
		ДокументСсылка 									= яДокументСсылка;
		НаборВыполненные 								= Неопределено;
		
		Если НЕ ЗначениеЗаполнено(яДокументСсылка)  Тогда
			
			ДокументСсылка 								= Документы.энргПерерасчет.ПолучитьСсылку(Новый УникальныйИдентификатор());
			ДокументОбъект  							= Документы.энргПерерасчет.СоздатьДокумент();
			ДокументОбъект.Строение						= МКД;				
			ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);		
			ДокументОбъект.Район  						= Район;		
			ДокументОбъект.Дата							= ГраницыПериодаНачисления.ЗавершениеОП-1;
			ДокументОбъект.Организация 					= Организация;
			ДокументОбъект.ВидОперации 					= Перечисления.энргВидыОпераций.энргПерерасчет_ИзменениеПризнакаНаличияПрибораСНачалаГода;
						
			НаборВыполненные 							= РегистрыСведений.энргДокументыНачислений.СоздатьНаборЗаписей();
			НаборВыполненныеДопСвойства 				= НаборВыполненные.ДополнительныеСвойства;
			НаборВыполненныеДопСвойства.Вставить("Замещать", Ложь);
			
			ЗаписьВыполненные							= НаборВыполненные.Добавить();
			ЗаписьВыполненные.Организация 				= Организация;
			ЗаписьВыполненные.Район		 				= Район;
			ЗаписьВыполненные.ПериодНачисления 			= ПериодНачисления;
			ЗаписьВыполненные.ВидОперацийНачисления		= ВидОперацийНачисления;
			ЗаписьВыполненные.МКД 						= МКД;
			ЗаписьВыполненные.ДокументНачисления 		= ДокументСсылка;
			
		ИначеЕсли ПометкаУдаления Тогда
			ДокументОбъект  							= яДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления 				= Ложь;
			ДокументОбъект.Дата							= ГраницыПериодаНачисления.ЗавершениеОП-1;
			
			НаборВыполненные 							= РегистрыСведений.энргДокументыНачислений.СоздатьНаборЗаписей();
			
			НаборВыполненные.Отбор.Организация.Установить(Организация);
			НаборВыполненные.Отбор.ПериодНачисления.Установить(ПериодНачисления);
			НаборВыполненные.Отбор.Район.Установить(Район);
			НаборВыполненные.Отбор.ВидОперацийНачисления.Установить(ВидОперацийНачисления);
			НаборВыполненные.Отбор.МКД.Установить(МКД);
			НаборВыполненныеДопСвойства 				= НаборВыполненные.ДополнительныеСвойства;
			НаборВыполненныеДопСвойства.Вставить("Замещать", Истина);
			
			ЗаписьВыполненные							= НаборВыполненные.Добавить();
			ЗаписьВыполненные.Организация 				= Организация;
			ЗаписьВыполненные.Район		 				= Район;
			ЗаписьВыполненные.ПериодНачисления 			= ПериодНачисления;
			ЗаписьВыполненные.ВидОперацийНачисления 	= ВидОперацийНачисления;
			ЗаписьВыполненные.МКД 						= МКД;
			ЗаписьВыполненные.ДокументНачисления 		= ДокументСсылка;
			ЗаписьВыполненные.ПометкаУдаления	 		= Ложь;
		КонецЕсли;
		
		НаборОбъемНачислений 							= РегистрыНакопления.энргОбъемНачислений.СоздатьНаборЗаписей();
		НаборОбъемНачислений.Отбор.Регистратор.Установить(ДокументСсылка);
		
		яЧастныйСектор 									= НЕ ЗначениеЗаполнено(МКД);
		НаборОбъемНачислений.ДополнительныеСвойства.Вставить("Организация",			Организация);
		НаборОбъемНачислений.ДополнительныеСвойства.Вставить("Район",				Район);
		НаборОбъемНачислений.ДополнительныеСвойства.Вставить("ПериодНачисления",	ПериодНачисления);
		НаборОбъемНачислений.ДополнительныеСвойства.Вставить("ЧастныйСектор",		яЧастныйСектор);
		НаборОбъемНачислений.ДополнительныеСвойства.Вставить("Строение",			МКД);
		НаборОбъемНачислений.ДополнительныеСвойства.Вставить("ДатаРегистратора",	ГраницыПериодаНачисления.ЗавершениеОП-1);
		
		Если Не мПомещения = Неопределено Тогда					
			НаборОбъемНачислений.ДополнительныеСвойства.Вставить("Помещение",	мПомещения);
			
			НаборОбъемНачислений.Прочитать();		
			СтрокиУдалить 							= Новый Массив;
			
			Для Каждого СтрокаНабора ИЗ НаборОбъемНачислений Цикл
				Если Строение <> СтрокаНабора.Строение Или мПомещения.Найти(СтрокаНабора.Помещение) = Неопределено Тогда
					Продолжить;
				КонецЕсли;			
				СтрокиУдалить.Добавить(СтрокаНабора);
			КонецЦикла;
			
			Для Сч = 0 По СтрокиУдалить.ВГраница() Цикл
				НаборОбъемНачислений.Удалить(СтрокиУдалить[Сч]);
			КонецЦикла; 				
		КонецЕсли;
				
		Если ДокументОбъект = Неопределено Тогда
			НаборОбъемНачислений.Записать();
			// НаборОбъемНачисленийПомещений.Записать();
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПроведенияМКД(Ошибки) Экспорт 
	
	Если ВидОперацийНачисления = Перечисления.энргВидыОперацийНачисления.ПерерасчетИзменениеПризнакаНаличияПрибораУчетаСНачалаГода Тогда
		Попытка
			Если НЕ ДокументОбъект = Неопределено Тогда
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПроведениеРазрешено",Истина);
				ДокументОбъект.записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;														
			
			Если НЕ НаборВыполненные = Неопределено Тогда
				НаборВыполненные.Записать(НаборВыполненные.ДополнительныеСвойства.Замещать);
			КонецЕсли;
			
			НаборОбъемНачислений.Записать();								
			// НаборОбъемНачисленийПомещений.Записать();						
			
			ЗафиксироватьТранзакцию();
		Исключение						
			ОтменитьТранзакцию();
			ИнформацияОбОшибке  					= ИнформацияОбОшибке();
			Ошибки 									= Ошибки +
			Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

Функция ЗаполнитьПредоставленныеПоказания()
	Схема  			= Неопределено;
	ЗаполнитьТаблицуПериодов(Схема);
	Текст 	=
	"ВЫБРАТЬ
	|	МаксимальныеПоказания.Период КАК Период,
	|	МаксимальныеПоказания.Регистратор КАК Регистратор,
	|	МаксимальныеПоказания.Организация КАК Организация,
	|	МаксимальныеПоказания.Район КАК Район,
	|	МаксимальныеПоказания.КлючПомещения КАК КлючПомещения,
	|	МаксимальныеПоказания.ПриборУчета КАК ПриборУчета,
	|	МаксимальныеПоказания.Шкала КАК Шкала,
	|	МаксимальныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МаксимальныеПоказания.Разделитель КАК Разделитель,
	|	МаксимальныеПоказания.ДатаРегистратора КАК ДатаРегистратора,
	|	МаксимальныеПоказания.Показание КАК Показание
	|ПОМЕСТИТЬ НаборМаксимальныеПоказания
	|ИЗ
	|	&НаборМаксимальныеПоказания КАК МаксимальныеПоказания";
	Пакет 									= Схема.ПакетЗапросов.Добавить();
	Пакет.УстановитьТекстЗапроса(Текст);
	
	Текст 									=
	"ВЫБРАТЬ
	|	МаксимальныеПоказанияНачало.Организация КАК Организация,
	|	ТаблицаПериодов.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальныеПоказанияНачало.Район КАК Район,
	|	энргКлючиПомещений.ЧастныйСектор КАК ЧастныйСектор,
	|	энргКлючиПомещений.Строение КАК Строение,
	|	энргКлючиПомещений.Помещение КАК Помещение,
	|	МаксимальныеПоказанияНачало.ПриборУчета КАК ПриборУчета,
	|	МаксимальныеПоказанияНачало.Шкала КАК Шкала,
	|	МаксимальныеПоказанияНачало.ТарифнаяЗона КАК ТарифнаяЗона,
	|	СУММА(ВЫБОР
	|			КОГДА МаксимальныеПоказанияПраво.Организация ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК НомерПозиции,
	|	МаксимальныеПоказанияНачало.Разделитель КАК Разделитель,
	|	МаксимальныеПоказанияНачало.Период КАК ДатаРегистратора,
	|	МаксимальныеПоказанияНачало.Регистратор КАК ДокРегистратор,
	|	ИСТИНА КАК ВСрок,
	|	МаксимальныеПоказанияНачало.Показание КАК Показания,
	|	ИСТИНА КАК ПоказанияТекущегоПериода
	|ИЗ
	|	НаборМаксимальныеПоказания КАК МаксимальныеПоказанияНачало
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаборМаксимальныеПоказания КАК МаксимальныеПоказанияПраво
	|		ПО МаксимальныеПоказанияНачало.Организация = МаксимальныеПоказанияПраво.Организация
	|			И МаксимальныеПоказанияНачало.Район = МаксимальныеПоказанияПраво.Район
	|			И МаксимальныеПоказанияНачало.КлючПомещения = МаксимальныеПоказанияПраво.КлючПомещения
	|			И МаксимальныеПоказанияНачало.ПриборУчета = МаксимальныеПоказанияПраво.ПриборУчета
	|			И МаксимальныеПоказанияНачало.Шкала = МаксимальныеПоказанияПраво.Шкала
	|			И МаксимальныеПоказанияНачало.ТарифнаяЗона = МаксимальныеПоказанияПраво.ТарифнаяЗона
	|			И (ВЫБОР
	|				КОГДА МаксимальныеПоказанияНачало.Период > МаксимальныеПоказанияПраво.Период
	|					ТОГДА ИСТИНА
	|				КОГДА МаксимальныеПоказанияНачало.Период = МаксимальныеПоказанияПраво.Период
	|					ТОГДА МаксимальныеПоказанияНачало.Регистратор > МаксимальныеПоказанияПраво.Регистратор
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргКлючиПомещений КАК энргКлючиПомещений
	|		ПО МаксимальныеПоказанияНачало.КлючПомещения = энргКлючиПомещений.КлючПомещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|		ПО МаксимальныеПоказанияНачало.Организация = ТаблицаПериодов.Организация
	|			И МаксимальныеПоказанияНачало.Район = ТаблицаПериодов.Район
	|			И (МаксимальныеПоказанияНачало.Период МЕЖДУ ТаблицаПериодов.НачалоОП И ТаблицаПериодов.ЗавершениеОП)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеПоказанияНачало.Организация,
	|	ТаблицаПериодов.ПериодНачисления,
	|	МаксимальныеПоказанияНачало.Район,
	|	энргКлючиПомещений.ЧастныйСектор,
	|	энргКлючиПомещений.Строение,
	|	энргКлючиПомещений.Помещение,
	|	МаксимальныеПоказанияНачало.ПриборУчета,
	|	МаксимальныеПоказанияНачало.Шкала,
	|	МаксимальныеПоказанияНачало.ТарифнаяЗона,
	|	МаксимальныеПоказанияНачало.Разделитель,
	|	МаксимальныеПоказанияНачало.Период,
	|	МаксимальныеПоказанияНачало.Регистратор,
	|	МаксимальныеПоказанияНачало.Показание";
	
	Пакет 									= Схема.ПакетЗапросов.Добавить();
	Пакет.УстановитьТекстЗапроса(Текст);
	
	Запрос 			= Новый Запрос(Схема.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("НаборМаксимальныеПоказания", 	НаборМаксимальныеПоказания.Выгрузить());
	Запрос.УстановитьПараметр("Организация", 					Организация);
	Запрос.УстановитьПараметр("Район", 							Район); 	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьМаксимальныеПоказанияСрез()
		
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("НаборПредоставленныеПоказания", НаборПредоставленныеПоказания);
	Запрос.Текст 	= 
	"ВЫБРАТЬ
	|	ПредоставленныеПоказания.Организация КАК Организация,
	|	ПредоставленныеПоказания.ПериодНачисления КАК ПериодНачисления,
	|	ПредоставленныеПоказания.Район КАК Район,
	|	ПредоставленныеПоказания.ЧастныйСектор КАК ЧастныйСектор,
	|	ПредоставленныеПоказания.Строение КАК Строение,
	|	ПредоставленныеПоказания.Помещение КАК Помещение,
	|	ПредоставленныеПоказания.ПриборУчета КАК ПриборУчета,
	|	ПредоставленныеПоказания.Шкала КАК Шкала,
	|	ПредоставленныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ПредоставленныеПоказания.НомерПозиции КАК НомерПозиции,
	|	ПредоставленныеПоказания.Разделитель КАК Разделитель,
	|	ПредоставленныеПоказания.ДатаРегистратора КАК ДатаРегистратора,
	|	ПредоставленныеПоказания.ДокРегистратор КАК ДокРегистратор,
	|	ПредоставленныеПоказания.ВСрок КАК ВСрок,
	|	ПредоставленныеПоказания.Показания КАК Показания,
	|	ПредоставленныеПоказания.ПоказанияТекущегоПериода КАК ПоказанияТекущегоПериода
	|ПОМЕСТИТЬ ПредоставленныеПоказания
	|ИЗ
	|	&НаборПредоставленныеПоказания КАК ПредоставленныеПоказания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|	ВложенныйЗапрос.Строение КАК Строение,
	|	ВложенныйЗапрос.Помещение КАК Помещение,
	|	ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|	ВложенныйЗапрос.Шкала КАК Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ПредоставленныеПоказания.Показания КАК Показания,
	|	ПредоставленныеПоказания.ДокРегистратор КАК ДокРегистратор,
	|	ПредоставленныеПоказания.ДатаРегистратора КАК ДатаРегистратора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредоставленныеПоказания.Организация КАК Организация,
	|		ПредоставленныеПоказания.ПериодНачисления КАК ПериодНачисления,
	|		ПредоставленныеПоказания.Район КАК Район,
	|		ПредоставленныеПоказания.ЧастныйСектор КАК ЧастныйСектор,
	|		ПредоставленныеПоказания.Строение КАК Строение,
	|		ПредоставленныеПоказания.Помещение КАК Помещение,
	|		ПредоставленныеПоказания.ПриборУчета КАК ПриборУчета,
	|		ПредоставленныеПоказания.Шкала КАК Шкала,
	|		ПредоставленныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|		МАКСИМУМ(ПредоставленныеПоказания.НомерПозиции) КАК НомерПозиции
	|	ИЗ
	|		ПредоставленныеПоказания КАК ПредоставленныеПоказания
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПредоставленныеПоказания.Организация,
	|		ПредоставленныеПоказания.ПериодНачисления,
	|		ПредоставленныеПоказания.Район,
	|		ПредоставленныеПоказания.ЧастныйСектор,
	|		ПредоставленныеПоказания.Строение,
	|		ПредоставленныеПоказания.Помещение,
	|		ПредоставленныеПоказания.ПриборУчета,
	|		ПредоставленныеПоказания.Шкала,
	|		ПредоставленныеПоказания.ТарифнаяЗона) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредоставленныеПоказания КАК ПредоставленныеПоказания
	|		ПО ВложенныйЗапрос.Организация = ПредоставленныеПоказания.Организация
	|			И ВложенныйЗапрос.ПериодНачисления = ПредоставленныеПоказания.ПериодНачисления
	|			И ВложенныйЗапрос.Район = ПредоставленныеПоказания.Район
	|			И ВложенныйЗапрос.ЧастныйСектор = ПредоставленныеПоказания.ЧастныйСектор
	|			И ВложенныйЗапрос.Строение = ПредоставленныеПоказания.Строение
	|			И ВложенныйЗапрос.Помещение = ПредоставленныеПоказания.Помещение
	|			И ВложенныйЗапрос.ПриборУчета = ПредоставленныеПоказания.ПриборУчета
	|			И ВложенныйЗапрос.Шкала = ПредоставленныеПоказания.Шкала
	|			И ВложенныйЗапрос.ТарифнаяЗона = ПредоставленныеПоказания.ТарифнаяЗона
	|			И ВложенныйЗапрос.НомерПозиции = ПредоставленныеПоказания.НомерПозиции";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьТаблицуПериодов(Схема) 
	
	ИмяТаблицыПериодов 							= "ТаблицаПериодов";
	
	СоотвествиеПолей 							= Новый Структура("Организация,Район,ЧастныйСектор,Строение","Организация","Район","ЧастныйСектор","Строение");
	
	ПоляПорядка 								= "Организация,ПериодНачисления,Район,ЧастныйСектор,Строение,Помещение,ПериодРегистрации,ДатаРегистратора,ДокРегистратор";
	мПоляПорядка 								= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляПорядка);
	
	ТекстГраницОтчетногоПериода 				= энргНачисления.ТекстГраницОтчетногоПериода(ПериодНачисленияНачало,ПериодНачисленияЗавершение,Ложь);
	Если Схема = Неопределено Тогда
		Схема  									= Новый СхемаЗапроса;	
		Пакет 									= Схема.ПакетЗапросов[0];
	Иначе
		Пакет 									= Схема.ПакетЗапросов.Добавить();
	КонецЕсли;
	
	Пакет.УстановитьТекстЗапроса(ТекстГраницОтчетногоПериода);
	Пакет.ТаблицаДляПомещения 					= ИмяТаблицыПериодов;
	Для Каждого Оператор Из Пакет.Операторы Цикл
		Оператор.ВыбираемыеПоля.Добавить("&Район");
	КонецЦикла; 
		
КонецПроцедуры

Процедура ДобавитьНаборВСхему(Схема,ИмяНабора,ТаблицаДляПомещения)
	
	СоотвествиеПолей 						= Новый Структура("Организация,Район,","Организация","Район");
	
	ПараметрыВТ 							= Новый Массив;
	ПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", СоотвествиеПолей));
	ЗаполнитьПараметрыВТ(ПараметрыВТ);

	Параметры  								= Новый Структура("ПараметрыВТ", ПараметрыВТ);
	
	Если ИмяНабора  = "СпособыРасчетаПоНаправлениям" Тогда
		
		РегистрыСведений.энргСпособыРасчетаПоНаправлениям.СпособыРасчетаПоНаправлениямКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ПоставщикиНеНачислять" Тогда
		
		РегистрыСведений.энргПоставщикиНеНачислять.ПоставщикиНеНачислятьКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
			
	ИначеЕсли ИмяНабора  = "ЗначенияПовышающихКоэффициентов" Тогда
		
		РегистрыСведений.энгрЗначенияПовышающихКоэффициентов.ЗначенияПовышающихКоэффициентовКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ЗначенияТекущихНормПотребления" Тогда
		
		РегистрыСведений.энргЗначенияНормативовПотребления.ЗначенияТекущихНормПотребленияКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ЗначенияТекущихСоциальныхНормПотребления" Тогда
		
		РегистрыСведений.энргЗначенияСоциальныхНормативов.ЗначенияТекущихСоциальныхНормПотребленияКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ЗначенияТекущихТарифов" Тогда
		
		РегистрыСведений.энргЗначенияТарифов.ЗначенияТекущихТарифовКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора = "ИзменениеТарифовВПериоде" Тогда
		
		РегистрыСведений.энргЗначенияТарифов.ИзменениеТарифовВПериодеКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "НастройкаНачисленияГВСМКД" Тогда
		
		РегистрыСведений.энргНастройкаНачисленияГВСМКД.НастройкаНачисленияГВСМКДКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ТипСхемыГВС" Тогда
		
		РегистрыСведений.энргТипСхемыГВС.ТипСхемыГВСКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ТипПринадлежностиМКД" Тогда
		
		РегистрыСведений.энргТипПринадлежностиМКД.ТипПринадлежностиМКДКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "НастройкаСезонностиУслуг" Тогда
		
		РегистрыСведений.энргНастройкаСезонностиУслуг.НастройкаСезонностиУслугКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора = "НастройкаСезонностиУслугВПериодеНачисления" Тогда	
		
		фиксСоотвествиеПолей 		= Новый ФиксированнаяСтруктура(СоотвествиеПолей);
		врСоотвествиеПолей 			= Новый Структура(фиксСоотвествиеПолей);
		врСоотвествиеПолей.Вставить("ПериодНачисления","ТекущийПериодНачисления");
		
		врПараметрыВТ 				= Новый Массив;
		врПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", врСоотвествиеПолей));
		ЗаполнитьПараметрыВТ(врПараметрыВТ);
		врПараметры  				= Новый Структура("ПараметрыВТ", врПараметрыВТ);
		
		РегистрыСведений.энргНастройкаСезонностиУслуг.НастройкаСезонностиУслуг(Схема,врПараметры,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "НормаСкоростиДвиженияВоды" Тогда
		
		РегистрыСведений.энргНормаСкоростиДвиженияВоды.НормаСкоростиДвиженияВодыКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ПериодыСезонности" Тогда
		
		РегистрыСведений.энргДлительностиПериодов.ПериодыСезонностиКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ДокументыНачислений" Тогда
		
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргДокументыНачислений;
		  		
		Источник 		= Пакет.Операторы[0].Источники.Добавить("РегистрСведений.энргДокументыНачислений","ДокументыНачислений");
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;			
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Пакет.Операторы[0].Отбор.Добавить("ЛОЖЬ");
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
		
	ИначеЕсли ИмяНабора  = "ДокументыПерерасчета" Тогда
		фиксСоотвествиеПолей 						= Новый ФиксированнаяСтруктура(СоотвествиеПолей);
		врСоотвествиеПолей 							= Новый Структура(фиксСоотвествиеПолей);
		врСоотвествиеПолей.Вставить("ПериодНачисления",		"ТекущийПериодНачисления");
		врСоотвествиеПолей.Вставить("ВидОперацийНачисления","ВидОперацийНачисления");
		
		врПараметрыВТ 							= Новый Массив;
		врПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", врСоотвествиеПолей));
		ЗаполнитьПараметрыВТ(врПараметрыВТ);
		врПараметры  							= Новый Структура("ПараметрыВТ", врПараметрыВТ);
				
		РегистрыСведений.энргДокументыНачислений.ДокументыНачислений(Схема,врПараметры,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "СреднийОбъемПотребленияАбонентов" Тогда
		
		РегистрыСведений.энргСреднийОбъемПотребленияАбонентов.СреднийОбъемПотребленияАбонентовКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);	
		
	ИначеЕсли ИмяНабора  = "СтабильныеПериодыШкалы" Тогда
		
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&НаборШкалы", "НаборШкалы");
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
		
		
	ИначеЕсли ИмяНабора  = "СтабильныеПериодыИзмерителиНаправлений" Тогда
		
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргСтабильныеПериодыИзмерителиНаправлений;
		яИмяНабора 		= "НаборИзмерители";
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, яИмяНабора);
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
			
	ИначеЕсли ИмяНабора  = "МаксимальныеПоказанияСрез" Тогда
				
		яМетаданные 	= Метаданные.РегистрыСведений.энргМаксимальныеПоказанияСрез;
		яИмяНабора 		= "НаборМаксимальныеПоказанияСрез";
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, "" + яИмяНабора);
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;

	ИначеЕсли ИмяНабора  = "МаксимальныеПоказанияСрезПредыдущийПериод" Тогда 
					
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		ИмяПромежуточнойТаблицы 				= ТаблицаДляПомещения + "Промежуточная";
		Пакет.ТаблицаДляПомещения 				= ИмяПромежуточнойТаблицы;
		
		яМетаданные 							= Метаданные.РегистрыСведений.энргМаксимальныеПоказанияСрез;
		яИмяНабора 								= "НаборМаксимальныеПоказанияСрез";  		
		Оператор 								= Пакет.Операторы[0]; 
		Источник 								= Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, "" + яИмяНабора);
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Оператор.ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Оператор.ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Оператор.ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Оператор.ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
				
		Оператор.Отбор.Добавить("" + яИмяНабора + ".ПериодНачисления > &ПериодНачисленияНачало");
		
		// формируем временную таблицу
		
		врСоотвествиеПолей 						= Новый Структура("Организация,Район,ПериодНачисления","Организация","Район","ПредыдущийПериодНачисленияНачало");						
		врПараметрыВТ 							= Новый Массив;
		врПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", врСоотвествиеПолей));		
		ЗаполнитьПараметрыВТ(врПараметрыВТ);
			
		врПараметры  							= Новый Структура("ПараметрыВТ", врПараметрыВТ);
		РегистрыСведений.энргПредоставленныеПоказания.МаксимальныеПоказанияСрез(Схема,врПараметры,"МаксимальныеПоказанияСрезНаНачалоПерерасчета");
		
		Пакет 									= Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество()-1];
		Оператор 								= Пакет.Операторы[0];
		Оператор.ВыбираемыеПоля.Добавить("ДобавитьКДАте(&ПериодНачисленияНачало,Месяц,-1)");
		КолонкаЗапроса  						= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		КолонкаЗапроса.Псевдоним 				= "ПериодНачисления";
				
		Пакет 									= Схема.ПакетЗапросов.Добавить();
		Пакет.УстановитьТекстЗапроса(ТекстЗапросаМаксимальныеПоказанияСрезПредыдущийПериод());
		Пакет.ТаблицаДляПомещения 				= ТаблицаДляПомещения;
								
	ИначеЕсли ИмяНабора  = "ПредоставленныеПоказания" Тогда
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргПредоставленныеПоказания;
		яИмяНабора 		= "НаборПредоставленныеПоказания";
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, "" + яИмяНабора);
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
			
	ИначеЕсли ИмяНабора  = "ЗначениеПлощадейМКД" Тогда
		
		РегистрыСведений.энргСтабильныеПериодыМКД.ЗначениеПлощадейМКДКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ЗначениеИндивидуальныхПлощадей" Тогда
		
		врСхема 					= Неопределено;
		
		РегистрыСведений.энргСтабильныеПериоды.ЗначениеИндивидуальныхПлощадейКоллекцияПериодов(врСхема,Параметры,ИмяТаблицыПериодов,"");
		Если ОбщегоНазначения.ПодсистемаСуществует("бестБиллингПроект") Тогда
			РегистрыСведений.бестСтабильныеПериодыНП.ЗначениеИндивидуальныхПлощадейКоллекцияПериодов(врСхема,Параметры,ИмяТаблицыПериодов,"");
		Иначе
			ВызватьИсключение "Метод не реализован";
		КонецЕсли;
		
		ТекстПомещения  			= врСхема.ПакетЗапросов[0].ПолучитьТекстЗапроса();
		ТекстНежилые  				= врСхема.ПакетЗапросов[1].ПолучитьТекстЗапроса();
		ТекстОбъединения 			= "ВЫБРАТЬ * ИЗ (" + ТекстПомещения + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС + ТекстНежилые + ") КАК ВложенныйЗапрос";
		
		Пакет 						= Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")); 			
		Пакет.УстановитьТекстЗапроса(ТекстОбъединения);
		Пакет.ТаблицаДляПомещения 	= ТаблицаДляПомещения;
		ОператорВыбора  			= Пакет.Операторы[0];
		ОператорВыбора.ВыбираемыеПоля.Очистить();
		
		ОператорВыбора.ВыбираемыеПоля.Добавить("Организация");
		ОператорВыбора.ВыбираемыеПоля.Добавить("ПериодНачисления");
		ОператорВыбора.ВыбираемыеПоля.Добавить("Район");
		ОператорВыбора.ВыбираемыеПоля.Добавить("МКД");
		ОператорВыбора.ВыбираемыеПоля.Добавить("Услуга");
		ОператорВыбора.ВыбираемыеПоля.Добавить("СУММА(ВложенныйЗапрос.ПлощадьАбонента)");
		Пакет.Колонки[ОператорВыбора.ВыбираемыеПоля.Количество()-1].Псевдоним = "ПлощадьАбонентов"; 		
		ОператорВыбора.ВыбираемыеПоля.Добавить("СУММА(ВложенныйЗапрос.ПлощадьСобственнаяПоставка)");   		
		Пакет.Колонки[ОператорВыбора.ВыбираемыеПоля.Количество()-1].Псевдоним = "ПлощадьСобственнаяПоставка";
		
	ИначеЕсли ИмяНабора  = "НаличиеПриборовУчетаСНачалаГода" Тогда
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргПредоставленныеПоказания;
		яИмяНабора 		= "НаборНаличиеПрибораСНачалаГода";

		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
			
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, яИмяНабора);
		
		Источник.Источник.ДоступныеПоля.Добавить("Организация", 				Новый ОписаниеТипов("СправочникСсылка.Организации"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("ПериодНачисления", 			Новый ОписаниеТипов("Дата"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("Район", 						Новый ОписаниеТипов("СправочникСсылка.энргЗоныОтвественности"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("ЧастныйСектор", 				Новый ОписаниеТипов("Булево"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("Строение", 					Новый ОписаниеТипов("СправочникСсылка.энргСтроения"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("Помещение", 					Новый ОписаниеТипов("СправочникСсылка.энргПомещения"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("Услуга", 						Новый ОписаниеТипов("СправочникСсылка.энргВидыУслуг"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("НаправлениеИспользованияТУ", 	Новый ОписаниеТипов("СправочникСсылка.энргНаправлениеИспользованияТочекУчета"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("ПриборВведен", 				Новый ОписаниеТипов("Булево"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
						
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
		
	ИначеЕсли ИмяНабора  = "ДниИспользованияУслугПриОтсутствии" Тогда
						
		РегистрыНакопления.энргКоличествоДнейИспользованияУслугПриОтсутствии.КоличествоДнейИспользованияУслугПриОтсутствииКоллекцияПериодов(Схема, Новый Структура, ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ДанныеСтабильныхПериодов" Тогда
		
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&НаборПериоды", "НаборПериоды");
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Ресурсы Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		Пакет.ТаблицаДляПомещения 	= "вр" + ТаблицаДляПомещения;
		
		Пакет 						= Схема.ПакетЗапросов.Добавить();
		Источник 					= Пакет.Операторы[0].Источники.Добавить("вр" + ТаблицаДляПомещения, "НаборПериоды");
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;			
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Ресурсы Цикл 			
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла; 		
		
		Источник  					= Пакет.Операторы[0].Источники.Добавить(ИмяТаблицыПериодов, ИмяТаблицыПериодов);
		
		мУсловиеСоединения 			= Новый Массив;
		мУсловиеСоединения.Добавить("НаборПериоды.ПериодНачисления = "+ИмяТаблицыПериодов+".ПериодНачисления");
		мУсловиеСоединения.Добавить("НаборПериоды.Организация = "+ИмяТаблицыПериодов+".Организация");
		мУсловиеСоединения.Добавить("НаборПериоды.Район = "+ИмяТаблицыПериодов+".Район");
		
		Пакет.Операторы[0].Источники[0].Соединения.Добавить(ИмяТаблицыПериодов,СтрСоединить(мУсловиеСоединения,Символы.ПС +" И ")); 
		Соединение  				= Пакет.Операторы[0].Источники[0].Соединения[0];
		Соединение.ТипСоединения 	= ТипСоединенияСхемыЗапроса.Внутреннее;
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("" + ИмяТаблицыПериодов + ".НачалоОП");
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("" + ИмяТаблицыПериодов + ".ЗавершениеОП");
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("" + ИмяТаблицыПериодов + ".ДнейВПериоде");
		
		Пакет.Операторы[0].Источники.Добавить("Справочник.энргАбоненты","энргАбоненты");
		Если Пакет.Операторы[0].Источники[0].Соединения.Добавить("энргАбоненты", "НаборПериоды.Абонент = энргАбоненты.Ссылка") Тогда
			Соединение							= Пакет.Операторы[0].Источники[0].Соединения[Пакет.Операторы[0].Источники[0].Соединения.Количество() -1];
			Соединение.ТипСоединения 			= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		КонецЕсли;		
		
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("ЕСТЬNULL(энргАбоненты.ФизЛицо, ЗНАЧЕНИЕ(Справочник.энргКонтрагенты.ПустаяСсылка))");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "ФизЛицо";
		
		Пакет.Операторы[0].Источники.Добавить("Справочник.энргВидыУслуг","энргВидыУслуг");
		Если Пакет.Операторы[0].Источники[0].Соединения.Добавить("энргВидыУслуг", "НаборПериоды.Услуга = энргВидыУслуг.Ссылка") Тогда
			Соединение							= Пакет.Операторы[0].Источники[0].Соединения[Пакет.Операторы[0].Источники[0].Соединения.Количество() -1];
			Соединение.ТипСоединения 			= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		КонецЕсли;
		
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("ЕСТЬNULL(энргВидыУслуг.НеПрименятьЗависимостьЕслиБольшеОднойТочки, Ложь)");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "НеПрименятьЗависимостьЕслиБольшеОднойТочки";
		
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("ЕСТЬNULL(энргВидыУслуг.ВидПлощади,ЗНАЧЕНИЕ(Перечисление.энргВидыПлощадей.ПустаяСсылка))");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "ВидПлощадиУслуги";
		
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("энргВидыУслуг.ИспользоватьКоэффициентСдерживанияРостаПлаты");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "ИспользоватьКоэффициентСдерживанияРостаПлаты";
		
		Пакет.Операторы[0].Источники.Добавить("Справочник.энргВидыУслуг.ЗависимыеУслуги","энргВидыУслугЗависимыеУслуги");
		УсловияСоединения 						= Новый Массив;
		УсловияСоединения.Добавить("НаборПериоды.СоставнаяУслуга = энргВидыУслугЗависимыеУслуги.Ссылка");
		УсловияСоединения.Добавить("НаборПериоды.Услуга = энргВидыУслугЗависимыеУслуги.Услуга");
			
		Если Пакет.Операторы[0].Источники[0].Соединения.Добавить("энргВидыУслугЗависимыеУслуги",СтрСоединить(УсловияСоединения,Символы.ПС + " И ") ) Тогда			 
			Соединение							= Пакет.Операторы[0].Источники[0].Соединения[Пакет.Операторы[0].Источники[0].Соединения.Количество() -1];
			Соединение.ТипСоединения 			= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		КонецЕсли;
		
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(
		"ВЫБОР
		|	КОГДА НЕ энргВидыУслугЗависимыеУслуги.Ссылка ЕСТЬ NULL
		|		ТОГДА энргВидыУслугЗависимыеУслуги.УслугаЗависитОт
		|	ИНАЧЕ ЕСТЬNULL(энргВидыУслуг.ЗависитОтУслуги, ЗНАЧЕНИЕ(Справочник.энргВидыУслуг.ПустаяСсылка))
		|КОНЕЦ");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "ЗависитОтУслуги";
		
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(
		"ВЫБОР
		|	КОГДА НЕ энргВидыУслугЗависимыеУслуги.Ссылка ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|	ИНАЧЕ ИСТИНА
		|КОНЕЦ");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "УмножатьНаНормуРодительскойУслуги";
		
		Пакет.Операторы[0].Источники.Добавить("Справочник.энргПриборыУчетаАбонента","энргПриборыУчетаАбонента");
		УсловияСоединения 						= Новый Массив;
		УсловияСоединения.Добавить("НаборПериоды.ПриборУчета = энргПриборыУчетаАбонента.Ссылка");
					
		Если Пакет.Операторы[0].Источники[0].Соединения.Добавить("энргПриборыУчетаАбонента",СтрСоединить(УсловияСоединения,Символы.ПС + " И ") ) Тогда			 
			Соединение							= Пакет.Операторы[0].Источники[0].Соединения[Пакет.Операторы[0].Источники[0].Соединения.Количество() -1];
			Соединение.ТипСоединения 			= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		КонецЕсли;
		
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("энргПриборыУчетаАбонента.МаксимальноВозможныеПоказания");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "МаксимальноВозможныеПоказания";
		
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("ЕСТЬNULL(энргПриборыУчетаАбонента.РегистрируетОбъем, ЛОЖЬ)");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "РегистрируетОбъем";
		
	    Пакет.Операторы[0].Источники.Добавить("Справочник.энргПомещения","энргПомещения");
		УсловияСоединения 						= Новый Массив;
		УсловияСоединения.Добавить("НаборПериоды.Помещение = энргПомещения.Ссылка");
		Пакет.Операторы[0].Источники.НайтиПоПсевдониму("энргАбоненты").Соединения.Очистить();
		Если Пакет.Операторы[0].Источники[0].Соединения.Добавить("энргПомещения",СтрСоединить(УсловияСоединения,Символы.ПС + " И ")) Тогда			 
			Соединение							= Пакет.Операторы[0].Источники[0].Соединения[Пакет.Операторы[0].Источники[0].Соединения.Количество() -1];
			Соединение.ТипСоединения 			= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		КонецЕсли; 
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(
		"ВЫБОР
		|	КОГДА НаборПериоды.ЧастныйСектор
		|			И энргПомещения.Родитель ЕСТЬ NULL
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.энргПомещения.ПустаяСсылка)
		|	КОГДА НаборПериоды.ЧастныйСектор
		|			И энргПомещения.Родитель = ЗНАЧЕНИЕ(Справочник.энргПомещения.ПустаяСсылка)
		|		ТОГДА НаборПериоды.Помещение
		|	КОГДА энргПомещения.Родитель = ЗНАЧЕНИЕ(Справочник.энргПомещения.ПустаяСсылка)
		|		ТОГДА НаборПериоды.Помещение
		|	ИНАЧЕ энргПомещения.Родитель
		|КОНЕЦ");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "ПомещениеРодитель"; 	
		
		Пакет.Операторы[0].Источники.Добавить("РегистрСведений.энргКлючиПомещений","энргКлючиПомещений");
		УсловияСоединения 						= Новый Массив;
		УсловияСоединения.Добавить("НаборПериоды.Строение = энргКлючиПомещений.Строение");
		УсловияСоединения.Добавить("НаборПериоды.Помещение = энргКлючиПомещений.Помещение");
		Если Пакет.Операторы[0].Источники[0].Соединения.Добавить("энргКлючиПомещений",СтрСоединить(УсловияСоединения,Символы.ПС + " И ")) Тогда			 
			Соединение							= Пакет.Операторы[0].Источники[0].Соединения[Пакет.Операторы[0].Источники[0].Соединения.Количество() -1];
			Соединение.ТипСоединения 			= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		КонецЕсли;
	
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("энргКлючиПомещений.КлючПомещения");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "КлючПомещения";
		
		Пакет.Операторы[0].Источники.Добавить("Справочник.энргАбоненты","энргАбонентыПлательщик");
		УсловияСоединения 						= Новый Массив;
		УсловияСоединения.Добавить("НаборПериоды.Плательщик = энргАбонентыПлательщик.Ссылка");
		Если Пакет.Операторы[0].Источники[0].Соединения.Добавить("энргАбонентыПлательщик",СтрСоединить(УсловияСоединения,Символы.ПС + " И ")) Тогда			 
			Соединение							= Пакет.Операторы[0].Источники[0].Соединения[Пакет.Операторы[0].Источники[0].Соединения.Количество() -1];
			Соединение.ТипСоединения 			= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
		КонецЕсли;
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(
		"ВЫБОР 
		|	КОГДА энргАбонентыПлательщик.Организация ЕСТЬ NULL
		|		ТОГДА НаборПериоды.Организация
		|	КОГДА энргАбонентыПлательщик.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		ТОГДА НаборПериоды.Организация
		|	ИНАЧЕ энргАбонентыПлательщик.Организация
		|КОНЕЦ");
		Колонка 								= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		Колонка.Псевдоним 						= "ОрганизацияПлательщика";		
		
		Пакет.ТаблицаДляПомещения 	= ТаблицаДляПомещения;
	ИначеЕсли ИмяНабора  = "НастройкиРасчетаСреднегоПотребления" Тогда
		
		РегистрыСведений.энргНастройкиРасчетаСреднегоПотребления.НастройкиРасчетаСреднегоПотребленияКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора = "ТочкиУчетаСИзменившимсяСостояниемПрибораУчета" Тогда
		
		фиксСоотвествиеПолей 		= Новый ФиксированнаяСтруктура(СоотвествиеПолей);
		врСоотвествиеПолей 			= Новый Структура(фиксСоотвествиеПолей);
		врСоотвествиеПолей.Вставить("ПериодНачисления","ТекущийПериодНачисления");
		
		врПараметрыВТ 				= Новый Массив;
		врПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", врСоотвествиеПолей));
		ЗаполнитьПараметрыВТ(врПараметрыВТ);
		врПараметры  				= Новый Структура("ПараметрыВТ", врПараметрыВТ);
				
		РегистрыСведений.энргСтабильныеПериоды.ТочкиУчетаСИзменившимсяСостояниеПрибораУчета(Схема,врПараметры,ТаблицаДляПомещения);
		
		Пакет 									= Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество()-1];
		Оператор 								= Пакет.Операторы[0];
		Оператор.ВыбираемыеПоля.Добавить("&НачалоПериодаРасчета");
		КолонкаЗапроса  						= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		КолонкаЗапроса.Псевдоним 				= "НачалоОП";
		
		Оператор.ВыбираемыеПоля.Добавить("&ЗавершениеПериодаРасчета");
		КолонкаЗапроса  						= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		КолонкаЗапроса.Псевдоним 				= "ЗавершениеОП";
		
		Оператор.ВыбираемыеПоля.Добавить("&КоличествоДнейВПериодеРасчета");
		КолонкаЗапроса  						= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		КолонкаЗапроса.Псевдоним 				= "ДнейВПериоде";
		
	ИначеЕсли ИмяНабора = "НаборЗаписейОбъемаНачисленийЗаПериод" Тогда
		
		фиксСоотвествиеПолей 		= Новый ФиксированнаяСтруктура(СоотвествиеПолей);
		врСоотвествиеПолей 			= Новый Структура(фиксСоотвествиеПолей);
				
		врПараметрыВТ 				= Новый Массив;
		врПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", врСоотвествиеПолей));
		ЗаполнитьПараметрыВТ(врПараметрыВТ);
		
		врПараметры  				= Новый Структура("ПараметрыВТ", врПараметрыВТ);
		врПараметры.Вставить("НачалоПериода",	Новый Структура("ИмяПараметра", "НачалоПериода"));
		врПараметры.Вставить("ОкончаниеПериода",Новый Структура("ИмяПараметра", "ОкончаниеПериода"));
		
		РегистрыНакопления.энргОбъемНачислений.НаборЗаписейОбъемаНачисленийЗаПериод(Схема,врПараметры,ТаблицаДляПомещения);	
		
	ИначеЕсли ИмяНабора  = "ПроцентВетхостиСтроений" Тогда
						
		РегистрыСведений.энргПроцентВетхостиСтроения.ПроцентВетхостиСтроенияКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ДеньНачалаНачисленияПоСреднему" Тогда
		
		Параметры.Вставить("ОпределитьВозможностьНачислятьСреднее", Ложь);
		РегистрыСведений.энргДниНачалаНачисленияПоСреднему.ДниНачалаНачисленияПоСреднему(Схема,Параметры,ТаблицаДляПомещения);
		
		Пакет 									= Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество()-1];
		Оператор 								= Пакет.Операторы[0];
		Оператор.ВыбираемыеПоля.Добавить("&ПериодНачисления");
		КолонкаЗапроса  						= Пакет.Колонки[Пакет.Колонки.Количество()-1];
		КолонкаЗапроса.Псевдоним 				= "ПериодНачисления";
		
	ИначеЕсли ИмяНабора = "ВидыДифференцированностиТарифныеЗоны" Тогда
		
		Справочники.энргВидыДифференцированности.ЗаполнитьСхемуТарифныеЗоныВидовДифференцированности(Схема,Параметры,ТаблицаДляПомещения);
			
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаполнитьНаличиеПрибораСНачалаГода()
	Запрос 			 = Новый Запрос;
	Запрос.УстановитьПараметр("НаборПериоды", НаборПериоды.Выгрузить());
	Запрос.Текст 	= 
	"ВЫБРАТЬ
	|	НаборПериоды.Организация КАК Организация,
	|	НаборПериоды.ПериодНачисления КАК ПериодНачисления,
	|	НаборПериоды.Район КАК Район,
	|	НаборПериоды.ЧастныйСектор КАК ЧастныйСектор,
	|	НаборПериоды.Строение КАК Строение,
	|	НаборПериоды.Помещение КАК Помещение,
	|	НаборПериоды.Услуга КАК Услуга,
	|	НаборПериоды.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|	НаборПериоды.ПриборВведен КАК ПриборВведен
	|ПОМЕСТИТЬ НаборПериоды
	|ИЗ
	|	&НаборПериоды КАК НаборПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПериоды.Организация КАК Организация,
	|	НаборПериоды.ПериодНачисления КАК ПериодНачисления,
	|	НаборПериоды.Район КАК Район,
	|	НаборПериоды.ЧастныйСектор КАК ЧастныйСектор,
	|	НаборПериоды.Строение КАК Строение,
	|	НаборПериоды.Помещение КАК Помещение,
	|	НаборПериоды.Услуга КАК Услуга,
	|	НаборПериоды.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|	МАКСИМУМ(ЕСТЬNULL(НаборПериодыПраво.ПриборВведен, ЛОЖЬ)) КАК ПриборВведен
	|ИЗ
	|	НаборПериоды КАК НаборПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаборПериоды КАК НаборПериодыПраво
	|		ПО НаборПериоды.Организация = НаборПериодыПраво.Организация
	|			И НаборПериоды.Район = НаборПериодыПраво.Район
	|			И НаборПериоды.ЧастныйСектор = НаборПериодыПраво.ЧастныйСектор
	|			И НаборПериоды.Строение = НаборПериодыПраво.Строение
	|			И НаборПериоды.Помещение = НаборПериодыПраво.Помещение
	|			И НаборПериоды.Услуга = НаборПериодыПраво.Услуга
	|			И НаборПериоды.НаправлениеИспользованияТУ = НаборПериодыПраво.НаправлениеИспользованияТУ
	|			И НаборПериоды.ПериодНачисления >= НаборПериодыПраво.ПериодНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборПериоды.Организация,
	|	НаборПериоды.ПериодНачисления,
	|	НаборПериоды.Район,
	|	НаборПериоды.ЧастныйСектор,
	|	НаборПериоды.Строение,
	|	НаборПериоды.Помещение,
	|	НаборПериоды.Услуга,
	|	НаборПериоды.НаправлениеИспользованияТУ";
	
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции

Процедура ЗаполнитьПараметрыВТ(ПараметрыВТ)  
	
	Если НЕ ЧастныйСектор = Неопределено Тогда
		ПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", Новый Структура("ЧастныйСектор","ЧастныйСектор")));
	КонецЕсли;
	
	Если НЕ Строение = Неопределено и ЗначениеЗаполнено(Строение) Тогда
		ПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", Новый Структура("Строение","Строение")));
	КонецЕсли;
	
	Если НЕ ЧастныйСектор = Неопределено и НЕ Строение = Неопределено Тогда
		ПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", Новый Структура("МКД","МКД")));
	КонецЕсли;
   
	Если НЕ мПомещения = Неопределено Тогда
		Если ТипЗнч(мПомещения) = Тип("Массив") Тогда
			ПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраВСписке", Новый Структура("Помещение","мПомещения")));
		Иначе
			ПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", Новый Структура("Помещение","мПомещения")));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументНачисленияПустаяСсылка() Экспорт 
	Возврат МенеджерДокументовНачислений.ПустаяСсылка();	
КонецФункции

Функция ТекстЗапросаМаксимальныеПоказанияСрезПредыдущийПериод()
	
	Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|	ВложенныйЗапрос.Строение КАК Строение,
	|	ВложенныйЗапрос.Помещение КАК Помещение,
	|	ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|	ВложенныйЗапрос.Шкала КАК Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Показания, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Показания) КАК Показания,
	|	ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ДокРегистратор, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ДокРегистратор) КАК ДокРегистратор,
	|	ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ДатаРегистратора, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ДатаРегистратора) КАК ДатаРегистратора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПериодов.ПериодНачисления КАК ПериодНачисления,
	|		МАКСИМУМ(ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ПериодНачисления, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ПериодНачисления)) КАК ПериодНачисленияОригинал,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Организация, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Организация) КАК Организация,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Район, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Район) КАК Район,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ЧастныйСектор, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ЧастныйСектор) КАК ЧастныйСектор,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Строение, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Строение) КАК Строение,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Помещение, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Помещение) КАК Помещение,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ПриборУчета, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ПриборУчета) КАК ПриборУчета,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Шкала, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Шкала) КАК Шкала,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ТарифнаяЗона, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ТарифнаяЗона) КАК ТарифнаяЗона
	|	ИЗ
	|		ТаблицаПериодов КАК ТаблицаПериодов
	|			ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПоказанияСрезНаНачалоПерерасчета КАК МаксимальныеПоказанияСрезНаНачалоПерерасчета
	|			ПО ТаблицаПериодов.ПериодНачисления > МаксимальныеПоказанияСрезНаНачалоПерерасчета.ПериодНачисления
	|				И ТаблицаПериодов.Организация = МаксимальныеПоказанияСрезНаНачалоПерерасчета.Организация
	|				И ТаблицаПериодов.Район = МаксимальныеПоказанияСрезНаНачалоПерерасчета.Район
	|			ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПоказанияСрезПредыдущийПериодПромежуточная КАК НаборМаксимальныеПоказанияСрез
	|			ПО ТаблицаПериодов.ПериодНачисления > НаборМаксимальныеПоказанияСрез.ПериодНачисления
	|				И ТаблицаПериодов.Организация = НаборМаксимальныеПоказанияСрез.Организация
	|				И ТаблицаПериодов.Район = НаборМаксимальныеПоказанияСрез.Район
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.ПериодНачисления,
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Организация, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Организация),
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Район, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Район),
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ЧастныйСектор, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ЧастныйСектор),
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Строение, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Строение),
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Помещение, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Помещение),
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ПриборУчета, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ПриборУчета),
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.Шкала, МаксимальныеПоказанияСрезНаНачалоПерерасчета.Шкала),
	|		ЕСТЬNULL(НаборМаксимальныеПоказанияСрез.ТарифнаяЗона, МаксимальныеПоказанияСрезНаНачалоПерерасчета.ТарифнаяЗона)) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПоказанияСрезНаНачалоПерерасчета КАК МаксимальныеПоказанияСрезНаНачалоПерерасчета
	|		ПО ВложенныйЗапрос.ПериодНачисленияОригинал = МаксимальныеПоказанияСрезНаНачалоПерерасчета.ПериодНачисления
	|			И ВложенныйЗапрос.Организация = МаксимальныеПоказанияСрезНаНачалоПерерасчета.Организация
	|			И ВложенныйЗапрос.Район = МаксимальныеПоказанияСрезНаНачалоПерерасчета.Район
	|			И ВложенныйЗапрос.ЧастныйСектор = МаксимальныеПоказанияСрезНаНачалоПерерасчета.ЧастныйСектор
	|			И ВложенныйЗапрос.Строение = МаксимальныеПоказанияСрезНаНачалоПерерасчета.Строение
	|			И ВложенныйЗапрос.Помещение = МаксимальныеПоказанияСрезНаНачалоПерерасчета.Помещение
	|			И ВложенныйЗапрос.ПриборУчета = МаксимальныеПоказанияСрезНаНачалоПерерасчета.ПриборУчета
	|			И ВложенныйЗапрос.Шкала = МаксимальныеПоказанияСрезНаНачалоПерерасчета.Шкала
	|			И ВложенныйЗапрос.ТарифнаяЗона = МаксимальныеПоказанияСрезНаНачалоПерерасчета.ТарифнаяЗона
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПоказанияСрезПредыдущийПериодПромежуточная КАК НаборМаксимальныеПоказанияСрез
	|		ПО ВложенныйЗапрос.ПериодНачисленияОригинал = НаборМаксимальныеПоказанияСрез.ПериодНачисления
	|			И ВложенныйЗапрос.Организация = НаборМаксимальныеПоказанияСрез.Организация
	|			И ВложенныйЗапрос.Район = НаборМаксимальныеПоказанияСрез.Район
	|			И ВложенныйЗапрос.ЧастныйСектор = НаборМаксимальныеПоказанияСрез.ЧастныйСектор
	|			И ВложенныйЗапрос.Строение = НаборМаксимальныеПоказанияСрез.Строение
	|			И ВложенныйЗапрос.Помещение = НаборМаксимальныеПоказанияСрез.Помещение
	|			И ВложенныйЗапрос.ПриборУчета = НаборМаксимальныеПоказанияСрез.ПриборУчета
	|			И ВложенныйЗапрос.Шкала = НаборМаксимальныеПоказанияСрез.Шкала
	|			И ВложенныйЗапрос.ТарифнаяЗона = НаборМаксимальныеПоказанияСрез.ТарифнаяЗона";
	
	Возврат Текст;
	
КонецФункции
