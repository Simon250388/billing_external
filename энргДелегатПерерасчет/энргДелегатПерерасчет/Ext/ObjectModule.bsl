Перем Организация Экспорт;
Перем ПериодНачисления Экспорт;
Перем Район Экспорт;
Перем ЧастныйСектор Экспорт;
Перем Строение Экспорт;
Перем мПомещения Экспорт;
перем ПериодНачисленияНачало Экспорт;
перем ПериодНачисленияЗавершение Экспорт;
перем НаборОбъемНачислений Экспорт ;
перем НаборОбъемНачисленийПомещений Экспорт ;
перем ИмяТаблицыПериодов;
перем НаборПериоды, НаборШкалы, НаборИзмерители, НаборМаксимальныеПоказания, НаборПредоставленныеПоказания, НаборМаксимальныеПоказанияСрез, НаборНаличиеПрибораСНачалаГода;

Процедура Инициализировать(МВТ, ПолучаемыеНаборы)  Экспорт 
	
	Схема 										= Неопределено;
	
	ЗаполнитьТаблицуПериодов(Схема);
	
	Для Сч = 0 По ПолучаемыеНаборы.ВГраница() Цикл
		 ДобавитьНаборВСхему(Схема, ПолучаемыеНаборы[Сч].ИмяНабора, ПолучаемыеНаборы[Сч].ТаблицаДляПомещения);
	КонецЦикла;	
	
	МКД 										=?(НЕ ЧастныйСектор, Строение, Справочники.энргСтроения.ПустаяСсылка());
	Запрос  									= Новый Запрос(Схема.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("Организация",					Организация);
	Запрос.УстановитьПараметр("Район", 							Район);
	Запрос.УстановитьПараметр("ЧастныйСектор", 					ЧастныйСектор);
	Запрос.УстановитьПараметр("Строение", 						Строение);
	Запрос.УстановитьПараметр("мПомещения", 					мПомещения);
	Запрос.УстановитьПараметр("МКД", 							МКД);
	Запрос.УстановитьПараметр("ПериодНачисленияНачало", 		ПериодНачисленияНачало);
	Запрос.УстановитьПараметр("НаборПериоды", 					НаборПериоды.Выгрузить());
	Запрос.УстановитьПараметр("НаборШкалы", 					НаборШкалы.Выгрузить());
	Запрос.УстановитьПараметр("НаборИзмерители",				НаборИзмерители.Выгрузить());
	Запрос.УстановитьПараметр("НаборПредоставленныеПоказания",	НаборПредоставленныеПоказания);
	Запрос.УстановитьПараметр("НаборМаксимальныеПоказанияСрез",	НаборМаксимальныеПоказанияСрез);
	Запрос.УстановитьПараметр("НаборНаличиеПрибораСНачалаГода",	НаборНаличиеПрибораСНачалаГода);
	Запрос.УстановитьПараметр("ПериодНовогоТарифа",				Константы.энргДеньНачалаПримененияНовогоТарифа.Получить());
	Запрос.МенеджерВременныхТаблиц 				= МВТ;
	
	Запрос.Выполнить();	
	
	НаборОбъемНачислений 						= РегистрыНакопления.энргОбъемНачислений.СоздатьНаборЗаписей();
	НаборОбъемНачисленийПомещений 				= РегистрыНакопления.энргОбъемНачисленийПомещенийСРазделеннымиЛС.СоздатьНаборЗаписей();
	
КонецПроцедуры

Процедура УстановитьНаборы(НаборыДанных) Экспорт 
	
	НаборПериоды 					= НаборыДанных.НаборСтабильныеПериоды;
	НаборШкалы 						= НаборыДанных.НаборСтабильныеПериодыШкалы;
	НаборИзмерители 				= НаборыДанных.НаборСтабильныеПериодыИзмерители;
	НаборМаксимальныеПоказания		= НаборыДанных.НаборПоказаний;	
	НаборПредоставленныеПоказания 	= ЗаполнитьПредоставленныеПоказания();
	НаборМаксимальныеПоказанияСрез 	= ЗаполнитьМаксимальныеПоказанияСрез();
	НаборНаличиеПрибораСНачалаГода 	= ЗаполнитьНаличиеПрибораСНачалаГода();
КонецПроцедуры

Процедура ПередПроведениемМКД(МКД, ДокументСсылка, ПометкаУдаления) Экспорт 
	Возврат;
КонецПроцедуры

Процедура ПослеПроведенияМКД() Экспорт 
	
КонецПроцедуры

Функция ЗаполнитьПредоставленныеПоказания()
	Схема  			= Неопределено;
	ЗаполнитьТаблицуПериодов(Схема);
	Текст 	=
	"ВЫБРАТЬ
	|	МаксимальныеПоказания.Период КАК Период,
	|	МаксимальныеПоказания.Регистратор КАК Регистратор,
	|	МаксимальныеПоказания.Организация КАК Организация,
	|	МаксимальныеПоказания.Район КАК Район,
	|	МаксимальныеПоказания.КлючПомещения КАК КлючПомещения,
	|	МаксимальныеПоказания.ПриборУчета КАК ПриборУчета,
	|	МаксимальныеПоказания.Шкала КАК Шкала,
	|	МаксимальныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МаксимальныеПоказания.Разделитель КАК Разделитель,
	|	МаксимальныеПоказания.ДатаРегистратора КАК ДатаРегистратора,
	|	МаксимальныеПоказания.Показание КАК Показание
	|ПОМЕСТИТЬ МаксимальныеПоказания
	|ИЗ
	|	&МаксимальныеПоказания КАК МаксимальныеПоказания";
	Пакет 									= Схема.ПакетЗапросов.Добавить();
	Пакет.УстановитьТекстЗапроса(Текст);
	
	Текст 									=
	"ВЫБРАТЬ
	|	МаксимальныеПоказанияНачало.Организация КАК Организация,
	|	ТаблицаПериодов.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальныеПоказанияНачало.Район КАК Район,
	|	энргКлючиПомещений.ЧастныйСектор КАК ЧастныйСектор,
	|	энргКлючиПомещений.Строение КАК Строение,
	|	энргКлючиПомещений.Помещение КАК Помещение,
	|	МаксимальныеПоказанияНачало.ПриборУчета КАК ПриборУчета,
	|	МаксимальныеПоказанияНачало.Шкала КАК Шкала,
	|	МаксимальныеПоказанияНачало.ТарифнаяЗона КАК ТарифнаяЗона,
	|	СУММА(ВЫБОР
	|			КОГДА МаксимальныеПоказанияПраво.Организация ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК НомерПозиции,
	|	МаксимальныеПоказанияНачало.Разделитель КАК Разделитель,
	|	МаксимальныеПоказанияНачало.Период КАК ДатаРегистратора,
	|	МаксимальныеПоказанияНачало.Регистратор КАК ДокРегистратор,
	|	ИСТИНА КАК ВСрок,
	|	МаксимальныеПоказанияНачало.Показание КАК Показания,
	|	ИСТИНА КАК ПоказанияТекущегоПериода
	|ИЗ
	|	МаксимальныеПоказания КАК МаксимальныеПоказанияНачало
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПоказания КАК МаксимальныеПоказанияПраво
	|		ПО МаксимальныеПоказанияНачало.Организация = МаксимальныеПоказанияПраво.Организация
	|			И МаксимальныеПоказанияНачало.Район = МаксимальныеПоказанияПраво.Район
	|			И МаксимальныеПоказанияНачало.КлючПомещения = МаксимальныеПоказанияПраво.КлючПомещения
	|			И МаксимальныеПоказанияНачало.ПриборУчета = МаксимальныеПоказанияПраво.ПриборУчета
	|			И МаксимальныеПоказанияНачало.Шкала = МаксимальныеПоказанияПраво.Шкала
	|			И МаксимальныеПоказанияНачало.ТарифнаяЗона = МаксимальныеПоказанияПраво.ТарифнаяЗона
	|			И (ВЫБОР
	|				КОГДА МаксимальныеПоказанияНачало.Период > МаксимальныеПоказанияПраво.Период
	|					ТОГДА ИСТИНА
	|				КОГДА МаксимальныеПоказанияНачало.Период = МаксимальныеПоказанияПраво.Период
	|					ТОГДА МаксимальныеПоказанияНачало.Регистратор > МаксимальныеПоказанияПраво.Регистратор
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргКлючиПомещений КАК энргКлючиПомещений
	|		ПО МаксимальныеПоказанияНачало.КлючПомещения = энргКлючиПомещений.КлючПомещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|		ПО МаксимальныеПоказанияНачало.Организация = ТаблицаПериодов.Организация
	|			И МаксимальныеПоказанияНачало.Район = ТаблицаПериодов.Район
	|			И (МаксимальныеПоказанияНачало.Период МЕЖДУ ТаблицаПериодов.НачалоОП И ТаблицаПериодов.ЗавершениеОП)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеПоказанияНачало.Организация,
	|	ТаблицаПериодов.ПериодНачисления,
	|	МаксимальныеПоказанияНачало.Район,
	|	энргКлючиПомещений.ЧастныйСектор,
	|	энргКлючиПомещений.Строение,
	|	энргКлючиПомещений.Помещение,
	|	МаксимальныеПоказанияНачало.ПриборУчета,
	|	МаксимальныеПоказанияНачало.Шкала,
	|	МаксимальныеПоказанияНачало.ТарифнаяЗона,
	|	МаксимальныеПоказанияНачало.Разделитель,
	|	МаксимальныеПоказанияНачало.Период,
	|	МаксимальныеПоказанияНачало.Регистратор,
	|	МаксимальныеПоказанияНачало.Показание";
	
	Пакет 									= Схема.ПакетЗапросов.Добавить();
	Пакет.УстановитьТекстЗапроса(Текст);
	
	Запрос 			= Новый Запрос(Схема.ПолучитьТекстЗапроса());
	Запрос.УстановитьПараметр("МаксимальныеПоказания", 	НаборМаксимальныеПоказания.Выгрузить());
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Запрос.УстановитьПараметр("Район", 					Район); 	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьМаксимальныеПоказанияСрез()
	
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("НаборПредоставленныеПоказания", НаборПредоставленныеПоказания);
	Запрос.Текст 	= 
	"ВЫБРАТЬ
	|	ПредоставленныеПоказания.Организация КАК Организация,
	|	ПредоставленныеПоказания.ПериодНачисления КАК ПериодНачисления,
	|	ПредоставленныеПоказания.Район КАК Район,
	|	ПредоставленныеПоказания.ЧастныйСектор КАК ЧастныйСектор,
	|	ПредоставленныеПоказания.Строение КАК Строение,
	|	ПредоставленныеПоказания.Помещение КАК Помещение,
	|	ПредоставленныеПоказания.ПриборУчета КАК ПриборУчета,
	|	ПредоставленныеПоказания.Шкала КАК Шкала,
	|	ПредоставленныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ПредоставленныеПоказания.НомерПозиции КАК НомерПозиции,
	|	ПредоставленныеПоказания.Разделитель КАК Разделитель,
	|	ПредоставленныеПоказания.ДатаРегистратора КАК ДатаРегистратора,
	|	ПредоставленныеПоказания.ДокРегистратор КАК ДокРегистратор,
	|	ПредоставленныеПоказания.ВСрок КАК ВСрок,
	|	ПредоставленныеПоказания.Показания КАК Показания,
	|	ПредоставленныеПоказания.ПоказанияТекущегоПериода КАК ПоказанияТекущегоПериода
	|ПОМЕСТИТЬ ПредоставленныеПоказания
	|ИЗ
	|	&НаборПредоставленныеПоказания КАК ПредоставленныеПоказания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|	ВложенныйЗапрос.Строение КАК Строение,
	|	ВложенныйЗапрос.Помещение КАК Помещение,
	|	ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|	ВложенныйЗапрос.Шкала КАК Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ПредоставленныеПоказания.Показания КАК Показания,
	|	ПредоставленныеПоказания.ДокРегистратор КАК ДокРегистратор,
	|	ПредоставленныеПоказания.ДатаРегистратора КАК ДатаРегистратора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредоставленныеПоказания.Организация КАК Организация,
	|		ПредоставленныеПоказания.ПериодНачисления КАК ПериодНачисления,
	|		ПредоставленныеПоказания.Район КАК Район,
	|		ПредоставленныеПоказания.ЧастныйСектор КАК ЧастныйСектор,
	|		ПредоставленныеПоказания.Строение КАК Строение,
	|		ПредоставленныеПоказания.Помещение КАК Помещение,
	|		ПредоставленныеПоказания.ПриборУчета КАК ПриборУчета,
	|		ПредоставленныеПоказания.Шкала КАК Шкала,
	|		ПредоставленныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|		МАКСИМУМ(ПредоставленныеПоказания.НомерПозиции) КАК НомерПозиции
	|	ИЗ
	|		ПредоставленныеПоказания КАК ПредоставленныеПоказания
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПредоставленныеПоказания.Организация,
	|		ПредоставленныеПоказания.ПериодНачисления,
	|		ПредоставленныеПоказания.Район,
	|		ПредоставленныеПоказания.ЧастныйСектор,
	|		ПредоставленныеПоказания.Строение,
	|		ПредоставленныеПоказания.Помещение,
	|		ПредоставленныеПоказания.ПриборУчета,
	|		ПредоставленныеПоказания.Шкала,
	|		ПредоставленныеПоказания.ТарифнаяЗона) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредоставленныеПоказания КАК ПредоставленныеПоказания
	|		ПО ВложенныйЗапрос.Организация = ПредоставленныеПоказания.Организация
	|			И ВложенныйЗапрос.ПериодНачисления = ПредоставленныеПоказания.ПериодНачисления
	|			И ВложенныйЗапрос.Район = ПредоставленныеПоказания.Район
	|			И ВложенныйЗапрос.ЧастныйСектор = ПредоставленныеПоказания.ЧастныйСектор
	|			И ВложенныйЗапрос.Строение = ПредоставленныеПоказания.Строение
	|			И ВложенныйЗапрос.Помещение = ПредоставленныеПоказания.Помещение
	|			И ВложенныйЗапрос.ПриборУчета = ПредоставленныеПоказания.ПриборУчета
	|			И ВложенныйЗапрос.Шкала = ПредоставленныеПоказания.Шкала
	|			И ВложенныйЗапрос.ТарифнаяЗона = ПредоставленныеПоказания.ТарифнаяЗона";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьТаблицуПериодов(Схема) 
	
	ИмяТаблицыПериодов 							= "ТаблицаПериодов";
	
	СоотвествиеПолей 							= Новый Структура("Организация,Район,ЧастныйСектор,Строение","Организация","Район","ЧастныйСектор","Строение");
	
	ПоляПорядка 								= "Организация,ПериодНачисления,Район,ЧастныйСектор,Строение,Помещение,ПериодРегистрации,ДатаРегистратора,ДокРегистратор";
	мПоляПорядка 								= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляПорядка);
	
	ТекстГраницОтчетногоПериода 				= энргНачисления.ТекстГраницОтчетногоПериода(ПериодНачисленияНачало,ПериодНачисленияЗавершение,Ложь);
	Если Схема = Неопределено Тогда
		Схема  									= Новый СхемаЗапроса;	
		Пакет 									= Схема.ПакетЗапросов[0];
	Иначе
		Пакет 									= Схема.ПакетЗапросов.Добавить();
	КонецЕсли;
	
	Пакет.УстановитьТекстЗапроса(ТекстГраницОтчетногоПериода);
	Пакет.ТаблицаДляПомещения 					= ИмяТаблицыПериодов;
	Для Каждого Оператор Из Пакет.Операторы Цикл
		Оператор.ВыбираемыеПоля.Добавить("&Район");
	КонецЦикла; 
		
КонецПроцедуры

Процедура ДобавитьНаборВСхему(Схема,ИмяНабора,ТаблицаДляПомещения)
	
	СоотвествиеПолей 						= Новый Структура("Организация,Район,ЧастныйСектор,Строение,МКД","Организация","Район","ЧастныйСектор","Строение","МКД");
	
	ПараметрыВТ 							= Новый Массив;
	ПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраРавно", СоотвествиеПолей));
	ПараметрыВТ.Добавить(Новый Структура("ТипПараметра, СоотвествиеПолей", "ТипПараметраВСписке", Новый Структура("Помещение","мПомещения")));
	
	Параметры  								= Новый Структура("ПараметрыВТ", ПараметрыВТ);
	
	Если ИмяНабора  = "СпособыРасчетаПоНаправлениям" Тогда
		
		РегистрыСведений.энргСпособыРасчетаПоНаправлениям.СпособыРасчетаПоНаправлениямКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ПоставщикиНеНачислять" Тогда
		
		РегистрыСведений.энргПоставщикиНеНачислять.ПоставщикиНеНачислятьКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
			
	ИначеЕсли ИмяНабора  = "ЗначенияПовышающихКоэффициентов" Тогда
		
		РегистрыСведений.энгрЗначенияПовышающихКоэффициентов.ЗначенияПовышающихКоэффициентовКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ЗначенияТекущихНормПотребления" Тогда
		
		РегистрыСведений.энргЗначенияНормативовПотребления.ЗначенияТекущихНормПотребленияКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ЗначенияТекущихСоциальныхНормПотребления" Тогда
		
		РегистрыСведений.энргЗначенияСоциальныхНормативов.ЗначенияТекущихСоциальныхНормПотребленияКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ЗначенияТекущихТарифов" Тогда
		
		РегистрыСведений.энргЗначенияТарифов.ЗначенияТекущихТарифовКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора = "ИзменениеТарифовВПериоде" Тогда
		
		РегистрыСведений.энргЗначенияТарифов.ИзменениеТарифовВПериодеКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "НастройкаНачисленияГВСМКД" Тогда
		
		РегистрыСведений.энргНастройкаНачисленияГВСМКД.НастройкаНачисленияГВСМКДКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ТипСхемыГВС" Тогда
		
		РегистрыСведений.энргТипСхемыГВС.ТипСхемыГВСКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ТипПринадлежностиМКД" Тогда
		
		РегистрыСведений.энргТипПринадлежностиМКД.ТипПринадлежностиМКДКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "НастройкаСезонностиУслуг" Тогда
		
		РегистрыСведений.энргНастройкаСезонностиУслуг.НастройкаСезонностиУслугКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "НормаСкоростиДвиженияВоды" Тогда
		
		РегистрыСведений.энргНормаСкоростиДвиженияВоды.НормаСкоростиДвиженияВодыКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ПериодыСезонности" Тогда
		
		РегистрыСведений.энргДлительностиПериодов.ПериодыСезонностиКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ДокументыНачислений" Тогда
		
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргДокументыНачислений;
		  		
		Источник 		= Пакет.Операторы[0].Источники.Добавить("РегистрСведений.энргДокументыНачислений","ДокументыНачислений");
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;			
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Пакет.Операторы[0].Отбор.Добавить("ЛОЖЬ");
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
		
		
	ИначеЕсли ИмяНабора  = "СреднийОбъемПотребленияАбонентов" Тогда
		
		РегистрыСведений.энргСреднийОбъемПотребленияАбонентов.СреднийОбъемПотребленияАбонентовКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);	
		
	ИначеЕсли ИмяНабора  = "СтабильныеПериодыШкалы" Тогда
		
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&НаборШкалы", "НаборШкалы");
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериодыШкалы.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
		
		
	ИначеЕсли ИмяНабора  = "СтабильныеПериодыИзмерителиНаправлений" Тогда
		
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргСтабильныеПериодыИзмерителиНаправлений;
		яИмяНабора 		= "НаборИзмерители";
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, яИмяНабора);
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
			
	ИначеЕсли ИмяНабора  = "МаксимальныеПоказанияСрез" Тогда
				
		яМетаданные 	= Метаданные.РегистрыСведений.энргМаксимальныеПоказанияСрез;
		яИмяНабора 		= "НаборМаксимальныеПоказанияСрез";
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, "" + яИмяНабора);
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;

	ИначеЕсли ИмяНабора  = "МаксимальныеПоказанияСрезПредыдущийПериод" Тогда 
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргМаксимальныеПоказанияСрез;
		яИмяНабора 		= "НаборМаксимальныеПоказанияСрез";
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, "" + яИмяНабора);
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		ВыражениеСтрока 							= "" + яИмяНабора + "." + "ПериодНачисления";
		ПолеПериодНачисления  						= Пакет.Операторы[0].ВыбираемыеПоля.Найти(ВыражениеСтрока);
		Индекс 										= Пакет.Операторы[0].ВыбираемыеПоля.Индекс(ПолеПериодНачисления);
		Пакет.Операторы[0].ВыбираемыеПоля.Установить(Индекс, Новый ВыражениеСхемыЗапроса("ДОБАВИТЬКДАТЕ(" + ВыражениеСтрока +",МЕСЯЦ,-1)"));
		Пакет.Колонки[Индекс].Псевдоним 			= "ПериодНачисления";
		Пакет.ТаблицаДляПомещения 					= ТаблицаДляПомещения;		
		
		Пакет.Операторы[0].Отбор.Добавить("" + яИмяНабора + ".ПериодНачисления > &ПериодНачисленияНачало");
		
	ИначеЕсли ИмяНабора  = "ПредоставленныеПоказания" Тогда
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргПредоставленныеПоказания;
		яИмяНабора 		= "НаборПредоставленныеПоказания";
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, "" + яИмяНабора);
		Для Каждого Поле Из яМетаданные.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Ресурсы Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.Реквизиты Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из яМетаданные.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
			
	ИначеЕсли ИмяНабора  = "ЗначениеПлощадейМКД" Тогда
		
		РегистрыСведений.энргСтабильныеПериодыМКД.ЗначениеПлощадейМКДКоллекцияПериодов(Схема,Параметры,ИмяТаблицыПериодов,ТаблицаДляПомещения);
		
	ИначеЕсли ИмяНабора  = "ЗначениеИндивидуальныхПлощадей" Тогда
		
		врСхема 					= Неопределено;
		
		РегистрыСведений.энргСтабильныеПериоды.ЗначениеИндивидуальныхПлощадейКоллекцияПериодов(врСхема,Параметры,ИмяТаблицыПериодов,"");
		Если ОбщегоНазначения.ПодсистемаСуществует("бестБиллингПроект") Тогда
			РегистрыСведений.бестСтабильныеПериодыНП.ЗначениеИндивидуальныхПлощадейКоллекцияПериодов(врСхема,Параметры,ИмяТаблицыПериодов,"");
		Иначе
			ВызватьИсключение "Метод не реализован";
		КонецЕсли;
		
		ТекстПомещения  			= врСхема.ПакетЗапросов[0].ПолучитьТекстЗапроса();
		ТекстНежилые  				= врСхема.ПакетЗапросов[1].ПолучитьТекстЗапроса();
		ТекстОбъединения 			= "ВЫБРАТЬ * ИЗ (" + ТекстПомещения + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС + ТекстНежилые + ") КАК ВложенныйЗапрос";
		
		Пакет 						= Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")); 			
		Пакет.УстановитьТекстЗапроса(ТекстОбъединения);
		Пакет.ТаблицаДляПомещения 	= ТаблицаДляПомещения;
		ОператорВыбора  			= Пакет.Операторы[0];
		ОператорВыбора.ВыбираемыеПоля.Очистить();
		
		ОператорВыбора.ВыбираемыеПоля.Добавить("Организация");
		ОператорВыбора.ВыбираемыеПоля.Добавить("ПериодНачисления");
		ОператорВыбора.ВыбираемыеПоля.Добавить("Район");
		ОператорВыбора.ВыбираемыеПоля.Добавить("МКД");
		ОператорВыбора.ВыбираемыеПоля.Добавить("Услуга");
		ОператорВыбора.ВыбираемыеПоля.Добавить("СУММА(ВложенныйЗапрос.ПлощадьАбонента)");
		Пакет.Колонки[ОператорВыбора.ВыбираемыеПоля.Количество()-1].Псевдоним = "ПлощадьАбонентов"; 		
		ОператорВыбора.ВыбираемыеПоля.Добавить("СУММА(ВложенныйЗапрос.ПлощадьСобственнаяПоставка)");   		
		Пакет.Колонки[ОператорВыбора.ВыбираемыеПоля.Количество()-1].Псевдоним = "ПлощадьСобственнаяПоставка";
		
	ИначеЕсли ИмяНабора  = "НаличиеПриборовУчетаСНачалаГода" Тогда
		
		яМетаданные 	= Метаданные.РегистрыСведений.энргПредоставленныеПоказания;
		яИмяНабора 		= "НаборНаличиеПрибораСНачалаГода";

		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
			
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&" + яИмяНабора, яИмяНабора);
		
		Источник.Источник.ДоступныеПоля.Добавить("Организация", 				Новый ОписаниеТипов("СправочникСсылка.Организации"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("ПериодНачисления", 			Новый ОписаниеТипов("Дата"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("Район", 						Новый ОписаниеТипов("СправочникСсылка.энргЗоныОтвественности"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("ЧастныйСектор", 				Новый ОписаниеТипов("Булево"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("Строение", 					Новый ОписаниеТипов("СправочникСсылка.энргСтроения"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("Помещение", 					Новый ОписаниеТипов("СправочникСсылка.энргПомещения"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("Услуга", 						Новый ОписаниеТипов("СправочникСсылка.энргВидыУслуг"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("НаправлениеИспользованияТУ", 	Новый ОписаниеТипов("СправочникСсылка.энргНаправлениеИспользованияТочекУчета"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		
		Источник.Источник.ДоступныеПоля.Добавить("ПриборВведен", 				Новый ОписаниеТипов("Булево"));
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
						
		Пакет.ТаблицаДляПомещения = ТаблицаДляПомещения;
		 
	ИначеЕсли ИмяНабора  = "ДанныеСтабильныхПериодов" Тогда
		
		Если Схема = Неопределено Тогда
			Схема 		= Новый СхемаЗапроса;
			Пакет 		= Схема.ПакетЗапросов[0];
		Иначе
			Пакет 		= Схема.ПакетЗапросов.Добавить();
		КонецЕсли;
		
		Источник 		= Пакет.Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&НаборПериоды", "НаборПериоды");
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Ресурсы Цикл 			
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Источник.Источник.ДоступныеПоля.Добавить(Поле.Имя, Поле.Тип);
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Источник.Источник.ДоступныеПоля[Источник.Источник.ДоступныеПоля.Количество()-1]);
		КонецЦикла;
		Пакет.ТаблицаДляПомещения 	= "вр" + ТаблицаДляПомещения;
		
		Пакет 						= Схема.ПакетЗапросов.Добавить();
		Источник 					= Пакет.Операторы[0].Источники.Добавить("вр" + ТаблицаДляПомещения, "НаборПериоды");
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Измерения Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;			
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Ресурсы Цикл 			
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.Реквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла;
		
		Для Каждого Поле Из Метаданные.РегистрыСведений.энргСтабильныеПериоды.СтандартныеРеквизиты Цикл 			
			Если СтрНачинаетсяС(НРег(Поле.Имя),"удалить") Тогда
				Продолжить;
			КонецЕсли;
			Пакет.Операторы[0].ВыбираемыеПоля.Добавить(Поле.Имя);
		КонецЦикла; 		
		
		Источник  					= Пакет.Операторы[0].Источники.Добавить(ИмяТаблицыПериодов, ИмяТаблицыПериодов);
		
		мУсловиеСоединения 			= Новый Массив;
		мУсловиеСоединения.Добавить("НаборПериоды.ПериодНачисления = "+ИмяТаблицыПериодов+".ПериодНачисления");
		мУсловиеСоединения.Добавить("НаборПериоды.Организация = "+ИмяТаблицыПериодов+".Организация");
		мУсловиеСоединения.Добавить("НаборПериоды.Район = "+ИмяТаблицыПериодов+".Район");
		
		Пакет.Операторы[0].Источники[0].Соединения.Добавить(ИмяТаблицыПериодов,СтрСоединить(мУсловиеСоединения,Символы.ПС +" И ")); 
		Соединение  				= Пакет.Операторы[0].Источники[0].Соединения[0];
		Соединение.ТипСоединения 	= ТипСоединенияСхемыЗапроса.Внутреннее;
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("" + ИмяТаблицыПериодов + ".НачалоОП");
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("" + ИмяТаблицыПериодов + ".ЗавершениеОП");
		Пакет.Операторы[0].ВыбираемыеПоля.Добавить("" + ИмяТаблицыПериодов + ".ДнейВПериоде");
		Пакет.ТаблицаДляПомещения 	= ТаблицаДляПомещения;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаполнитьНаличиеПрибораСНачалаГода()
	Запрос 			 = Новый Запрос;
	Запрос.УстановитьПараметр("НаборПериоды", НаборПериоды.Выгрузить());
	Запрос.Текст 	= 
	"ВЫБРАТЬ
	|	НаборПериоды.Организация КАК Организация,
	|	НаборПериоды.ПериодНачисления КАК ПериодНачисления,
	|	НаборПериоды.Район КАК Район,
	|	НаборПериоды.ЧастныйСектор КАК ЧастныйСектор,
	|	НаборПериоды.Строение КАК Строение,
	|	НаборПериоды.Помещение КАК Помещение,
	|	НаборПериоды.Услуга КАК Услуга,
	|	НаборПериоды.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|	НаборПериоды.ПриборВведен КАК ПриборВведен
	|ПОМЕСТИТЬ НаборПериоды
	|ИЗ
	|	&НаборПериоды КАК НаборПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПериоды.Организация КАК Организация,
	|	НаборПериоды.ПериодНачисления КАК ПериодНачисления,
	|	НаборПериоды.Район КАК Район,
	|	НаборПериоды.ЧастныйСектор КАК ЧастныйСектор,
	|	НаборПериоды.Строение КАК Строение,
	|	НаборПериоды.Помещение КАК Помещение,
	|	НаборПериоды.Услуга КАК Услуга,
	|	НаборПериоды.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|	МАКСИМУМ(ЕСТЬNULL(НаборПериодыПраво.ПриборВведен, ЛОЖЬ)) КАК ПриборВведен
	|ИЗ
	|	НаборПериоды КАК НаборПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаборПериоды КАК НаборПериодыПраво
	|		ПО НаборПериоды.Организация = НаборПериодыПраво.Организация
	|			И НаборПериоды.Район = НаборПериодыПраво.Район
	|			И НаборПериоды.ЧастныйСектор = НаборПериодыПраво.ЧастныйСектор
	|			И НаборПериоды.Строение = НаборПериодыПраво.Строение
	|			И НаборПериоды.Помещение = НаборПериодыПраво.Помещение
	|			И НаборПериоды.Услуга = НаборПериодыПраво.Услуга
	|			И НаборПериоды.НаправлениеИспользованияТУ = НаборПериодыПраво.НаправлениеИспользованияТУ
	|			И НаборПериоды.ПериодНачисления >= НаборПериодыПраво.ПериодНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборПериоды.Организация,
	|	НаборПериоды.ПериодНачисления,
	|	НаборПериоды.Район,
	|	НаборПериоды.ЧастныйСектор,
	|	НаборПериоды.Строение,
	|	НаборПериоды.Помещение,
	|	НаборПериоды.Услуга,
	|	НаборПериоды.НаправлениеИспользованияТУ";
	
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции



