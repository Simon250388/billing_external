
#Область РегламетныеПроцедуры

// Выполнение регламентных процедур
Процедура РегламетныеПроцедурыБиллинг() Экспорт 
	
	ЗначениеКонстанты  				= Константы.энргДатаНачалаВеденияУчета.Получить();
	
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоВеденияУчета",ЗначениеКонстанты);
	Запрос.Текст ="ВЫБРАТЬ
	              |	МАКСИМУМ(ВложенныйЗапрос.ПериодНачисления) КАК ПериодНачисления,
	              |	ВложенныйЗапрос.Район КАК Район,
	              |	ВложенныйЗапрос.Организация КАК Организация
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		энргЗакрытиеПериодаСрезПоследних.ПериодНачисления КАК ПериодНачисления,
	              |		энргЗакрытиеПериодаСрезПоследних.Район КАК Район,
	              |		энргЗакрытиеПериодаСрезПоследних.Организация КАК Организация
	              |	ИЗ
	              |		РегистрСведений.энргЗакрытиеПериода.СрезПоследних(, ) КАК энргЗакрытиеПериодаСрезПоследних
	              |	
	              |	ОБЪЕДИНИТЬ ВСЕ
	              |	
	              |	ВЫБРАТЬ
	              |		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоВеденияУчета, МЕСЯЦ), СЕКУНДА, -1), МЕСЯЦ),
	              |		энргЗоныОтвественности.Ссылка,
	              |		энргЗоныОтвественности.Организация
	              |	ИЗ
	              |		Справочник.энргЗоныОтвественности КАК энргЗоныОтвественности
	              |	ГДЕ
	              |		НЕ энргЗоныОтвественности.ПометкаУдаления) КАК ВложенныйЗапрос
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ВложенныйЗапрос.Район,
	              |	ВложенныйЗапрос.Организация";
	
	Результат  						= Запрос.Выполнить();
	Выборка  						= Результат.Выбрать();
	Пока Выборка.Следующий() цикл 		
		ПараметрыЗадания  			= Новый Массив;
		ПараметрыЗадания.Добавить(КонецМесяца(Выборка.ПериодНачисления)+1);
		ПараметрыЗадания.Добавить(Выборка.Район);
		ПараметрыЗадания.Добавить(Выборка.Организация);
		ФоновыеЗадания.Выполнить("бестРаботаСПоследовательностямиНП.ВыполнитьРегламетныеОперацииНП",ПараметрыЗадания);
	КонецЦикла;	
	
КонецПроцедуры

// Выполнение регламентных процедур
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   СбрасыватьСостояниеПоследовательности				- Сбрасывать состояние последовательности.
//
Процедура ОтложенныеДвиженияДокументовНачисленияНП(Организация,ПериодНачисления, Район,  МКД = Неопределено, ИсключаяОтдельностоящие = Ложь, Договор = Неопределено,СбрасыватьСостояниеПоследовательности=ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ПериодНачисления) или Не ЗначениеЗаполнено(Район) тогда
		Возврат;
	КонецЕсли;
	ГраницыПериода  											= Обработки.энргГраницыПериодаНачисленияМенеджер.ГраницыРасчетногоПериода(Организация, Район, ПериодНачисления);
	
	НачалоПериодаРасчета										= ГраницыПериода.НачалоОП;
	
	МВТ  														= Новый МенеджерВременныхТаблиц;
	
	Результат 													= РезультатНачальныеОстаткиСтабильногоПериодаНП(ПериодНачисления,Организация,Район,НачалоПериодаРасчета,ИсключаяОтдельностоящие,Договор);
	Выборка  													= Результат[2].Выбрать();
	
	ВыборкаПоказания 											= Результат[3].Выбрать();
	ВыборкаШкалы	 											= Результат[4].Выбрать();
	ВыборкаПриборыУзлаУчета										= Результат[5].Выбрать();
	
	
	ПериодНачисленияПред 										= НачалоМесяца(НачалоМесяца(ПериодНачисления)-1);
	ТекДоговор  												= Неопределено;
	НаборСтабильныеПериоды 										= Неопределено;
	НаборСтабильныеПериодыШкалы									= Неопределено;
	НаборНомерСтрокСтабПериода 									= Неопределено;
	НаборСтабильныеПериодыПриборыУзловУчета 					= Неопределено;

	НаборОтложенныхДвижений 									= Неопределено;
	НаборМаксимальныеПоказания 								= Неопределено;
	
	ВводНачальныхОстатков 										= Неопределено;
	Если Выборка.Количество() > 0 тогда		
		НачатьТранзакцию();
	Иначе
		Возврат;	
	КонецЕсли;	
	
	МассивДоговоров = Результат[2].Выгрузить().ВыгрузитьКолонку("Договор");
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДоговоров);
	
	ОчиститьНаборыЗаписей(Организация, ПериодНачисления,Район,МассивДоговоров);
	
	Если СбрасыватьСостояниеПоследовательности тогда
		СброситьСостояниеПоследовательности("бестСтабильныеПериодыПоследовательностьНП",	Организация,ПериодНачисления,Район,ТекДоговор);
		СброситьСостояниеПоследовательности("бестПоказанияПУНППоследовательность", 		Организация,ПериодНачисления,Район,ТекДоговор);
	КонецЕсли;
	
	
	НаборСтабильныеПериоды								= РегистрыСведений.бестСтабильныеПериодыНП.СоздатьНаборЗаписей();
	НаборСтабильныеПериодыШкалы							= РегистрыСведений.бестСтабильныеПериодыШкалыНП.СоздатьНаборЗаписей();
	НаборСтабильныеПериодыПриборыУзловУчета				= РегистрыСведений.бестСтабильныеПериодыПриборыУзловУчета.СоздатьНаборЗаписей();
	НаборНомерСтрокСтабПериода 							= РегистрыСведений.бестНомераСтрокСтабильногоПериодаНП.СоздатьНаборЗаписей();
	НаборМаксимальныеПоказанийСрез 						= РегистрыСведений.бестМаксимальныеПоказанияСрезНП.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() цикл		
		СтрокаСтабПериоды  										= НаборСтабильныеПериоды.добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтабПериоды,Выборка);	
		СтрокаСтабПериоды.ПериодНачисления 						= ПериодНачисления;
		
		СтрокаНомеровСтрок 										= НаборНомерСтрокСтабПериода.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНомеровСтрок,Выборка);
		СтрокаНомеровСтрок.ПериодНачисления 					= ПериодНачисления;
		СтрокаНомеровСтрок.период  								= Выборка.ДатаРегистратора;		
	КонецЦикла;  
	
	Пока ВыборкаШкалы.Следующий() Цикл		
		СтрокаНабора 											= НаборСтабильныеПериодыШкалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаШкалы);					
	КонецЦикла;	
	
	Пока ВыборкаПриборыУзлаУчета.Следующий() Цикл		
		СтрокаНабора 											= НаборСтабильныеПериодыПриборыУзловУчета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаПриборыУзлаУчета);					
	КонецЦикла;
	
	Пока ВыборкаПоказания.Следующий() Цикл		
		СтрокаНабора 											= НаборМаксимальныеПоказанийСрез.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаПоказания);					
	КонецЦикла;
	
	Попытка 				
		Если СбрасыватьСостояниеПоследовательности тогда 
			СброситьСостояниеПоследовательности("бестСтабильныеПериодыПоследовательностьНП",	Организация,ПериодНачисления,Район,ТекДоговор);
			СброситьСостояниеПоследовательности("бестПоказанияПУНППоследовательность",		Организация,ПериодНачисления,Район,ТекДоговор);
		КонецЕсли;
		НаборОтложенные 									= РегистрыСведений.бестОтложенныеДвиженияДокументовНП.СоздатьНаборЗаписей();
		НаборОтложенные.отбор.Организация.установить(Организация);
		НаборОтложенные.отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборОтложенные.отбор.Район.установить(Район); 						
		НаборОтложенные.отбор.РазделЗаписи.установить(Перечисления.бестРазделыЗаписиНП.СтабильныеПериодыНП);
		Если ТекДоговор <> Неопределено Тогда
			НаборОтложенные.отбор.Договор.установить(ТекДоговор);
		КонецЕсли;
		НаборОтложенные.Записать();  
		
		НаборСтабильныеПериоды.записать(Ложь);
		НаборСтабильныеПериодыШкалы.записать(Ложь);
		НаборНомерСтрокСтабПериода.записать(Ложь);	
		НаборСтабильныеПериодыПриборыУзловУчета.записать(Ложь);
		НаборМаксимальныеПоказанийСрез.записать(Ложь);
		ЗафиксироватьТранзакцию(); 			
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Заполнение начальных остатков по району " +Район + " за период:" + ПериодНачисления ,УровеньЖурналаРегистрации.Ошибка,,,ПредставлениеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПредставлениеОшибки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
	ПересчитатьСреднийОбъемПотребленияНП(Организация,ПериодНачисления,Район,Ложь);	
КонецПроцедуры

// Выполнение регламентных процедур
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   ОтборПоДому			- устанавливать отбор по дому.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   Абонент				- Абонент, по которому происходит восстановление последовательности.
//
Процедура ПересчитатьСреднийОбъемПотребленияНП(Организация,ПериодНачисления,Район,ОтборПоДому=ложь,Договор=Неопределено) Экспорт 
	
	Результат 						= РезультатаЗапросаСреднегоПотребленияНП(Организация,ПериодНачисления,Район,ОтборПоДому,Договор);
	Выборка  						= Результат.выбрать();
	Набор  							= РегистрыСведений.бестСреднийОбъемПотребленияНП.СоздатьНаборЗаписей();
	
	Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
	Набор.Отбор.район.установить(Организация);
	Набор.Отбор.район.установить(Район); 
	
	
	Если Договор<>Неопределено тогда
		Набор.Отбор.Договор.Установить(Договор);
	КонецЕсли;  	
	Набор.Записать();
	
	Набор  							= РегистрыСведений.бестСреднийОбъемПотребленияНП.СоздатьНаборЗаписей();				 
	Пока Выборка.следующий() цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);		
	КонецЦикла;
	Набор.Записать(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполнить Регламетные Операции НП.
Процедура ВыполнитьРегламетныеОперацииНП(Организация,ПериодНачисления,Район) Экспорт  	
	//ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ОтложенныеДвиженияДокументовНачисления",ПериодНачисления,Район);
	//ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	//ОтложенныеДвиженияДокументовНачисления(ПериодНачисления,Район);
	//ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
	//
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ВосстановитьПоследовательностьСтабильныеПериодыНП",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	ВосстановитьПоследовательностьСтабильныеПериодыНП(ПериодНачисления,Организация,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
КонецПроцедуры

// Сбросить Состояние Последовательности.
//
// Параметры:
//   ИмяПоследовательности	- Имя последовательности, по которой происходит сброс состояния.
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   Абонент				- Абонент, по которому происходит восстановление последовательности.
//
Процедура СброситьСостояниеПоследовательностиНП(ИмяПоследовательности,ПериодНачисления,Организация,Район,Договор=Неопределено) Экспорт 
	
	ПроведенСНарушением 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	ПроведенВПоследовательности  		= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	
	Набор 								= РегистрыСведений[ИмяПоследовательности].СоздатьНаборЗаписей();
	Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
	Набор.Отбор.Организация.установить(Организация);
	Набор.Отбор.Район.установить(Район);
	Набор.Отбор.СостояниеПроведения.установить(ПроведенВПоследовательности);
	
	Если Договор<>Неопределено тогда
		Набор.Отбор.Договор.установить(Договор);
	КонецЕсли; 
	
	Набор.Прочитать();
	ТаблицаНабора 						= Набор.Выгрузить();
	Набор.Очистить();
	Набор.Записать();
	ТаблицаНабора.ЗаполнитьЗначения(ПроведенСНарушением,"СостояниеПроведения");
	Набор 								= РегистрыСведений[ИмяПоследовательности].СоздатьНаборЗаписей();
	Набор.Загрузить(ТаблицаНабора);
	Набор.Записать(Ложь); 
	
КонецПроцедуры

// Восстановить Последовательность Стабильные Периоды юр. лиц.
//
Процедура ВосстановитьПоследовательностьСтабильныеПериодыНП(Организация,ПериодНачисления,Район,МКД = Неопределено, ИсключаяОтдельностоящие = Ложь, Договор=Неопределено) Экспорт 
	
	ГраницыПериода  								= Обработки.энргГраницыПериодаНачисленияМенеджер.ГраницыРасчетногоПериода(Организация, Район, ПериодНачисления);
		
	НачалоПериодаРасчета							= ГраницыПериода.НачалоОП;
	КонецПериодаРасчета								= ГраницыПериода.ЗавершениеОП;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПериодНачисления",ПериодНачисления);
	Отбор.Вставить("Район",Район);
	Отбор.Вставить("Организация",Организация);
	Отбор.Вставить("НачалоПериодаРасчета",НачалоПериодаРасчета);
	Отбор.Вставить("КонецПериодаРасчета",КонецПериодаРасчета);
	
	
	Если Договор <> Неопределено тогда
		Отбор.Вставить("Договор",Договор);
	КонецЕсли;
	
	Отбор.Вставить("МКД",МКД);

	
	Отказ = Ложь; 	
	
	НачатьТранзакцию();
	УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(Отбор, "бестСтабильныеПериодыНП",Отказ);
	
	Если Отказ тогда			
		Возврат;
	КонецЕсли;
	
	Отбор.Вставить("ИсключаяОтдельностоящие",ИсключаяОтдельностоящие);

	
	Результат 									= РезультатЗапросаСтабильныеПериодыНП(Отбор);
	
	Выборка  									= Результат.Выбрать();
	ТекДоговор 									= Неопределено;
	
	ПроведенВПоследовательности 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	Исключен 									= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности; 
	ЕстьОшибки 									= Ложь;
	Ошибки 										= "";
	МассивДокументов 							= Новый Массив;
	
	Пока Выборка.следующий() цикл  		
		Если ТекДоговор <> Выборка.Договор тогда 						
			Если ТекДоговор <> Неопределено тогда // Это не первая строка.				
				Отказ 							= ПровестиПоСтабильнымПериодамНП(МассивДокументов,Ошибки,НачалоПериодаРасчета);
				Если не Отказ тогда
					// Если все выполнено тогда изменяем состояние в последовательности.
					НаборПоследовательности  	= РегистрыСведений.бестСтабильныеПериодыПоследовательностьНП.СоздатьНаборЗаписей();
					НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
					НаборПоследовательности.Отбор.Организация.установить(Организация);
					НаборПоследовательности.Отбор.Район.установить(Район);
					НаборПоследовательности.Отбор.Договор.установить(ТекДоговор);
					НаборПоследовательности.Прочитать();
					ТаблицаНабора  				= НаборПоследовательности.Выгрузить();
					НаборПоследовательности.Очистить();
					НаборПоследовательности.Записать();
					для Каждого стр из ТаблицаНабора цикл
						стр.СостояниеПроведения = ПроведенВПоследовательности;
					КонецЦикла;
					НаборПоследовательности  	= РегистрыСведений.бестСтабильныеПериодыПоследовательностьНП.СоздатьНаборЗаписей();
					НаборПоследовательности.Загрузить(ТаблицаНабора);
					НаборПоследовательности.Записать(Ложь); 										
					ЗафиксироватьТранзакцию();
					НачатьТранзакцию();
				иначе
					ЕстьОшибки 					= Истина;
					ОтменитьТранзакцию();
					НачатьТранзакцию();
				КонецЕсли;					
			КонецЕсли;
			МассивДокументов 					= Новый Массив; 			
		КонецЕсли;
		
		ОписаниеСтроки 							= Новый ФиксированнаяСтруктура("ПериодНачисления,Организация,Район,Договор,ПериодРегистрации,Документ,МоментВремени,Дата");
		
		Набор 									= РегистрыСведений.бестСтабильныеПериодыНП.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.Договор.установить(Выборка.Договор);
		Набор.Записать();
		
		Набор 									= РегистрыСведений.бестСтабильныеПериодыШкалыНП.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.Договор.установить(Выборка.Договор);
		Набор.Записать();
		
		Набор 									= РегистрыСведений.бестНомераСтрокСтабильногоПериодаНП.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.Договор.установить(Выборка.Договор);
		Набор.Записать();

		
		Набор 							= РегистрыСведений.бестСтабильныеПериодыПриборыУзловУчета.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.Договор.установить(Выборка.Договор);
		Набор.Записать();		
		
		Если Выборка.СостояниеПроведения = Исключен тогда
			
			НаборПоследовательности  	= РегистрыСведений.бестСтабильныеПериодыПоследовательностьНП.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Организация);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.Договор.установить(Выборка.Договор);
			НаборПоследовательности.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
			НаборПоследовательности.Записать();
			
			ТекДоговор  					= Выборка.Договор;
			
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки  					= Новый Структура(ОписаниеСтроки);
		ДанныеСтроки.ПериодНачисления 	= ПериодНачисления;
		ДанныеСтроки.Организация 		= Организация;
		ДанныеСтроки.Район 				= Район;
		ДанныеСтроки.Договор			= Выборка.Договор;
		ДанныеСтроки.Документ			= Выборка.ДокРегистратор;
		ДанныеСтроки.ПериодРегистрации	= Выборка.ПериодРегистрации;
		ДанныеСтроки.МоментВремени  	= Новый МоментВремени(Выборка.ДатаРегистратора,Выборка.ДокРегистратор);
		ДанныеСтроки.Дата			  	= Выборка.ДатаРегистратора;
		
		МассивДокументов.Добавить(ДанныеСтроки);// Добавляем в набор.			
		ТекДоговор  					= Выборка.Договор;	
	КонецЦикла; 	
	
	Если ТекДоговор <> Неопределено тогда
		// Закончили чистку можно проводить документы.
		Отказ 						= ПровестиПоСтабильнымПериодамНП(МассивДокументов,Ошибки,НачалоПериодаРасчета);
		Если не Отказ тогда
			// Если все выполнено тогда изменяем состояние в последовательности.
			НаборПоследовательности  = РегистрыСведений.бестСтабильныеПериодыПоследовательностьНП.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Организация);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.Договор.установить(ТекДоговор);
			НаборПоследовательности.Прочитать();
			ТаблицаНабора  			= НаборПоследовательности.Выгрузить();
			НаборПоследовательности.Очистить();
			НаборПоследовательности.Записать();
			для Каждого стр из ТаблицаНабора цикл
				стр.СостояниеПроведения = ПроведенВПоследовательности;
			КонецЦикла;
			НаборПоследовательности  = РегистрыСведений.бестСтабильныеПериодыПоследовательностьНП.СоздатьНаборЗаписей();
			НаборПоследовательности.Загрузить(ТаблицаНабора);
			НаборПоследовательности.Записать(Ложь);				
			ЗафиксироватьТранзакцию();
		иначе
			ЕстьОшибки 					= Истина;
			ОтменитьТранзакцию();	
		КонецЕсли; 					
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ВызватьИсключение Ошибки;
	КонецЕсли;
	
КонецПроцедуры

// Восстановить Последовательность Показания ПУ.
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//
Процедура ВосстановитьПоследовательностьПоказанияПУНП(Организация, ПериодНачисления,Район,МКД = Неопределено, ИсключаяОтдельностоящие = Ложь, Договор=Неопределено) Экспорт 
	ГраницыПериода  							= Обработки.энргГраницыПериодаНачисленияМенеджер.ГраницыРасчетногоПериода(Организация, Район, ПериодНачисления);
	
	НачалоПериодаРасчета						= ГраницыПериода.НачалоОП;
	
	Отбор 										= Новый Структура;
	Отбор.Вставить("Организация",		Организация);
	Отбор.Вставить("ПериодНачисления",	ПериодНачисления);
	Отбор.Вставить("Район",				Район);
	Отбор.Вставить("ИсключаяОтдельностоящие",	ИсключаяОтдельностоящие);
	
	Если Договор <> Неопределено тогда
		Отбор.Вставить("Договор",		Договор);
	КонецЕсли;
	
	Отбор.Вставить("МКД",			МКД);
	
	Если Метаданные.РегистрыСведений.Найти("бестПриоритетПередачиПоказанийНП") <> Неопределено Тогда
		ПримененитьПриоритетыПоказанийПУНП(Отбор,НачалоПериодаРасчета);
	КонецЕсли;

	Отказ 										= Ложь;
	
	МВТ  										= Новый МенеджерВременныхТаблиц;
	Результат  									= РезультатЗапросаПоказанияПУНП(МВТ,Отбор,НачалоПериодаРасчета);
	
	ДанныеМаксимальногоПотребления 				= ДанныеМаксимальногоПотребления(НачалоПериодаРасчета);
	
	РезультатСреднийОбъем 						= РезультатСреднийОбъемПотребленияНП(МВТ,Отбор);
	ВыборкаСреднийОбъем 						= РезультатСреднийОбъем.выбрать();
	
	ПроведенСНарушением 						= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	ПроведенВПоследовательности 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	ПредыдущиеМакс 								= 0;
	Выборка  									= Результат.выбрать();
	ТекДоговор 									= Неопределено;
	ТекОбъект 									= Неопределено;
	ТекПрибор 									= Неопределено;
	ТекШкала		 							= Неопределено;
	ТекТарифнаяЗона 							= Неопределено;
	МассивДокументов							= Неопределено;
	НомерПозиции 								= Неопределено;
	ДанныеСреднегоОбъема 						= Неопределено;
	ОписаниеСтроки 								= Новый ФиксированнаяСтруктура("
	|ДокРегистратор,СостояниеПроведения,ПериодРегистрации,ДатаРегистратора,
	|СостояниеПоказаний,Показание,Переворот,МаксПоказания,ПериодМаксПоказаний,	 
	|РегистраторМаксПоказаний,ДатаРегистратораМаксимальных,БылПереворот,Разделитель,НомерСтрокиТЧ,
	|КоэффициентПУ,МаксимальноВозможныеПоказания,ВыводПрибораУчета,ИмяТабЧасти,КС, ТочкаУчета");
	
	Если Выборка.количество() > 0 тогда
		ВыборкаСреднийОбъем.Следующий();
		НачатьТранзакцию();
	КонецЕсли;
	
	СтруктураСреза  							= РегистрыСведений.энргПериодыПриемаПоказаний.ПолучитьПоследнее(ПериодНачисления, Новый Структура("Организация", Организация));
	ПоказанияС									= ?(не ЗначениеЗаполнено(СтруктураСреза.ДатаС),1,СтруктураСреза.ДатаС);
	ПоказанияПО 								= ?(не ЗначениеЗаполнено(СтруктураСреза.ДатаПо),31,СтруктураСреза.ДатаПо);
	
	Пока Выборка.следующий() цикл
		Если ТекДоговор <> Выборка.Договор или ТекОбъект <> Выборка.ОбъектРасчета или ТекПрибор <> Выборка.ПриборУчета Или ТекШкала <> Выборка.Шкала или ТекТарифнаяЗона <> Выборка.ТарифнаяЗона тогда 			  			
			Если ТекДоговор <> Неопределено тогда
				
				//	ДанныеСреднегоОбъема 			= ДанныеСреднегоОбъемаНП(ВыборкаСреднийОбъем,ТекДоговор);
				Если Не Отказ Тогда
					
					ПараметрыПроведений  					= Новый Структура("
					|Организация, ПериодНачисления,район,Договор,ОбъектРасчета,ПриборУчета,Шкала,ТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета",
					Организация, ПериодНачисления,район,ТекДоговор,ТекОбъект,ТекПрибор,Текшкала,ТекТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета);
					
					ОтказПоТарифнойЗоне			= Ложь;
					ОтказПоТарифнойЗоне			= ПровестиПоказанияПриборовУчетаНП(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления);
					
					Если ОтказПоТарифнойЗоне Тогда
						Отказ 					= Истина;
					КонецЕсли;
					
				КонецЕсли;

				
				Если  ТекОбъект<> Выборка.ОбъектРасчета или ТекПрибор <> Выборка.ПриборУчета тогда
					
					Если не Отказ тогда
						// Если все выполнено тогда изменяем состояние в последовательности.
						НаборПоследовательности  	= РегистрыСведений.бестПоказанияПУНППоследовательность.СоздатьНаборЗаписей();
						НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
						НаборПоследовательности.Отбор.Организация.установить(Организация);
						НаборПоследовательности.Отбор.Район.установить(Район);
						НаборПоследовательности.Отбор.СостояниеПроведения.установить(ПроведенСНарушением);
						НаборПоследовательности.Отбор.Договор.установить(ТекДоговор);
						НаборПоследовательности.Отбор.ОбъектРасчета.установить(ТекОбъект);
						НаборПоследовательности.Отбор.ПриборУчета.установить(ТекПрибор);
						
						НаборПоследовательности.Прочитать();
						ТаблицаНабора  				= НаборПоследовательности.Выгрузить();
						НаборПоследовательности.Очистить();
						НаборПоследовательности.Записать();
						
						ТаблицаНабора.ЗаполнитьЗначения(ПроведенВПоследовательности,"СостояниеПроведения");
						
						НаборПоследовательности  	= РегистрыСведений.бестПоказанияПУНППоследовательность.СоздатьНаборЗаписей();
						НаборПоследовательности.Загрузить(ТаблицаНабора);
						НаборПоследовательности.Записать(Ложь); 										
						ЗафиксироватьТранзакцию();
						НачатьТранзакцию(); 
						Отказ					= Ложь;
					иначе
						ОтменитьТранзакцию();
						НачатьТранзакцию();
					КонецЕсли; 				
					
				КонецЕсли;
				МассивДокументов.очистить();
			КонецЕсли;	
			
			Если ТекОбъект <> Выборка.ОбъектРасчета Тогда
				ДанныеСреднегоОбъема 		= ДанныеСреднегоОбъемаНП(ВыборкаСреднийОбъем,ТекДоговор);
			КонецЕсли;

			МассивДокументов					= Новый Массив;
			НомерПозиции 						= Выборка.НомерПозици+1;
		КонецЕсли; 	
		
		ДанныеСтроки 							= Новый Структура(ОписаниеСтроки);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки,Выборка);
		МассивДокументов.Добавить(ДанныеСтроки); 	
		
		// Очищаем данные
		Набор 									= РегистрыСведений.бестПредоставленныеПоказанияНП.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.периодНачисления.установить(ПериодНачисления);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.Договор.установить(Выборка.Договор);
		Набор.Отбор.ОбъектРасчета.установить(Выборка.ОбъектРасчета);
		Набор.Отбор.ПриборУчета.установить(Выборка.ПриборУчета);
		Набор.Отбор.Шкала.установить(Выборка.Шкала);
		Набор.Отбор.ТарифнаяЗона.установить(Выборка.ТарифнаяЗона);
		Набор.Записать();
		
		Набор 										= РегистрыСведений.бестРасчетСреднегоОбъемаНП.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.Договор.установить(Выборка.Договор);
		Набор.Отбор.ОбъектРасчета.установить(Выборка.ОбъектРасчета);
		Набор.Отбор.ТочкаУчета.установить(Выборка.ТочкаУчета);
		Набор.Отбор.Шкала.установить(Выборка.Шкала);
		//Набор.Отбор.ТарифнаяЗона.установить(Выборка.ТарифнаяЗона);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
		Набор.Записать();

		
		ТекМКД  								= Выборка.МКД;
		ТекДоговор  							= Выборка.Договор;
		ТекОбъект	  							= Выборка.ОбъектРасчета;
		ТекПрибор 								= Выборка.ПриборУчета;
		ТекШкала 								= Выборка.Шкала;
		ТекТарифнаяЗона 						= Выборка.ТарифнаяЗона;
	КонецЦикла;
	
	Если ТекДоговор<> Неопределено  тогда
		
		//ДанныеСреднегоОбъема 					= ДанныеСреднегоОбъемаНП(ВыборкаСреднийОбъем,ТекДоговор);
		
		Если Не Отказ Тогда
			
			ПараметрыПроведений  					= Новый Структура("
			|Организация, ПериодНачисления,район,Договор,ОбъектРасчета,ПриборУчета,Шкала,ТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета",
			Организация, ПериодНачисления,район,ТекДоговор,ТекОбъект,ТекПрибор,Текшкала,ТекТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета);

			ОтказПоТарифнойЗоне			= Ложь;
			ОтказПоТарифнойЗоне			= ПровестиПоказанияПриборовУчетаНП(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления);
			
			Если ОтказПоТарифнойЗоне Тогда
				Отказ 					= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если не Отказ тогда
			// Если все выполнено тогда изменяем состояние в последовательности.
			НаборПоследовательности  			= РегистрыСведений.бестПоказанияПУНППоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.СостояниеПроведения.установить(ПроведенСНарушением);
			НаборПоследовательности.Отбор.Договор.установить(ТекДоговор);
			НаборПоследовательности.Отбор.ОбъектРасчета.установить(ТекОбъект);
			НаборПоследовательности.Отбор.ПриборУчета.установить(ТекПрибор);
		//	НаборПоследовательности.Отбор.ТарифнаяЗона.установить(ТекТарифнаяЗона);
			НаборПоследовательности.Прочитать();
			ТаблицаНабора  						= НаборПоследовательности.Выгрузить();
			НаборПоследовательности.Очистить();
			НаборПоследовательности.Записать();
			
			ТаблицаНабора.ЗаполнитьЗначения(ПроведенВПоследовательности,"СостояниеПроведения");
			
			НаборПоследовательности  			= РегистрыСведений.бестПоказанияПУНППоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Загрузить(ТаблицаНабора);
			НаборПоследовательности.Записать(Ложь); 
			ЗафиксироватьТранзакцию();
			иначе
			ОтменитьТранзакцию(); 			 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Примененить приоритеты показаний приборов учета юр. лиц
Процедура ПримененитьПриоритетыПоказанийПУНП(Отбор,НачалоПериодаРасчета)
	
	// Получение списока измерений РС "Показания Приборов учета юр. лиц (последовательность)"
	Измерения = Новый Массив;
	Для каждого ТекИзмерение Из Метаданные.РегистрыСведений.бестПоказанияПУНППоследовательность.Измерения Цикл
		Измерения.Добавить(ТекИзмерение.Имя);
	КонецЦикла;
	
	РС_Последовательность = РегистрыСведений.бестПоказанияПУНППоследовательность;
	ИсключенИзПослед = Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
	
	// Получение записей с ниским приоритетом
	Запрос = Новый Запрос;
	Текст = 
		"ВЫБРАТЬ
		|	бестПоказанияПУНППоследовательность.Организация КАК Организация,
		|	бестПоказанияПУНППоследовательность.ПериодНачисления КАК ПериодНачисления,
		|	бестПоказанияПУНППоследовательность.Район КАК Район,
		|	бестПоказанияПУНППоследовательность.Договор КАК Договор,
		|	бестПоказанияПУНППоследовательность.ОбъектРасчета КАК ОбъектРасчета,
		|	бестПоказанияПУНППоследовательность.ПриборУчета КАК ПриборУчета,
		|	бестПоказанияПУНППоследовательность.МКД КАК МКД
		|ПОМЕСТИТЬ ВТ_НарушенныеЗаписи
		|ИЗ
		|	РегистрСведений.бестПоказанияПУНППоследовательность КАК бестПоказанияПУНППоследовательность
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.энргПериодыПриемаПоказаний.СрезПоследних(&КонецПериода, Организация = &Организация) КАК энргПериодыПриемаПоказанийСрезПоследних
		|		ПО бестПоказанияПУНППоследовательность.Организация = энргПериодыПриемаПоказанийСрезПоследних.Организация
		|ГДЕ
		|	бестПоказанияПУНППоследовательность.Организация = &Организация
		|	И бестПоказанияПУНППоследовательность.ПериодНачисления = &ПериодНачисления
		|	И бестПоказанияПУНППоследовательность.Район = &Район
		|	И бестПоказанияПУНППоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
		|	И бестПоказанияПУНППоследовательность.Договор = &Договор
		|	И бестПоказанияПУНППоследовательность.МКД = &МКД
		|	И (энргПериодыПриемаПоказанийСрезПоследних.ДатаС ЕСТЬ NULL
		|			ИЛИ энргПериодыПриемаПоказанийСрезПоследних.ДатаС <= ДЕНЬ(бестПоказанияПУНППоследовательность.ДатаРегистратора))
		|	И (энргПериодыПриемаПоказанийСрезПоследних.ДатаПо ЕСТЬ NULL
		|			ИЛИ энргПериодыПриемаПоказанийСрезПоследних.ДатаПо = 0
		|			ИЛИ энргПериодыПриемаПоказанийСрезПоследних.ДатаПо >= ДЕНЬ(бестПоказанияПУНППоследовательность.ДатаРегистратора))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бестПоказанияПУНППоследовательность.Организация КАК Организация,
		|	бестПоказанияПУНППоследовательность.ПериодНачисления КАК ПериодНачисления,
		|	бестПоказанияПУНППоследовательность.Район КАК Район,
		|	бестПоказанияПУНППоследовательность.СостояниеПроведения КАК СостояниеПроведения,
		|	бестПоказанияПУНППоследовательность.Договор КАК Договор,
		|	бестПоказанияПУНППоследовательность.ОбъектРасчета КАК ОбъектРасчета,
		|	бестПоказанияПУНППоследовательность.ПриборУчета КАК ПриборУчета,
		|	бестПоказанияПУНППоследовательность.ПериодРегистрации КАК ПериодРегистрации,
		|	бестПоказанияПУНППоследовательность.Разделитель КАК Разделитель,
		|	бестПоказанияПУНППоследовательность.ДатаРегистратора КАК ДатаРегистратора,
		|	бестПоказанияПУНППоследовательность.ДокРегистратор КАК ДокРегистратор,
		|	бестПоказанияПУНППоследовательность.ВыводПрибораУчета КАК ВыводПрибораУчета,
		|	бестПоказанияПУНППоследовательность.ИмяТабЧасти КАК ИмяТабЧасти,
		|	бестПоказанияПУНППоследовательность.МКД КАК МКД,
		|	бестПоказанияПУНППоследовательность.ИсточникПоказаний КАК ИсточникПоказаний,
		|	ЕСТЬNULL(бестПриоритетПередачиПоказанийНПСрезПоследних.Приоритет, 0) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ЗаписиПоледовательности
		|ИЗ
		|	РегистрСведений.бестПоказанияПУНППоследовательность КАК бестПоказанияПУНППоследовательность
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бестПриоритетПередачиПоказанийНП.СрезПоследних(
		|				&КонецПериода,
		|				Организация = &Организация
		|					И Район = &Район) КАК бестПриоритетПередачиПоказанийНПСрезПоследних
		|		ПО бестПоказанияПУНППоследовательность.Организация = бестПриоритетПередачиПоказанийНПСрезПоследних.Организация
		|			И бестПоказанияПУНППоследовательность.Район = бестПриоритетПередачиПоказанийНПСрезПоследних.Район
		|			И бестПоказанияПУНППоследовательность.ИсточникПоказаний = бестПриоритетПередачиПоказанийНПСрезПоследних.ИсточникПоказаний
		|ГДЕ
		|	(бестПоказанияПУНППоследовательность.Организация, бестПоказанияПУНППоследовательность.ПериодНачисления, бестПоказанияПУНППоследовательность.Район, бестПоказанияПУНППоследовательность.Договор, бестПоказанияПУНППоследовательность.ОбъектРасчета, бестПоказанияПУНППоследовательность.ПриборУчета,  бестПоказанияПУНППоследовательность.МКД) В
		|			(ВЫБРАТЬ
		|				ВТ_НарушенныеЗаписи.Организация КАК Организация,
		|				ВТ_НарушенныеЗаписи.ПериодНачисления КАК ПериодНачисления,
		|				ВТ_НарушенныеЗаписи.Район КАК Район,
		|				ВТ_НарушенныеЗаписи.Договор КАК Договор,
		|				ВТ_НарушенныеЗаписи.ОбъектРасчета КАК ОбъектРасчета,
		|				ВТ_НарушенныеЗаписи.ПриборУчета КАК ПриборУчета,
		|				ВТ_НарушенныеЗаписи.МКД КАК МКД
		|			ИЗ
		|				ВТ_НарушенныеЗаписи КАК ВТ_НарушенныеЗаписи)
		|	И (бестПоказанияПУНППоследовательность.ДокРегистратор ССЫЛКА Документ.бестРегистрацияПоказанийНП
		|			ИЛИ бестПоказанияПУНППоследовательность.ДокРегистратор ССЫЛКА Документ.бестРегистрацияПоказанийНПОбщий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаписиПоледовательности.Организация КАК Организация,
		|	ВТ_ЗаписиПоледовательности.ПериодНачисления КАК ПериодНачисления,
		|	ВТ_ЗаписиПоледовательности.МКД КАК МКД,
		|	ВТ_ЗаписиПоледовательности.Район КАК Район,
		|	ВТ_ЗаписиПоледовательности.ПриборУчета КАК ПриборУчета,
		|	ВТ_ЗаписиПоледовательности.Договор КАК Договор,
		|	ВТ_ЗаписиПоледовательности.ОбъектРасчета КАК ОбъектРасчета,
		|	МАКСИМУМ(ВТ_ЗаписиПоледовательности.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_МаксимальныйПриоритет
		|ИЗ
		|	ВТ_ЗаписиПоледовательности КАК ВТ_ЗаписиПоледовательности
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ЗаписиПоледовательности.Организация,
		|	ВТ_ЗаписиПоледовательности.ПериодНачисления,
		|	ВТ_ЗаписиПоледовательности.МКД,
		|	ВТ_ЗаписиПоледовательности.Район,
		|	ВТ_ЗаписиПоледовательности.ПриборУчета,
		|	ВТ_ЗаписиПоледовательности.Договор,
		|	ВТ_ЗаписиПоледовательности.ОбъектРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаписиПоледовательности.Организация КАК Организация,
		|	ВТ_ЗаписиПоледовательности.ПериодНачисления КАК ПериодНачисления,
		|	ВТ_ЗаписиПоледовательности.Район КАК Район,
		|	ВТ_ЗаписиПоледовательности.СостояниеПроведения КАК СостояниеПроведения,
		|	ВТ_ЗаписиПоледовательности.Договор КАК Договор,
		|	ВТ_ЗаписиПоледовательности.ОбъектРасчета КАК ОбъектРасчета,
		|	ВТ_ЗаписиПоледовательности.ПриборУчета КАК ПриборУчета,
		|	ВТ_ЗаписиПоледовательности.ПериодРегистрации КАК ПериодРегистрации,
		|	ВТ_ЗаписиПоледовательности.Разделитель КАК Разделитель,
		|	ВТ_ЗаписиПоледовательности.ДатаРегистратора КАК ДатаРегистратора,
		|	ВТ_ЗаписиПоледовательности.ДокРегистратор КАК ДокРегистратор,
		|	ВТ_ЗаписиПоледовательности.ВыводПрибораУчета КАК ВыводПрибораУчета,
		|	ВТ_ЗаписиПоледовательности.ИмяТабЧасти КАК ИмяТабЧасти,
		|	ВТ_ЗаписиПоледовательности.МКД КАК МКД,
		|	ВТ_ЗаписиПоледовательности.ИсточникПоказаний КАК ИсточникПоказаний
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_МаксимальныйПриоритет КАК ВТ_МаксимальныйПриоритет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаписиПоледовательности КАК ВТ_ЗаписиПоледовательности
		|		ПО ВТ_МаксимальныйПриоритет.Организация = ВТ_ЗаписиПоледовательности.Организация
		|			И ВТ_МаксимальныйПриоритет.ПериодНачисления = ВТ_ЗаписиПоледовательности.ПериодНачисления
		|			И ВТ_МаксимальныйПриоритет.МКД = ВТ_ЗаписиПоледовательности.МКД
		|			И ВТ_МаксимальныйПриоритет.Район = ВТ_ЗаписиПоледовательности.Район
		|			И ВТ_МаксимальныйПриоритет.ПриборУчета = ВТ_ЗаписиПоледовательности.ПриборУчета
		|			И ВТ_МаксимальныйПриоритет.Договор = ВТ_ЗаписиПоледовательности.Договор
		|			И ВТ_МаксимальныйПриоритет.ОбъектРасчета = ВТ_ЗаписиПоледовательности.ОбъектРасчета
		|			И ВТ_МаксимальныйПриоритет.Приоритет > ВТ_ЗаписиПоледовательности.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.ДокРегистратор КАК ДокРегистратор,
		|	ВТ_Данные.ПриборУчета КАК ПриборУчета
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|ИТОГИ ПО
		|	ДокРегистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Организация КАК Организация,
		|	ВТ_Данные.ПериодНачисления КАК ПериодНачисления,
		|	ВТ_Данные.Район КАК Район,
		|	ВТ_Данные.СостояниеПроведения КАК СостояниеПроведения,
		|	ВТ_Данные.Договор КАК Договор,
		|	ВТ_Данные.ОбъектРасчета КАК ОбъектРасчета,
		|	ВТ_Данные.ПриборУчета КАК ПриборУчета,
		|	ВТ_Данные.ПериодРегистрации КАК ПериодРегистрации,
		|	ВТ_Данные.Разделитель КАК Разделитель,
		|	ВТ_Данные.ДатаРегистратора КАК ДатаРегистратора,
		|	ВТ_Данные.ДокРегистратор КАК ДокРегистратор,
		|	ВТ_Данные.ВыводПрибораУчета КАК ВыводПрибораУчета,
		|	ВТ_Данные.ИмяТабЧасти КАК ИмяТабЧасти,
		|	ВТ_Данные.МКД КАК МКД,
		|	ВТ_Данные.ИсточникПоказаний КАК ИсточникПоказаний
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные";
	
	
	Если Отбор.свойство("Договор") тогда
		Запрос.УстановитьПараметр("Договор", Отбор.Договор);
	Иначе
		Текст = СтрЗаменить(Текст,"И бестПоказанияПУНППоследовательность.Договор = &Договор","");
	КонецЕсли;
	Если Отбор.свойство("МКД") тогда
		Запрос.УстановитьПараметр("МКД",	 Отбор.МКД);
	Иначе
		Текст = СтрЗаменить(Текст,"И бестПоказанияПУНППоследовательность.МКД = &МКД","");
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Организация",		  Отбор.Организация);
	Запрос.УстановитьПараметр("Район",				  Отбор.район);
	Запрос.УстановитьПараметр("ПериодНачисления",	  Отбор.ПериодНачисления);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета", НачалоПериодаРасчета);	
	Запрос.УстановитьПараметр("КонецПериода",		  КонецМесяца(НачалоПериодаРасчета));	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КолЗапросов = РезультатЗапроса.Количество();
	ВыборкаДок = РезультатЗапроса[КолЗапросов-2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДок.Следующий() Цикл
		Попытка
			ДокРегистратор = ВыборкаДок.ДокРегистратор.ПолучитьОбъект();
			Выборка = ВыборкаДок.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.бестРегистрацияПоказанийНП") Тогда
					
					ОтборПУ = Новый Структура("ПриборУчета", Выборка.ПриборУчета); 
					СтрокиПрибора = ДокРегистратор.ТочкиУчета.НайтиСтроки(ОтборПУ);
					Для каждого СтрокаТУ Из СтрокиПрибора Цикл
						ОтборШкала = Новый Структура("IDСтрокиТочкиУчета", СтрокаТУ.IDСтроки); 
						СтрокиШкал = ДокРегистратор.ШкалыПриборовУчета.НайтиСтроки(ОтборШкала);
						
						Для каждого СтрокаШкалы Из СтрокиШкал Цикл
							ОтборПоказания = Новый Структура("IDСтроки", СтрокаШкалы.IDСтроки); 
							СтрокиПоказания = ДокРегистратор.ПоказанияПриборовУчета.НайтиСтроки(ОтборПоказания);
							
							Для каждого СтрокаПоказания Из СтрокиПоказания Цикл
								СтрокаПоказания.СостояниеПоказаний = Перечисления.энргСостояниеПоказаний.Отклонены;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.бестРегистрацияПоказанийНПОбщий") Тогда
					
					ОтборПУ = Новый Структура("ПриборУчета", Выборка.ПриборУчета); 
					СтрокиПрибора = ДокРегистратор.ТочкиУчета.НайтиСтроки(ОтборПУ);
					Для каждого СтрокаТУ Из СтрокиПрибора Цикл
						СтрокаТУ.СостояниеПоказаний = Перечисления.энргСостояниеПоказаний.Отклонены;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			ДокРегистратор.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

	
	Выборка = РезультатЗапроса[КолЗапросов-1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			// Установка статуса "Проведен в последовательности"
			НаборПоследовательности  	= РС_Последовательность.СоздатьНаборЗаписей();
			Для каждого ТекИзмерение Из Измерения Цикл
				НаборПоследовательности.Отбор[ТекИзмерение].Установить(Выборка[ТекИзмерение]);
			КонецЦикла;
			НаборПоследовательности.Записать();
			
			Запись = РС_Последовательность.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.СостояниеПроведения = Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
			Запись.Записать(Истина);	
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры

// Восстановить Последовательность По нежилому помещению.
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   Абонент				- Абонент, по которому происходит восстановление последовательности.
//
Процедура ВосстановитьПоследовательностьПоНП(Организация, ПериодНачисления,Район,Договор=Неопределено) Экспорт  
	ПараметрыЗадания  			= Новый Массив;
	ПараметрыЗадания.Добавить(Организация);
	ПараметрыЗадания.Добавить(ПериодНачисления);
	ПараметрыЗадания.Добавить(Район);
	ПараметрыЗадания.Добавить(Неопределено);
	ПараметрыЗадания.Добавить(Ложь);
	ПараметрыЗадания.Добавить(Договор);
	
	ФоновыеЗадания.Выполнить("бестРаботаСПоследовательностямиНП.ВосстановитьПоследовательностьСтабильныеПериодыНП",		ПараметрыЗадания);
	ФоновыеЗадания.Выполнить("бестРаботаСПоследовательностямиНП.ВосстановитьПоследовательностьПоказанияПУНП",			ПараметрыЗадания);	
	//ФоновыеЗадания.Выполнить("бестРаботаСПоследовательностями.ВосстановитьПоследовательностьВзаиморасчеты",			ПараметрыЗадания);
КонецПроцедуры

// Сбросить Состояние Последовательности.
//
// Параметры:
//   ИмяПоследовательности	- Имя последовательности, по которой происходит сброс состояния.
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   Абонент				- Абонент, по которому происходит восстановление последовательности.
//
Процедура СброситьСостояниеПоследовательности(ИмяПоследовательности,Организация,ПериодНачисления,Район,Договор=Неопределено) Экспорт 
	
	ПроведенСНарушением 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	ПроведенВПоследовательности  		= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	
	Набор 								= РегистрыСведений[ИмяПоследовательности].СоздатьНаборЗаписей();
	Набор.Отбор.Организация.установить(Организация);
	Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
	Набор.Отбор.Район.установить(Район);
	Набор.Отбор.СостояниеПроведения.установить(ПроведенВПоследовательности);
	Если Договор<>Неопределено тогда
		Набор.Отбор.Договор.установить(Договор);
	КонецЕсли;
	 	
	Набор.Прочитать();
	ТаблицаНабора 						= Набор.Выгрузить();
	Набор.Очистить();
	Набор.Записать();
	ТаблицаНабора.ЗаполнитьЗначения(ПроведенСНарушением,"СостояниеПроведения");
	Набор 								= РегистрыСведений[ИмяПоследовательности].СоздатьНаборЗаписей();
	Набор.Загрузить(ТаблицаНабора);
	Набор.Записать(Ложь); 
	
КонецПроцедуры

// Восстановить Последовательность Взаиморасчетов НП.
//
// Параметры:
//
Процедура ВосстановитьПоследовательностьВзаиморасчетыНП(Организация, ПериодНачисления,Район,МКД = Неопределено, ИсключаяОтдельностоящие = Ложь, Договор=Неопределено) Экспорт
	перем ТекДоговор,Авансы,МассивДокументов,ДанныеЗадолженности;	
	
	ДанныеСреза 												= РегистрыСведений.энргСпособыРаспределенияОплаты.ПолучитьПоследнее(ПериодНачисления);
	СпособРаспределенияОплаты 									= ДанныеСреза.СпособРаспределения;
	
	Если не ЗначениеЗаполнено(СпособРаспределенияОплаты) тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены настройки распределения оплаты, операция не может быть выполнена");
		Возврат;
	КонецЕсли;
	
	ГраницыПериода  									= Обработки.энргГраницыПериодаНачисленияМенеджер.ГраницыРасчетногоПериода(Организация, Район, ПериодНачисления);
	НачалоПериодаРасчета								= ГраницыПериода.НачалоОП;
	КонецПериодаРасчета  								= ГраницыПериода.ЗавершениеОП-1;
	
	ПроведенВПоследовательности 						= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	ПроведенСНарушением 								= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	
	ИспользоватьОтборы = ИсключаяОтдельностоящие = Истина ИЛИ МКД <> Неопределено ИЛИ Договор <> Неопределено;
	
	МВТ 												= ЗаполнитьМВТВзаиморасчеты(Организация, ПериодНачисления,Район,ИспользоватьОтборы,МКД,Договор,НачалоПериодаРасчета,КонецПериодаРасчета,ИсключаяОтдельностоящие);
	
	РезультатЗадолженность  							= РезультатЗадолженность(Организация, ПериодНачисления,Район,МКД,Договор, ИспользоватьОтборы,МВТ,НачалоПериодаРасчета,КонецПериодаРасчета);

	РезультатДокументыДляПроведения  					= РезультатДокументыДляПроведения(Организация, ПериодНачисления,Район,МКД,Договор,ИспользоватьОтборы,МВТ);

	РезультатДанныеНачислений 							= РезультатДанныеНачислений(МВТ);
	ВыборкаДанныеНачислений 							= РезультатДанныеНачислений.выбрать();
	
	РезультатАванс										= РезультатАвансыНаГраницу(Организация, ПериодНачисления,Район,МКД,Договор,ИспользоватьОтборы,МВТ,НачалоПериодаРасчета,КонецПериодаРасчета);
	ВыборкаАвансы  										= РезультатАванс.выбрать();
	
	РезультатОплата										= РезультатОплата(МВТ, НачалоПериодаРасчета);
	ВыборкаОплата  										= РезультатОплата.выбрать();
	
	ВыборкаДокументы  									= РезультатДокументыДляПроведения.выбрать();
	ВыборкаЗадолженность  								= РезультатЗадолженность.выбрать();
	
	НастройкиПорядкаПогашения 							= НастройкиПорядкаПогашения();
	
	ПустойРезультатНачисления 							= Истина;
	ПустойРезультатОплаты 								= Истина;
	Если ВыборкаДокументы.количество() > 0 тогда
		НачатьТранзакцию();
		ПустойРезультатЗадолженность 					= ВыборкаЗадолженность.следующий();
		ПустойРезультатАвансы 							= ВыборкаАвансы.следующий();
		ПустойРезультатНачисления 						= ВыборкаДанныеНачислений.следующий();
		ПустойРезультатОплаты	 						= НЕ ВыборкаОплата.следующий();
	КонецЕсли;	
	СуммаАванса 										= 0;
	
	ОписаниеСтроки  									= Новый ФиксированнаяСтруктура("
	|МКД,Договор,СостояниеПроведения,ДатаРегистратора,ДокРегистратор,ЭтоОплата,ИсточникПоступления");
	НаборыПоТипам 										= НаборыПоТипам();	
	
	ПараметрыПроведения 								= Новый Структура;
	ПараметрыПроведения.Вставить("Организация",					Организация);
	ПараметрыПроведения.Вставить("ПериодНачисления",			ПериодНачисления);
	ПараметрыПроведения.Вставить("район",						Район);
	ПараметрыПроведения.Вставить("МассивДокументов",			МассивДокументов);
	ПараметрыПроведения.Вставить("Авансы",						Авансы);
	ПараметрыПроведения.Вставить("СуммаАванса",					СуммаАванса);
	ПараметрыПроведения.Вставить("ДанныеЗадолженности",			ДанныеЗадолженности);
	ПараметрыПроведения.Вставить("СпособРаспределенияОплаты",	СпособРаспределенияОплаты);
	ПараметрыПроведения.Вставить("ДанныеНачислений",			Новый Соответствие);
	ПараметрыПроведения.Вставить("ДанныеОплаты",				Новый Соответствие);
	ПараметрыПроведения.Вставить("НаборыПоТипам",				НаборыПоТипам);
	ПараметрыПроведения.Вставить("Сортировка", 					"ПорядокПериодРасчета,ПериодРасчета,ПорядокПогашенияУслуги,Услуга");
	ПараметрыПроведения.Вставить("НастройкиПорядкаПогашения", 	НастройкиПорядкаПогашения);
	
	МассивДокументовНачисления 							= Новый Соответствие;

	
	Пока ВыборкаДокументы.следующий() цикл 					
		
		Если ТекДоговор <> ВыборкаДокументы.Договор тогда	
			
			Если ТекДоговор <> Неопределено тогда
				
				ДанныеНачислений 						= ДанныеНачислений(ТекДоговор,ВыборкаДанныеНачислений);
				ДанныеАвансы 							= АвансНаГраницу(ТекДоговор,ВыборкаАвансы);			
				ДанныеЗадолженности  					= ЗадолженностьНаГраницу(ТекДоговор,ВыборкаЗадолженность);				
				ПараметрыПроведения.ДанныеОплаты 		= Новый Соответствие;
				Если Не ПустойРезультатОплаты Тогда
					 ПараметрыПроведения.ДанныеОплаты 	= ДанныеОплаты(ТекДоговор, ВыборкаОплата); 
				КонецЕсли;
								
				ПараметрыПроведения.МассивДокументов	= МассивДокументов;
				ПараметрыПроведения.Авансы				= ДанныеАвансы.Авансы;
				ПараметрыПроведения.СуммаАванса			= ДанныеАвансы.СуммаАванса;
				ПараметрыПроведения.ДанныеЗадолженности	= ДанныеЗадолженности;
				ПараметрыПроведения.ДанныеНачислений 	= ДанныеНачислений;
				
				Отказ  									= ПровестиВзаиморасчеты(ПараметрыПроведения,МассивДокументовНачисления);
				
				Если не Отказ 
					//и не ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") 
					и ИзменитьСостояниеПоследовательности(Организация, ПериодНачисления,район,ПроведенСНарушением,ПроведенВПоследовательности,ТекДоговор) тогда	
					ЗафиксироватьТранзакцию();
					НачатьТранзакцию();
				Иначе
					//Если не ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") тогда
					ОтменитьТранзакцию();
					НачатьТранзакцию();
				КонецЕсли;
				
				Если ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") Тогда
					ПараметрыПроведения.Удалить("ЕстьДокументыНачисления");
				КонецЕсли;				
			КонецЕсли;
			
			//Если ТекМКД <> ВыборкаДокументы.МКД и МассивДокументовНачисления.Количество() > 0 тогда
			//	Если ЗаписатьНаборыДокументовНачисления(Организация, ПериодНачисления,район,ТекМКД,ПроведенСНарушением,ПроведенВПоследовательности,МассивДокументовНачисления,Абонент) тогда
			//		ЗафиксироватьТранзакцию();
			//	Иначе
			//		ОтменитьТранзакцию();
			//	КонецЕсли;
			//	НачатьТранзакцию();
			//	МассивДокументовНачисления 				= Новый Соответствие;				
			//КонецЕсли; 	
			
			МассивДокументов  							= Новый Массив;			
		КонецЕсли;  		
		ДанныеСтроки  									= Новый Структура(ОписаниеСтроки);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки,ВыборкаДокументы);
		МассивДокументов.Добавить(ДанныеСтроки);		
		ТекДоговор 										= ВыборкаДокументы.Договор;	
	КонецЦикла;
	
	Если ТекДоговор <> Неопределено тогда
		
		ДанныеНачислений 								= ДанныеНачислений(ТекДоговор,ВыборкаДанныеНачислений);
		ДанныеАвансы 									= АвансНаГраницу(ТекДоговор,ВыборкаАвансы);				
		ДанныеЗадолженности  							= ЗадолженностьНаГраницу(ТекДоговор,ВыборкаЗадолженность);
		
		ПараметрыПроведения.МассивДокументов			= МассивДокументов;
		ПараметрыПроведения.Авансы						= ДанныеАвансы.Авансы;
		ПараметрыПроведения.СуммаАванса 				= ДанныеАвансы.СуммаАванса;
		ПараметрыПроведения.ДанныеЗадолженности			= ДанныеЗадолженности;
		ПараметрыПроведения.ДанныеНачислений 			= ДанныеНачислений;
		ПараметрыПроведения.ДанныеОплаты 				= Новый Соответствие;
		Если НЕ ПустойРезультатОплаты Тогда
			ПараметрыПроведения.ДанныеОплаты 			= ДанныеОплаты(ТекДоговор, ВыборкаОплата); 
		КонецЕсли;

		Отказ  											= ПровестиВзаиморасчеты(ПараметрыПроведения,МассивДокументовНачисления);
		
		Если не Отказ 
			//и не ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") 
			и ИзменитьСостояниеПоследовательности(Организация, ПериодНачисления,район,ПроведенСНарушением,ПроведенВПоследовательности,ТекДоговор) тогда	
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		Иначе
			//Если не ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") тогда  
			ОтменитьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли; 		
		
		//Если МассивДокументовНачисления.Количество() > 0 тогда
		//	Если ЗаписатьНаборыДокументовНачисления(Организация, ПериодНачисления,район,ТекМКД,ПроведенСНарушением,ПроведенВПоследовательности,МассивДокументовНачисления,Договор) тогда
		//		ЗафиксироватьТранзакцию();
		//	иначе
		//		ОтменитьТранзакцию();
		//	КонецЕсли;							
		//КонецЕсли; 		 		
	КонецЕсли;
КонецПроцедуры

Процедура ВосстановитьПоследовательностьВзаиморасчетыНПСтарая(Организация, ПериодНачисления,Район,МКД = Неопределено, ИсключаяОтдельностоящие = Ложь, Договор=Неопределено) Экспорт
ГраницыПериода  								= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация,Район,ПериодНачисления,Ложь);
	
	НачалоПериодаРасчета							= ГраницыПериода.НачалоОП;
	КонецПериодаРасчета  							= ГраницыПериода.ЗавершениеОП;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бестОбъемНачисленийНПОбороты.ОбъемУслугиОборот КАК ОбъемУслугиОборот,
		|	бестОбъемНачисленийНПОбороты.Услуга КАК Услуга,
		|	бестОбъемНачисленийНПОбороты.Договор КАК Договор,
		|	бестОбъемНачисленийНПОбороты.Район КАК Район,
		|	бестОбъемНачисленийНПОбороты.Организация КАК Организация,
		|	бестОбъемНачисленийНПОбороты.ОбъектРасчета КАК ОбъектРасчета,
		|	бестОбъемНачисленийНПОбороты.Поставщик КАК Поставщик,
		|	бестОбъемНачисленийНПОбороты.ТарифнаяЗона КАК ТарифнаяЗона,
		|	бестОбъемНачисленийНПОбороты.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ НачисленияОбороты
		|ИЗ
		|	РегистрНакопления.бестОбъемНачисленийНП.Обороты(
		|			&НачалоПериодаРасчета,
		|			&КонецПериодаРасчета,
		|			Регистратор,
		|			Организация = &Организация
		|				И Район = &Район
		|				И МКД = &МКД
		|				И Договор = &Договор) КАК бестОбъемНачисленийНПОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(НачисленияОбороты.ОбъемУслугиОборот) КАК ОбъемУслугиОборот,
		|	НачисленияОбороты.Услуга КАК Услуга,
		|	НачисленияОбороты.Договор КАК Договор,
		|	НачисленияОбороты.Район КАК Район,
		|	НачисленияОбороты.Организация КАК Организация,
		|	бестТарифныеКатегорииНПСрезПоследних.ТарифнаяКатегория КАК ТарифнаяКатегория,
		|	НачисленияОбороты.Поставщик КАК Поставщик,
		|	НачисленияОбороты.ТарифнаяЗона КАК ТарифнаяЗона,
		|	НачисленияОбороты.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ОбъемыСТарифнойКатегорией
		|ИЗ
		|	НачисленияОбороты КАК НачисленияОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестТарифныеКатегорииНП.СрезПоследних(
		|				&КонецПериодаРасчета,
		|				Организация = &Организация
		|					И Район = &Район) КАК бестТарифныеКатегорииНПСрезПоследних
		|		ПО НачисленияОбороты.Услуга = бестТарифныеКатегорииНПСрезПоследних.Услуга
		|			И НачисленияОбороты.Договор = бестТарифныеКатегорииНПСрезПоследних.Договор
		|			И НачисленияОбороты.Район = бестТарифныеКатегорииНПСрезПоследних.Район
		|			И НачисленияОбороты.Организация = бестТарифныеКатегорииНПСрезПоследних.Организация
		|			И НачисленияОбороты.ОбъектРасчета = бестТарифныеКатегорииНПСрезПоследних.ОбъектРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияОбороты.Услуга,
		|	НачисленияОбороты.Договор,
		|	НачисленияОбороты.Район,
		|	НачисленияОбороты.Организация,
		|	бестТарифныеКатегорииНПСрезПоследних.ТарифнаяКатегория,
		|	НачисленияОбороты.Поставщик,
		|	НачисленияОбороты.ТарифнаяЗона,
		|	НачисленияОбороты.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	отэкОбъемСубсидийОбороты.ОбъемУслугиОборот КАК ОбъемУслугиОборот,
		|	отэкОбъемСубсидийОбороты.СуммаСубсидииОборот КАК СуммаСубсидииОборот,
		|	отэкОбъемСубсидийОбороты.Организация КАК Организация,
		|	отэкОбъемСубсидийОбороты.Район КАК Район,
		|	отэкОбъемСубсидийОбороты.Абонент КАК Абонент,
		|	отэкОбъемСубсидийОбороты.Услуга КАК Услуга,
		|	отэкОбъемСубсидийОбороты.ТарифнаяЗона КАК ТарифнаяЗона,
		|	отэкОбъемСубсидийОбороты.Поставщик КАК Поставщик,
		|	отэкОбъемСубсидийОбороты.Договор КАК Договор,
		|	отэкОбъемСубсидийОбороты.ГруппаПотребителей КАК ГруппаПотребителей,
		|	отэкОбъемСубсидийОбороты.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ Субсидии
		|ИЗ
		|	РегистрНакопления.отэкОбъемСубсидий.Обороты(
		|			&НачалоПериодаРасчета,
		|			&КонецПериодаРасчета,
		|			Регистратор,
		|			Организация = &Организация
		|				И Район = &Район
		|				И Договор <> ЗНАЧЕНИЕ(справочник.энргДоговорыКонтрагентов.пустаяссылка)
		|				И МКД = &МКД
		|				И Договор = &Договор) КАК отэкОбъемСубсидийОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъемыСТарифнойКатегорией.Услуга КАК Услуга,
		|	ОбъемыСТарифнойКатегорией.Договор КАК Договор,
		|	ОбъемыСТарифнойКатегорией.Район КАК Район,
		|	ОбъемыСТарифнойКатегорией.Организация КАК Организация,
		|	СУММА(ВЫБОР
		|			КОГДА энргЗначенияТарифовСрезПоследних.НДСВнутри
		|				ТОГДА ОбъемыСТарифнойКатегорией.ОбъемУслугиОборот * энргЗначенияТарифовСрезПоследних.Значение - ОбъемыСТарифнойКатегорией.ОбъемУслугиОборот * энргЗначенияТарифовСрезПоследних.Значение * энргЗначенияТарифовСрезПоследних.СтавкаНДС / (100 + энргЗначенияТарифовСрезПоследних.СтавкаНДС)
		|			ИНАЧЕ ОбъемыСТарифнойКатегорией.ОбъемУслугиОборот * энргЗначенияТарифовСрезПоследних.Значение
		|		КОНЕЦ) КАК Сумма,
		|	ОбъемыСТарифнойКатегорией.Регистратор КАК ДокументНачисления,
		|	ВЫБОР
		|		КОГДА энргЗначенияТарифовСрезПоследних.НДСВнутри
		|			ТОГДА ОбъемыСТарифнойКатегорией.ОбъемУслугиОборот * энргЗначенияТарифовСрезПоследних.Значение * энргЗначенияТарифовСрезПоследних.СтавкаНДС / (100 + энргЗначенияТарифовСрезПоследних.СтавкаНДС)
		|		ИНАЧЕ ОбъемыСТарифнойКатегорией.ОбъемУслугиОборот * энргЗначенияТарифовСрезПоследних.Значение * энргЗначенияТарифовСрезПоследних.СтавкаНДС / 100
		|	КОНЕЦ КАК СуммаНДС,
		|	энргЗначенияТарифовСрезПоследних.Значение КАК ЗначениеТарифа,
		|	энргЗначенияТарифовСрезПоследних.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ОбъемыСТарифнойКатегорией.ОбъемУслугиОборот) КАК ОбъемУслуги
		|ИЗ
		|	ОбъемыСТарифнойКатегорией КАК ОбъемыСТарифнойКатегорией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргЗначенияТарифов.СрезПоследних(
		|				&НачалоПериодаРасчета,
		|				Организация = &Организация
		|					И Район = &Район) КАК энргЗначенияТарифовСрезПоследних
		|		ПО ОбъемыСТарифнойКатегорией.Услуга = энргЗначенияТарифовСрезПоследних.Услуга
		|			И ОбъемыСТарифнойКатегорией.Организация = энргЗначенияТарифовСрезПоследних.Организация
		|			И ОбъемыСТарифнойКатегорией.Район = энргЗначенияТарифовСрезПоследних.Район
		|			И ОбъемыСТарифнойКатегорией.ТарифнаяКатегория = энргЗначенияТарифовСрезПоследних.ГруппаПотребителей
		|			И ОбъемыСТарифнойКатегорией.Поставщик = энргЗначенияТарифовСрезПоследних.Поставщик
		|			И ОбъемыСТарифнойКатегорией.ТарифнаяЗона = энргЗначенияТарифовСрезПоследних.ТарифнаяЗона
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъемыСТарифнойКатегорией.Услуга,
		|	ОбъемыСТарифнойКатегорией.Договор,
		|	ОбъемыСТарифнойКатегорией.Район,
		|	ОбъемыСТарифнойКатегорией.Организация,
		|	ОбъемыСТарифнойКатегорией.Регистратор,
		|	ВЫБОР
		|		КОГДА энргЗначенияТарифовСрезПоследних.НДСВнутри
		|			ТОГДА ОбъемыСТарифнойКатегорией.ОбъемУслугиОборот * энргЗначенияТарифовСрезПоследних.Значение * энргЗначенияТарифовСрезПоследних.СтавкаНДС / (100 + энргЗначенияТарифовСрезПоследних.СтавкаНДС)
		|		ИНАЧЕ ОбъемыСТарифнойКатегорией.ОбъемУслугиОборот * энргЗначенияТарифовСрезПоследних.Значение * энргЗначенияТарифовСрезПоследних.СтавкаНДС / 100
		|	КОНЕЦ,
		|	энргЗначенияТарифовСрезПоследних.Значение,
		|	энргЗначенияТарифовСрезПоследних.СтавкаНДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Субсидии.Услуга,
		|	Субсидии.Договор,
		|	Субсидии.Район,
		|	Субсидии.Организация,
		|	ВЫБОР
		|		КОГДА энргЗначенияТарифовСрезПоследних.НДСВнутри
		|			ТОГДА Субсидии.СуммаСубсидииОборот - Субсидии.СуммаСубсидииОборот * энргЗначенияТарифовСрезПоследних.СтавкаНДС / (100 + энргЗначенияТарифовСрезПоследних.СтавкаНДС)
		|		ИНАЧЕ Субсидии.СуммаСубсидииОборот
		|	КОНЕЦ,
		|	Субсидии.Регистратор,
		|	ВЫБОР
		|		КОГДА энргЗначенияТарифовСрезПоследних.НДСВнутри
		|			ТОГДА Субсидии.СуммаСубсидииОборот * энргЗначенияТарифовСрезПоследних.СтавкаНДС / (100 + энргЗначенияТарифовСрезПоследних.СтавкаНДС)
		|		ИНАЧЕ Субсидии.СуммаСубсидииОборот * энргЗначенияТарифовСрезПоследних.СтавкаНДС / 100
		|	КОНЕЦ,
		|	отэкЗначенияСубсидийСрезПоследних.Значение,
		|	энргЗначенияТарифовСрезПоследних.СтавкаНДС,
		|	Субсидии.ОбъемУслугиОборот
		|ИЗ
		|	РегистрСведений.энргЗначенияТарифов.СрезПоследних(
		|			&НачалоПериодаРасчета,
		|			Организация = &Организация
		|				И Район = &Район) КАК энргЗначенияТарифовСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Субсидии КАК Субсидии
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.отэкЗначенияСубсидий.СрезПоследних(
		|					&КонецПериодаРасчета,
		|					Организация = &Организация
		|						И Район = &Район) КАК отэкЗначенияСубсидийСрезПоследних
		|			ПО (отэкЗначенияСубсидийСрезПоследних.Организация = Субсидии.Организация)
		|				И (отэкЗначенияСубсидийСрезПоследних.Район = Субсидии.Район)
		|				И (отэкЗначенияСубсидийСрезПоследних.Услуга = Субсидии.Услуга)
		|				И (отэкЗначенияСубсидийСрезПоследних.ГруппаПотребителей = Субсидии.ГруппаПотребителей)
		|				И (отэкЗначенияСубсидийСрезПоследних.Поставщик = Субсидии.Поставщик)
		|				И (отэкЗначенияСубсидийСрезПоследних.ТарифнаяЗона = Субсидии.ТарифнаяЗона)
		|		ПО энргЗначенияТарифовСрезПоследних.Организация = Субсидии.Организация
		|			И энргЗначенияТарифовСрезПоследних.Район = Субсидии.Район
		|			И энргЗначенияТарифовСрезПоследних.ГруппаПотребителей = Субсидии.ГруппаПотребителей
		|			И энргЗначенияТарифовСрезПоследних.Услуга = Субсидии.Услуга
		|			И энргЗначенияТарифовСрезПоследних.Поставщик = Субсидии.Поставщик
		|			И энргЗначенияТарифовСрезПоследних.ТарифнаяЗона = Субсидии.ТарифнаяЗона
		|ИТОГИ ПО
		|	ДокументНачисления";
	
	Запрос.УстановитьПараметр("КонецПериодаРасчета", КонецПериодаРасчета);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета", НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Район", Район);
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Договор = &Договор","");
	Иначе
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;
	
	
	Если ИсключаяОтдельностоящие тогда
		Текст 		= СтрЗаменить(Текст,"И МКД = &МКД","И МКД <> &МКД");
	Иначе
		Если МКД = Неопределено Тогда 
			Текст 		= СтрЗаменить(Текст,"И МКД = &МКД","");
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("МКД", МКД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНачисление = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНачисление.Следующий() Цикл
		
		
		Набор  	= РегистрыНакопления.бестВзаиморасчётыПоУслугамЮрЛица.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.установить(ВыборкаНачисление.ДокументНачисления);
		Набор.Прочитать();
		Набор.Очистить();
	
		ВыборкаДетальныеЗаписи = ВыборкаНачисление.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = Набор.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Запись,ВыборкаДетальныеЗаписи);
			Запись.ПериодНачисления = ПериодНачисления;
			Запись.Период = КонецПериодаРасчета;
			Запись.ПериодРасчета = ПериодНачисления;
		КонецЦикла;
		Набор.Записать();
	КонецЦикла;

	//////////////////////////////////
	//////////////////////////////////
	КонецПроцедуры
#КонецОбласти

#Область ВосстановитьПоследовательностьСтабильныеПериодыНП
Процедура ОчиститьНаборыЗаписей(Организация, ПериодНачисления,Район,МассивДоговоров)
	Для каждого Договор из МассивДоговоров Цикл
		НаборСтабильныеПериоды					= РегистрыСведений.бестСтабильныеПериодыНП.СоздатьНаборЗаписей();
		НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
		НаборСтабильныеПериоды.Отбор.Организация.установить(Организация);
		НаборСтабильныеПериоды.Отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборСтабильныеПериоды.Отбор.Район.установить(Район);
		//Если Не Договор = Неопределено  Тогда
		НаборСтабильныеПериоды.Отбор.Договор.установить(Договор);
		//КонецЕсли;
		//Если Не МКД = Неопределено  Тогда
		//	НаборСтабильныеПериоды.Отбор.МКД.установить(МКД);
		//КонецЕсли;
		НаборСтабильныеПериоды.записать();
		
		НаборСтабильныеПериоды					= РегистрыСведений.бестСтабильныеПериодыШкалыНП.СоздатьНаборЗаписей();
		НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
		НаборСтабильныеПериоды.Отбор.Организация.установить(Организация);
		НаборСтабильныеПериоды.Отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборСтабильныеПериоды.Отбор.Район.установить(Район);
		//Если Не Договор = Неопределено  Тогда
		НаборСтабильныеПериоды.Отбор.Договор.установить(Договор);
		//КонецЕсли;
		НаборСтабильныеПериоды.записать();
		
		НаборСтабильныеПериоды					= РегистрыСведений.бестСтабильныеПериодыПриборыУзловУчета.СоздатьНаборЗаписей();
		НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
		НаборСтабильныеПериоды.Отбор.Организация.установить(Организация);
		НаборСтабильныеПериоды.Отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборСтабильныеПериоды.Отбор.Район.установить(Район);
		//Если Не Договор = Неопределено  Тогда
		НаборСтабильныеПериоды.Отбор.Договор.установить(Договор);
		//КонецЕсли;
		НаборСтабильныеПериоды.записать();
		
		НаборМаксимальныеПоказанияСрез					= РегистрыСведений.бестМаксимальныеПоказанияСрезНП.СоздатьНаборЗаписей();
		НаборМаксимальныеПоказанияСрез.Отбор.Организация.установить(Организация);
		НаборМаксимальныеПоказанияСрез.Отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборМаксимальныеПоказанияСрез.Отбор.Район.установить(Район);
		//Если Не Договор = Неопределено  Тогда
		НаборМаксимальныеПоказанияСрез.Отбор.Договор.установить(Договор);
		//КонецЕсли;
		НаборМаксимальныеПоказанияСрез.записать();
		
		НаборНомерСтрокСтабПериода 				= РегистрыСведений.бестНомераСтрокСтабильногоПериодаНП.СоздатьНаборЗаписей();
		НаборНомерСтрокСтабПериода.Отбор.Организация.установить(Организация);
		НаборНомерСтрокСтабПериода.Отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборНомерСтрокСтабПериода.Отбор.Район.установить(Район);
		//Если Не Договор = Неопределено  Тогда
		НаборНомерСтрокСтабПериода.Отбор.Договор.установить(Договор);
		//КонецЕсли;
		//Если Не МКД = Неопределено  Тогда
		//	НаборНомерСтрокСтабПериода.Отбор.МКД.установить(МКД);
		//КонецЕсли;
		НаборНомерСтрокСтабПериода.Записать();
		
		НаборОтложенныхДвижений  				= РегистрыСведений.бестОтложенныеДвиженияДокументовНП.СоздатьНаборЗаписей();
		НаборОтложенныхДвижений.Отбор.Организация.установить(Организация);
		НаборОтложенныхДвижений.Отбор.ПериодНачисления.установить(ДобавитьМесяц(ПериодНачисления,-1));
		НаборОтложенныхДвижений.Отбор.Район.установить(Район);
		//Если Не Договор = Неопределено  Тогда
		НаборОтложенныхДвижений.Отбор.Договор.установить(Договор);
		//КонецЕсли;
		НаборОтложенныхДвижений.Отбор.РазделЗаписи.установить(Перечисления.энргРазделыЗаписи.СтабильныеПериодыНП);
		НаборОтложенныхДвижений.Записать();
		
	КонецЦикла;
КонецПроцедуры


Функция ПровестиПоСтабильнымПериодамНП(Документы,Ошибки,НачалоПериодаРасчета)
	
	для Каждого ОписаниеДокумента из Документы цикл
		Организация                             = ОписаниеДокумента.Организация;
		Район  									= ОписаниеДокумента.Район;
		Договор  								= ОписаниеДокумента.Договор;
		МоментВремени  							= ОписаниеДокумента.МоментВремени;
		Документ 								= ОписаниеДокумента.Документ;		
		Дата 									= ОписаниеДокумента.Дата;
		ПериодРегистрации						= ОписаниеДокумента.ПериодРегистрации;
		
		НаборСтабильныеПериоды  				= РегистрыСведений.бестСтабильныеПериодыНП.СоздатьНаборЗаписей();
		НаборСтабильныеПериодыШкалы				= РегистрыСведений.бестСтабильныеПериодыШкалыНП.СоздатьНаборЗаписей();
		НаборСтабильныеПериодыПриборыУзловУчета	= РегистрыСведений.бестСтабильныеПериодыПриборыУзловУчета.СоздатьНаборЗаписей();

		НаборПоследнихНомеров           		= РегистрыСведений.бестНомераСтрокСтабильногоПериодаНП.СоздатьНаборЗаписей();
		
		ПараметрыЗапроса					= Новый Структура("Организация,Район,Договор,ПериодРегистрации",Организация,Район,Договор,Макс(ПериодРегистрации,НачалоПериодаРасчета));
		Параметры 							= Новый Структура("ПараметрыЗапроса,Отказ,МоментВремени,РазрешенПустойНабор,
		|ссылка,ДатаДок,ПериодНачисления,
		|НаборСтабильныеПериоды,НаборСтабильныеПериодыШкалы,НаборСтабильныеПериодыПриборыУзловУчета,НаборПоследнихНомеров",
		ПараметрыЗапроса,Ложь,МоментВремени,Ложь,
		Документ,Дата,ОписаниеДокумента.ПериодНачисления,
		НаборСтабильныеПериоды,НаборСтабильныеПериодыШкалы,НаборСтабильныеПериодыПриборыУзловУчета,НаборПоследнихНомеров);
		
		Попытка
			бестРаботаСПериодомДействияНП.ПровестиПоСтабильнымПериодамНП(Документ,Параметры);
		Исключение
			ИнформацияОбОшибке  	= ИнформацияОбОшибке();
			Ошибки 					= ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"");
			ТекстСообщения 			= НСтр("ru = 'Не удалось восстановить последовательности документов по договору %1: %2'");
			Ошибки 					= Ошибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Договор,Документ);
			Ошибки 					= Ошибки + Символы.ПС + "По причине: " + ИнформацияОбОшибке.Причина.Описание;			
			Возврат истина;
		КонецПопытки;
		
		
		Если не Параметры.РазрешенПустойНабор и НаборСтабильныеПериоды.Количество() =0 тогда
			Ошибки 					= ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"");
			ТекстСообщения 			= НСтр("ru = 'Не удалось восстановить последовательности документов по договору %1: %2 - причина: Обнаружен пустой набор записей'");
			Ошибки 					= Ошибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Договор,Документ);
			Возврат истина;
		КонецЕсли; 		
		
		Попытка		
			НаборПоследнихНомеров.Записать(Ложь);
			НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
			НаборСтабильныеПериоды.Записать(Ложь);
			
			НаборСтабильныеПериодыШкалы.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
			НаборСтабильныеПериодыШкалы.Записать(Ложь);
			
			НаборСтабильныеПериодыПриборыУзловУчета.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
			НаборСтабильныеПериодыПриборыУзловУчета.Записать(Ложь);
		Исключение
			ИнформацияОбОшибке  	= ИнформацияОбОшибке();
			Ошибки 					= ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"");
			ТекстСообщения 			= НСтр("ru = 'Не удалось восстановить последовательности документов по договору %1: %2'");
			Ошибки 					= Ошибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Договор,Документ);
			Ошибки 					= Ошибки + Символы.ПС + "По причине: " + ИнформацияОбОшибке.Причина.Описание; 			
			Возврат истина;
		КонецПопытки;				
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция РезультатЗапросаСтабильныеПериодыНП(Отбор) 
	Запрос  = Новый Запрос;
	Текст ="ВЫБРАТЬ
	       |	бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления КАК ПериодНачисления,
	       |	бестСтабильныеПериодыПоследовательностьНП.Район КАК Район,
	       |	МИНИМУМ(бестСтабильныеПериодыПоследовательностьНП.ПериодРегистрации) КАК ПериодРегистрации,
	       |	бестСтабильныеПериодыПоследовательностьНП.Организация КАК Организация,
	       |	бестСтабильныеПериодыПоследовательностьНП.Договор КАК Договор
	       |ПОМЕСТИТЬ МинПериодРегистрации
	       |ИЗ
	       |	РегистрСведений.бестСтабильныеПериодыПоследовательностьНП КАК бестСтабильныеПериодыПоследовательностьНП
	       |ГДЕ
	       |	бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления = &ПериодНачисления
	       |	И бестСтабильныеПериодыПоследовательностьНП.Район = &Район
	       |	И бестСтабильныеПериодыПоследовательностьНП.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	       |	И бестСтабильныеПериодыПоследовательностьНП.Организация = &Организация
	       |	И бестСтабильныеПериодыПоследовательностьНП.Договор = &Договор
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления,
	       |	бестСтабильныеПериодыПоследовательностьНП.Район,
	       |	бестСтабильныеПериодыПоследовательностьНП.Организация,
	       |	бестСтабильныеПериодыПоследовательностьНП.Договор
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления КАК ПериодНачисления,
	       |	бестСтабильныеПериодыПоследовательностьНП.Район КАК Район,
	       |	бестСтабильныеПериодыПоследовательностьНП.ПериодРегистрации КАК ПериодРегистрации,
	       |	МИНИМУМ(бестСтабильныеПериодыПоследовательностьНП.ДатаРегистратора) КАК ДатаРегистратора,
	       |	бестСтабильныеПериодыПоследовательностьНП.Договор КАК Договор,
	       |	бестСтабильныеПериодыПоследовательностьНП.Организация КАК Организация
	       |ПОМЕСТИТЬ МинимальныйПериод
	       |ИЗ
	       |	МинПериодРегистрации КАК МинПериодРегистрации
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестСтабильныеПериодыПоследовательностьНП КАК бестСтабильныеПериодыПоследовательностьНП
	       |		ПО МинПериодРегистрации.ПериодНачисления = бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления
	       |			И МинПериодРегистрации.Район = бестСтабильныеПериодыПоследовательностьНП.Район
	       |			И МинПериодРегистрации.ПериодРегистрации = бестСтабильныеПериодыПоследовательностьНП.ПериодРегистрации
	       |			И (бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления = &ПериодНачисления)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Район = &Район)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	       |			И МинПериодРегистрации.Организация = бестСтабильныеПериодыПоследовательностьНП.Организация
	       |			И МинПериодРегистрации.Договор = бестСтабильныеПериодыПоследовательностьНП.Договор
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Договор = &Договор)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Организация = &Организация)
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления,
	       |	бестСтабильныеПериодыПоследовательностьНП.Район,
	       |	бестСтабильныеПериодыПоследовательностьНП.ПериодРегистрации,
	       |	бестСтабильныеПериодыПоследовательностьНП.Договор,
	       |	бестСтабильныеПериодыПоследовательностьНП.Организация
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	МинимальныйПериод.ПериодНачисления КАК ПериодНачисления,
	       |	МинимальныйПериод.Район КАК Район,
	       |	МинимальныйПериод.ПериодРегистрации КАК ПериодРегистрации,
	       |	МинимальныйПериод.ДатаРегистратора КАК ДатаРегистратора,
	       |	МИНИМУМ(бестСтабильныеПериодыПоследовательностьНП.ДокРегистратор) КАК ДокРегистратор,
	       |	МинимальныйПериод.Договор КАК Договор,
	       |	МинимальныйПериод.Организация КАК Организация
	       |ПОМЕСТИТЬ МинимальныйРегистратор
	       |ИЗ
	       |	МинимальныйПериод КАК МинимальныйПериод
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестСтабильныеПериодыПоследовательностьНП КАК бестСтабильныеПериодыПоследовательностьНП
	       |		ПО МинимальныйПериод.ПериодНачисления = бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления
	       |			И МинимальныйПериод.Район = бестСтабильныеПериодыПоследовательностьНП.Район
	       |			И МинимальныйПериод.ПериодРегистрации = бестСтабильныеПериодыПоследовательностьНП.ПериодРегистрации
	       |			И (бестСтабильныеПериодыПоследовательностьНП.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	       |			И МинимальныйПериод.ДатаРегистратора = бестСтабильныеПериодыПоследовательностьНП.ДатаРегистратора
	       |			И (бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления = &ПериодНачисления)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Район = &Район)
	       |			И МинимальныйПериод.Организация = бестСтабильныеПериодыПоследовательностьНП.Организация
	       |			И МинимальныйПериод.Договор = бестСтабильныеПериодыПоследовательностьНП.Договор
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Договор = &Договор)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Организация = &Организация)
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	МинимальныйПериод.ПериодНачисления,
	       |	МинимальныйПериод.Район,
	       |	МинимальныйПериод.ПериодРегистрации,
	       |	МинимальныйПериод.ДатаРегистратора,
	       |	МинимальныйПериод.Договор,
	       |	МинимальныйПериод.Организация
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ РАЗЛИЧНЫЕ
	       |	бестАктивностьОбъектовРасчетаСрезПоследних.ОбъектРасчета КАК ОбъектРасчета,
	       |	бестАктивностьОбъектовРасчетаСрезПоследних.Организация КАК Организация,
	       |	бестАктивностьОбъектовРасчетаСрезПоследних.Район КАК Район
	       |ПОМЕСТИТЬ ОбъектыРасчетаДоговора
	       |ИЗ
	       |	РегистрСведений.бестАктивностьОбъектовРасчета.СрезПоследних(
	       |			&КонецПериодаРасчета,
	       |			Организация = &Организация
	       |				И Район = &Район) КАК бестАктивностьОбъектовРасчетаСрезПоследних
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бестОбъектыРасчета КАК бестОбъектыРасчета
	       |		ПО бестАктивностьОбъектовРасчетаСрезПоследних.ОбъектРасчета = бестОбъектыРасчета.Ссылка
	       |			И (бестОбъектыРасчета.МКД = &МКД)
	       |ГДЕ
	       |	бестАктивностьОбъектовРасчетаСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.энргСостояниеТочекУчета.Включена)
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ РАЗЛИЧНЫЕ
	       |	ОбъектыРасчетаДоговора.Организация КАК Организация,
	       |	ОбъектыРасчетаДоговора.Район КАК Район,
	       |	бестВладельцыОбъектовРасчетаСрезПоследних.Договор КАК Договор
	       |ПОМЕСТИТЬ ОтборМКД
	       |ИЗ
	       |	РегистрСведений.бестВладельцыОбъектовРасчета.СрезПоследних(
	       |			&НачалоПериодаРасчета,
	       |			Организация = &Организация
	       |				И Район = &Район
	       |				И Договор = &Договор) КАК бестВладельцыОбъектовРасчетаСрезПоследних
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетаДоговора КАК ОбъектыРасчетаДоговора
	       |		ПО бестВладельцыОбъектовРасчетаСрезПоследних.ОбъектРасчета = ОбъектыРасчетаДоговора.ОбъектРасчета
	       |			И (ОбъектыРасчетаДоговора.Организация = бестВладельцыОбъектовРасчетаСрезПоследних.Организация)
	       |			И (ОбъектыРасчетаДоговора.Район = бестВладельцыОбъектовРасчетаСрезПоследних.Район)
	       |
	       |ОБЪЕДИНИТЬ
	       |
	       |ВЫБРАТЬ РАЗЛИЧНЫЕ
	       |	ОбъектыРасчетаДоговора.Организация,
	       |	ОбъектыРасчетаДоговора.Район,
	       |	бестВладельцыОбъектовРасчета.Договор
	       |ИЗ
	       |	ОбъектыРасчетаДоговора КАК ОбъектыРасчетаДоговора
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестВладельцыОбъектовРасчета КАК бестВладельцыОбъектовРасчета
	       |		ПО ОбъектыРасчетаДоговора.ОбъектРасчета = бестВладельцыОбъектовРасчета.ОбъектРасчета
	       |			И ОбъектыРасчетаДоговора.Организация = бестВладельцыОбъектовРасчета.Организация
	       |			И ОбъектыРасчетаДоговора.Район = бестВладельцыОбъектовРасчета.Район
	       |ГДЕ
	       |	бестВладельцыОбъектовРасчета.Период МЕЖДУ &НачалоПериодаРасчета И &КонецПериодаРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	МинимальныйРегистратор.ПериодНачисления КАК ПериодНачисления,
	       |	МинимальныйРегистратор.Район КАК Район,
	       |	бестСтабильныеПериодыПоследовательностьНП.ПериодРегистрации КАК ПериодРегистрации,
	       |	бестСтабильныеПериодыПоследовательностьНП.СостояниеПроведения КАК СостояниеПроведения,
	       |	бестСтабильныеПериодыПоследовательностьНП.ДатаРегистратора КАК ДатаРегистратора,
	       |	бестСтабильныеПериодыПоследовательностьНП.ДокРегистратор КАК ДокРегистратор,
	       |	МинимальныйРегистратор.Договор КАК Договор,
	       |	МинимальныйРегистратор.Организация КАК Организация
	       |ИЗ
	       |	МинимальныйРегистратор КАК МинимальныйРегистратор
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестСтабильныеПериодыПоследовательностьНП КАК бестСтабильныеПериодыПоследовательностьНП
	       |		ПО МинимальныйРегистратор.ПериодНачисления = бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления
	       |			И МинимальныйРегистратор.Район = бестСтабильныеПериодыПоследовательностьНП.Район
	       |			И (ВЫБОР
	       |				КОГДА МинимальныйРегистратор.ПериодРегистрации < бестСтабильныеПериодыПоследовательностьНП.ПериодРегистрации
	       |					ТОГДА ИСТИНА
	       |				КОГДА МинимальныйРегистратор.ПериодРегистрации = бестСтабильныеПериодыПоследовательностьНП.ПериодРегистрации
	       |					ТОГДА ВЫБОР
	       |							КОГДА МинимальныйРегистратор.ДатаРегистратора < бестСтабильныеПериодыПоследовательностьНП.ДатаРегистратора
	       |								ТОГДА ИСТИНА
	       |							КОГДА МинимальныйРегистратор.ДатаРегистратора = бестСтабильныеПериодыПоследовательностьНП.ДатаРегистратора
	       |								ТОГДА МинимальныйРегистратор.ДокРегистратор <= бестСтабильныеПериодыПоследовательностьНП.ДокРегистратор
	       |							ИНАЧЕ ЛОЖЬ
	       |						КОНЕЦ
	       |				ИНАЧЕ ЛОЖЬ
	       |			КОНЕЦ)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.ПериодНачисления = &ПериодНачисления)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Район = &Район)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Договор = &Договор)
	       |			И (бестСтабильныеПериодыПоследовательностьНП.Организация = &Организация)
	       |			И МинимальныйРегистратор.Договор = бестСтабильныеПериодыПоследовательностьНП.Договор
	       |			И МинимальныйРегистратор.Организация = бестСтабильныеПериодыПоследовательностьНП.Организация
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборМКД КАК ОтборМКД
	       |		ПО МинимальныйРегистратор.Организация = ОтборМКД.Организация
	       |			И МинимальныйРегистратор.Район = ОтборМКД.Район
	       |			И МинимальныйРегистратор.Договор = ОтборМКД.Договор
	       |
	       |УПОРЯДОЧИТЬ ПО
	       |	ПериодНачисления,
	       |	Район,
	       |	ПериодРегистрации,
	       |	ДатаРегистратора,
	       |	ДокРегистратор";   	       
		   
		   Если не Отбор.свойство("Договор") тогда
			   Текст = СтрЗаменить(Текст,"И бестСтабильныеПериодыПоследовательностьНП.Договор = &Договор","");
			   Текст = СтрЗаменить(Текст,"И (бестСтабильныеПериодыПоследовательностьНП.Договор = &Договор)","");
			   Текст = СтрЗаменить(Текст,"И Договор = &Договор",""); 
		   КонецЕсли;
		   
		   Если Отбор.Отдельностоящие = Ложь И Не Отбор.свойство("МКД") тогда
			   Текст = СтрЗаменить(Текст,"И (бестОбъектыРасчета.МКД = &МКД)","");	
		   КонецЕсли;


		
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Организация",		 Отбор.Организация);
	Запрос.УстановитьПараметр("Район",				 Отбор.район);
	Запрос.УстановитьПараметр("ПериодНачисления",	 Отбор.ПериодНачисления);
	Запрос.УстановитьПараметр("КонецПериодаРасчета", Отбор.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",Отбор.НачалоПериодаРасчета);
	
	Если Отбор.Отдельностоящие Тогда
		Запрос.УстановитьПараметр("МКД",			Справочники.энргСтроения.ПустаяСсылка());
	Иначе
		Если Отбор.свойство("МКД") тогда
			Запрос.УстановитьПараметр("МКД",		Отбор.МКД);
		КонецЕсли;
	КонецЕсли;
	
		
	Если Отбор.свойство("Договор") тогда
		Запрос.УстановитьПараметр("Договор",		Отбор.Договор);
	КонецЕсли;
	
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти


#Область ВосстановитьПоследовательностьПоказанияПУНП

Процедура ОбновитьДанныеВДокументеНП(ПериодНачисления,ДокРегистратор,ПараметрыОперации)
	
	ПоказанияПриняты 									= Перечисления.энргСостояниеПоказаний.Приняты;
	
	ДокОбъект  											= ДокРегистратор.получитьОбъект();
	ДокОбъект.ДополнительныеСвойства.вставить("ВосстановлениеПоследовательности",Истина);
	
	Если ЗначениеЗаполнено(ПараметрыОперации.ИмяТабЧасти) тогда
		ИмяТЧ 											= ПараметрыОперации.ИмяТабЧасти;
	иначе
		ИмяТЧ 											= ИмяТабличнойЧастиПоказанийНП(ДокРегистратор);
	КонецЕсли;
	
	тчТочкиУчета 										= ДокОбъект["ТочкиУчета"];
	тчШкалыПриборов 									= ДокОбъект["ШкалыПриборовУчета"];
	тчПоказания 										= ДокОбъект["ПоказанияПриборовУчета"];
	
	Если ПараметрыОперации.НомерСтрокиТЧ > 0 тогда
		СтрокаПоказаний									= тчПоказания[ПараметрыОперации.НомерСтрокиТЧ-1];
		СтрокиШкал										= тчШкалыПриборов.НайтиСтроки(Новый Структура("IDСтроки", СтрокаПоказаний.IDСтроки));
		Если СтрокиШкал.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
		КонецЕсли;		
		СтрокаШкалы 									= СтрокиШкал[0];
		СтрокиТочки										= тчТочкиУчета.НайтиСтроки(Новый Структура("IDСтроки", СтрокаШкалы.IDСтрокиТочкиУчета));
		Если СтрокиТочки.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
		КонецЕсли;
		СтрокаТочки 									= СтрокиТочки[0];
	иначе		
		СтрокиТочки		 								= тчТочкиУчета.найтиСтроки(Новый Структура("ПриборУчета",ПараметрыОперации.ПриборУчета));
		Если СтрокиТочки.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для прибора учета "   +  ПараметрыОперации.ПриборУчета + " найдено более одной строки");
		КонецЕсли;		
		СтрокаТочки  									= СтрокиТочки[0];
		
		СтрокиШкал 										= тчШкалыПриборов.найтиСтроки(Новый Структура("IDСтрокиТочкиУчета, Шкала",СтрокаТочки.IDСтроки, ПараметрыОперации.Шкала));
		Если СтрокиШкал.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для шкалы - " + ПараметрыОперации.Шкала + " прибора учета "   +  ПараметрыОперации.ПриборУчета + " найдено более одной строки");
		КонецЕсли;
		
		СтрокаШкалы                                    	= СтрокиШкал[0];
		СтрокиПоказаний 								= тчПоказания.НайтиСтроки(Новый Структура("IDСтроки, ТарифнаяЗона", СтрокаШкалы.IDСтроки, ПараметрыОперации.ТарифнаяЗона));
		Если СтрокиПоказаний.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для шкалы - " + ПараметрыОперации.Шкала + " прибора учета " +  ПараметрыОперации.ПриборУчета + " и тарифной зоны " +  ПараметрыОперации.ТарифнаяЗона  + " найдено более одной строки");
		КонецЕсли;
		
		СтрокаПоказаний 								= СтрокиПоказаний[0];
		
	КонецЕсли;
	
	ДанныеСреднегоОбъема 								= ПараметрыОперации.ДанныеСреднегоОбъема;
	
	Если СтрокаТочки = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета] = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли  ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала] = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала][ПараметрыОперации.ТарифнаяЗона] = Неопределено тогда
		СреднийОбъема 									= 0;
	иначе
		СреднийОбъема 									= ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала][ПараметрыОперации.ТарифнаяЗона];
	КонецЕсли;
	
	ДанныеМаксимальногоПотребления 						= ПараметрыОперации.ДанныеМаксимальногоПотребления;
	Если ДанныеМаксимальногоПотребления[СтрокаТочки.Услуга] = Неопределено тогда
		МаксимальноВозможныйОбъемПотребления 			= 1000;
	иначе 
		СтрокаСоотвествия 								= ДанныеМаксимальногоПотребления[СтрокаТочки.Услуга];
		МаксимальноВозможныйОбъемПотребления 			= СтрокаСоотвествия.ПовышающийКоэффициент * СтрокаСоотвествия.МаксимальноеПотребления;	
	КонецЕсли;
	
	ДанныеСтроки 										= бестРаботаСПоказаниямиПриборовУчетаНПКлиентСервер.ДанныеСтрокиПоказаний();
	
	ДанныеСтроки.ТекущиеПоказания	 					= СтрокаПоказаний.ТекущиеПоказания;
	ДанныеСтроки.Разница 								= СтрокаПоказаний.Разница;
	ДанныеСтроки.ПереворотИзмененПользователем 			= СтрокаПоказаний.ПереворотИзмененПользователем;
	ДанныеСтроки.СтатусИзмененПользователем 			= СтрокаПоказаний.СтатусИзмененПользователем;
	//ДанныеСтроки.Сумма				 					= СтрокаТЧ.Сумма;
	
	ДанныеСтроки.ПредыдущиеПоказания 					= ПараметрыОперации.ПредыдущиеМакс;
	ДанныеСтроки.ДатаПоследнихПоказаний 				= НачалоДня(ПараметрыОперации.ПериодПредыдущихМаксПок);
	ДанныеСтроки.СостояниеПоказаний 					= ПараметрыОперации.СостояниеПоказаний; 	
	ДанныеСтроки.СреднийОбъемПотребления 				= СреднийОбъема;
	ДанныеСтроки.МаксимальноВозможныеПоказания			= ПараметрыОперации.МаксимальноВозможныеПоказания;
	ДанныеСтроки.МаксимальноВозможныйОбъемПотребления	= МаксимальноВозможныйОбъемПотребления; 
	ДанныеСтроки.КоэффициентПУ							= ПараметрыОперации.КоэффициентПУ; 	
	ДанныеСтроки.Переворот 								= ПараметрыОперации.Переворот;  	
	//ДанныеСтроки.ЗначениеТарифа				 			= СтрокаТЧ.ЗначениеТарифа;		
	КонтрольныйСъем 									= ПараметрыОперации.КС;
	
	бестРаботаСПоказаниямиПриборовУчетаНПКлиентСервер.ПересчитатьСтрокуПриборовУчета(ДанныеСтроки,ПериодНачисления,КонтрольныйСъем);
	
	Если ДанныеСтрокиИзмененыНП(ДанныеСтроки,СтрокаПоказаний) тогда
		// Если что то изменилось в документе.
		ЗаполнитьЗначенияСвойств(СтрокаПоказаний,ДанныеСтроки);				
		ДокОбъект.ДополнительныеСвойства.вставить("ВосстановлениеПоследовательности",Истина);
		ДокОбъект.записать();
	КонецЕсли;
	
	Если ДанныеСтроки.СостояниеПоказаний <> ПараметрыОперации.СостояниеПоказаний или ДанныеСтроки.Переворот <> ПараметрыОперации.Переворот тогда
		// Если данные изменились записываем их.
		НаборПоказаний 								= РегистрыСведений.бестПоказанияПриборовУчетаНП.СоздатьНаборЗаписей();
		НаборПоказаний.Отбор.регистратор.установить(ДокРегистратор);
		НаборПоказаний.Прочитать();
		ТаблицаПоказаний  							= НаборПоказаний.Выгрузить();
		для Каждого стр из ТаблицаПоказаний цикл
			стр.активность 							= истина;
		КонецЦикла;   			
		НаборПоказаний.Очистить();
		НаборПоказаний.Записать();
		СтрокиПоказаний  							= ТаблицаПоказаний.НайтиСтроки(Новый Структура("Договор,ОбъектРасчета,ПриборУчета,ТарифнаяЗона,Разделитель",ПараметрыОперации.Договор,ПараметрыОперации.ОбъектРасчета,ПараметрыОперации.ПриборУчета,ПараметрыОперации.ТарифнаяЗона,ПараметрыОперации.Разделитель)); 
		Если СтрокиПоказаний.Количество() = 0 тогда 	
			// Движений по данному пу нету.	
			Если СтрокаПоказаний.ТекущиеПоказания > 0 тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не восстановлена последовательность в документе " + ДокРегистратор + " по прибору " + ПараметрыОперации.ПриборУчета);
			КонецЕсли;				
		иначеЕсли СтрокиПоказаний.Количество() > 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не восстановлена последовательность в документе " + ДокРегистратор + " по прибору " + ПараметрыОперации.ПриборУчета);
		иначе
			СтрокаПоказаний  						= СтрокиПоказаний[0];
			СтрокаПоказаний.Показание 				= ДанныеСтроки.ТекущиеПоказания;
			СтрокаПоказаний.Переворот 				= ДанныеСтроки.Переворот;
			СтрокаПоказаний.СостояниеПоказаний 		= ДанныеСтроки.СостояниеПоказаний;
		КонецЕсли;			
		
		// Записываем новый набор показаний.
		НаборПоказаний 								= РегистрыСведений.бестПоказанияПриборовУчетаНП.СоздатьНаборЗаписей();
		НаборПоказаний.Отбор.регистратор.установить(ДокРегистратор);
		НаборПоказаний.Загрузить(ТаблицаПоказаний);
		НаборПоказаний.Записать(Ложь);			
		ПараметрыОперации.СостояниеПоказаний 		= ДанныеСтроки.СостояниеПоказаний;
		ПараметрыОперации.Переворот 				= ДанныеСтроки.Переворот;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеСреднегоОбъемаНП(ВыборкаСреднийОбъем,ТекОбъект) 
	
	ТекТочкаУчета					= Неопределено;
	ТекШкала 						= Неопределено;
	СоотвествиеТочек 				= Новый Соответствие;
	СоответствиеЗоны 				= Неопределено;
	СоотвествиеШкал 				= Неопределено;
	Пока ВыборкаСреднийОбъем.ОбъектРасчета  = ТекОбъект цикл		
		Если ЗначениеЗаполнено(ВыборкаСреднийОбъем.Шкала) и ЗначениеЗаполнено(ВыборкаСреднийОбъем.ТарифнаяЗона) Тогда
			Если ТекШкала <> ВыборкаСреднийОбъем.Шкала Тогда
				Если ТекШкала <> Неопределено тогда
					СоотвествиеШкал.Вставить(ТекШкала,СоответствиеЗоны);
				КонецЕсли;
				СоотвествиеШкал		= Новый Соответствие;
				СоответствиеЗоны	= Новый Соответствие;
			КонецЕсли;
			
			Если ТекТочкаУчета <> ВыборкаСреднийОбъем.ТочкаУчета тогда
				Если ТекТочкаУчета <> Неопределено тогда
					СоотвествиеТочек.Вставить(ТекТочкаУчета,СоотвествиеШкал);
				КонецЕсли;
				СоотвествиеШкал		= Новый Соответствие;
				СоответствиеЗоны	= Новый Соответствие;
			КонецЕсли; 	
			
			СоответствиеЗоны.Вставить(ВыборкаСреднийОбъем.ТарифнаяЗона,ВыборкаСреднийОбъем.СреднееПотребление);
		КонецЕсли;
	
		Если не ВыборкаСреднийОбъем.следующий() тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	 	
	Если ТекШкала <> Неопределено тогда
		СоотвествиеШкал.Вставить(ТекШкала,СоответствиеЗоны);
	КонецЕсли;		
		
	Если ТекТочкаУчета <> Неопределено тогда
		СоотвествиеТочек.Вставить(ТекТочкаУчета,СоотвествиеШкал);
	КонецЕсли;	  
	
	Возврат СоотвествиеТочек;

КонецФункции

Функция РезультатСреднийОбъемПотребленияНП(МВТ,Отбор)
	
	Запрос 	= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =МВТ;
	Текст 	=
	"ВЫБРАТЬ
	|	бестСреднийОбъемПотребленияНП.Организация КАК Организация,
	|	бестСреднийОбъемПотребленияНП.ПериодНачисления КАК ПериодНачисления,
	|	бестСреднийОбъемПотребленияНП.Район КАК Район,
	|	бестСреднийОбъемПотребленияНП.МКД КАК МКД,
	|	бестСреднийОбъемПотребленияНП.ТочкаУчета КАК ТочкаУчета,
	|	бестСреднийОбъемПотребленияНП.Шкала КАК Шкала,
	|	бестСреднийОбъемПотребленияНП.ТарифнаяЗона КАК ТарифнаяЗона,
	|	бестСреднийОбъемПотребленияНП.Объем КАК Объем,
	|	бестСреднийОбъемПотребленияНП.Договор КАК Договор,
	|	бестСреднийОбъемПотребленияНП.ОбъектРасчета КАК ОбъектРасчета
	|ПОМЕСТИТЬ СреднийОбъем
	|ИЗ
	|	РегистрСведений.бестСреднийОбъемПотребленияНП КАК бестСреднийОбъемПотребленияНП
	|ГДЕ
	|	бестСреднийОбъемПотребленияНП.Организация = &Организация
	|	И бестСреднийОбъемПотребленияНП.ПериодНачисления = &ПериодНачисления
	|	И бестСреднийОбъемПотребленияНП.Район = &Район
	|	И бестСреднийОбъемПотребленияНП.Договор = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Граница.Организация КАК Организация,
	|	Граница.ПериодНачисления КАК ПериодНачисления,
	|	Граница.Район КАК Район,
	|	Граница.МКД КАК МКД,
	|	ЕСТЬNULL(СреднийОбъем.ТочкаУчета, ЗНАЧЕНИЕ(Справочник.энргТочкиУчета.ПустаяСсылка)) КАК ТочкаУчета,
	|	ЕСТЬNULL(СреднийОбъем.Шкала, ЗНАЧЕНИЕ(Справочник.энргШкалыПриборовУчета.ПустаяСсылка)) КАК Шкала,
	|	ЕСТЬNULL(СреднийОбъем.ТарифнаяЗона, ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка)) КАК ТарифнаяЗона,
	|	ЕСТЬNULL(СреднийОбъем.Объем, 0) КАК СреднееПотребление,
	|	СреднийОбъем.Договор КАК Договор,
	|	СреднийОбъем.ОбъектРасчета КАК ОбъектРасчета
	|ИЗ
	|	Граница КАК Граница
	|		ЛЕВОЕ СОЕДИНЕНИЕ СреднийОбъем КАК СреднийОбъем
	|		ПО (Граница.Организация = СреднийОбъем.Организация
	|				И Граница.ПериодНачисления = СреднийОбъем.ПериодНачисления
	|				И Граница.Район = СреднийОбъем.Район
	|				И Граница.Договор = СреднийОбъем.Договор
	|				И Граница.ОбъектРасчета = СреднийОбъем.ОбъектРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	Договор,
	|	ОбъектРасчета,
	|	Шкала,
	|	ТарифнаяЗона"; 
	
	Если не Отбор.свойство("Договор") тогда
		Текст 		= СтрЗаменить(Текст,"И бестСреднийОбъемПотребленияНП.Договор = &Договор","");
	иначе
		Запрос.УстановитьПараметр("Договор",			Отбор.Договор);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Район",				Отбор.район);
	Запрос.УстановитьПараметр("Организация",		Отбор.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",	Отбор.ПериодНачисления);
	
	Запрос.Текст 	= Текст;
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДанныеМаксимальногоПотребления(НачалоПериодаРасчета)
	МаксПотреб		 = Новый Соответствие;
	Запрос  		= Новый Запрос;
	Запрос.УстановитьПараметр("Период",КонецМесяца(НачалоПериодаРасчета)+1);
	Запрос.Текст 	="ВЫБРАТЬ
	|	энргМаксимальныеПоказателиПотребленияСрезПоследних.Услуга,
	|	энргМаксимальныеПоказателиПотребленияСрезПоследних.ТарифнаяЗона,
	|	энргМаксимальныеПоказателиПотребленияСрезПоследних.ПовышающийКоэффициент,
	|	энргМаксимальныеПоказателиПотребленияСрезПоследних.МаксимальноеПотребления
	|ИЗ
	|	РегистрСведений.энргМаксимальныеПоказателиПотребления.СрезПоследних(&Период, ) КАК энргМаксимальныеПоказателиПотребленияСрезПоследних";
	Результат  		= Запрос.Выполнить();
	Выборка  		= Результат.Выбрать();
	Пока Выборка.Следующий() цикл
		МаксПотреб.Вставить(Выборка.Услуга,Новый Структура("ПовышающийКоэффициент,МаксимальноеПотребления",Выборка.ПовышающийКоэффициент,Выборка.МаксимальноеПотребления));
	КонецЦикла;
	
	Возврат МаксПотреб;
КонецФункции

Функция ДанныеСтрокиИзмененыНП(Источник,Приемник)	
	
	для Каждого КлючЗначение из Источник цикл
		Если Источник[КлючЗначение.ключ] <> Приемник[КлючЗначение.ключ] тогда
			Возврат Истина;
			Прервать;				
		КонецЕсли;  		
	КонецЦикла; 	
	Возврат Ложь;
	
КонецФункции

Функция РезультатЗапросаПоказанияПУНП(МВТ,Отбор,НачалоПериодаРасчета) 
	
	Запрос  = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Текст ="ВЫБРАТЬ
	       |	бестПоказанияПУНППоследовательность.Организация КАК Организация,
	       |	бестПоказанияПУНППоследовательность.ПериодНачисления КАК ПериодНачисления,
	       |	бестПоказанияПУНППоследовательность.Район КАК Район,
	       |	бестПоказанияПУНППоследовательность.МКД КАК МКД,
	       |	бестПоказанияПУНППоследовательность.ПриборУчета КАК ПриборУчета,
	       |	МИНИМУМ(бестПоказанияПУНППоследовательность.ПериодРегистрации) КАК ПериодРегистрации,
	       |	бестПоказанияПУНППоследовательность.Договор КАК Договор,
	       |	бестПоказанияПУНППоследовательность.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ МинимальныйПериод
	       |ИЗ
	       |	РегистрСведений.бестПоказанияПУНППоследовательность КАК бестПоказанияПУНППоследовательность
	       |ГДЕ
	       |	бестПоказанияПУНППоследовательность.Организация = &Организация
	       |	И бестПоказанияПУНППоследовательность.ПериодНачисления = &ПериодНачисления
	       |	И бестПоказанияПУНППоследовательность.Район = &Район
	       |	И бестПоказанияПУНППоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	       |	И бестПоказанияПУНППоследовательность.Договор = &Договор
	       |	И бестПоказанияПУНППоследовательность.МКД = &МКД
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	бестПоказанияПУНППоследовательность.Организация,
	       |	бестПоказанияПУНППоследовательность.ПериодНачисления,
	       |	бестПоказанияПУНППоследовательность.МКД,
	       |	бестПоказанияПУНППоследовательность.Район,
	       |	бестПоказанияПУНППоследовательность.ПриборУчета,
	       |	бестПоказанияПУНППоследовательность.Договор,
	       |	бестПоказанияПУНППоследовательность.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	МинимальныйПериод.Организация КАК Организация,
	       |	МинимальныйПериод.ПериодНачисления КАК ПериодНачисления,
	       |	МинимальныйПериод.Район КАК Район,
	       |	МинимальныйПериод.МКД КАК МКД,
	       |	МинимальныйПериод.ПриборУчета КАК ПриборУчета,
	       |	МинимальныйПериод.ПериодРегистрации КАК ПериодРегистрации,
	       |	МИНИМУМ(бестПоказанияПУНППоследовательность.ДатаРегистратора) КАК ДатаРегистратора,
	       |	МинимальныйПериод.Договор КАК Договор,
	       |	МинимальныйПериод.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ МинимальнаяДатаРегистратора
	       |ИЗ
	       |	МинимальныйПериод КАК МинимальныйПериод
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестПоказанияПУНППоследовательность КАК бестПоказанияПУНППоследовательность
	       |		ПО МинимальныйПериод.Организация = бестПоказанияПУНППоследовательность.Организация
	       |			И МинимальныйПериод.ПериодНачисления = бестПоказанияПУНППоследовательность.ПериодНачисления
	       |			И МинимальныйПериод.Район = бестПоказанияПУНППоследовательность.Район
	       |			И (бестПоказанияПУНППоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	       |			И МинимальныйПериод.ПриборУчета = бестПоказанияПУНППоследовательность.ПриборУчета
	       |			И МинимальныйПериод.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |			И (бестПоказанияПУНППоследовательность.Организация = &Организация)
	       |			И (бестПоказанияПУНППоследовательность.ПериодНачисления = &ПериодНачисления)
	       |			И (бестПоказанияПУНППоследовательность.Район = &Район)
	       |			И МинимальныйПериод.Договор = бестПоказанияПУНППоследовательность.Договор
	       |			И МинимальныйПериод.ОбъектРасчета = бестПоказанияПУНППоследовательность.ОбъектРасчета
	       |			И (бестПоказанияПУНППоследовательность.Договор = &Договор)
	       |			И (бестПоказанияПУНППоследовательность.МКД = &МКД)
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	МинимальныйПериод.Организация,
	       |	МинимальныйПериод.ПериодНачисления,
	       |	МинимальныйПериод.Район,
	       |	МинимальныйПериод.МКД,
	       |	МинимальныйПериод.ПриборУчета,
	       |	МинимальныйПериод.ПериодРегистрации,
	       |	МинимальныйПериод.ОбъектРасчета,
	       |	МинимальныйПериод.Договор
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	МинимальнаяДатаРегистратора.Организация КАК Организация,
	       |	МинимальнаяДатаРегистратора.ПериодНачисления КАК ПериодНачисления,
	       |	МинимальнаяДатаРегистратора.Район КАК Район,
	       |	МинимальнаяДатаРегистратора.МКД КАК МКД,
	       |	МинимальнаяДатаРегистратора.ПриборУчета КАК ПриборУчета,
	       |	МинимальнаяДатаРегистратора.ПериодРегистрации КАК ПериодРегистрации,
	       |	МинимальнаяДатаРегистратора.ДатаРегистратора КАК ДатаРегистратора,
	       |	МИНИМУМ(бестПоказанияПУНППоследовательность.ДокРегистратор) КАК ДокРегистратор,
	       |	МинимальнаяДатаРегистратора.Договор КАК Договор,
	       |	МинимальнаяДатаРегистратора.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ МинимальныйРегистратор
	       |ИЗ
	       |	МинимальнаяДатаРегистратора КАК МинимальнаяДатаРегистратора
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестПоказанияПУНППоследовательность КАК бестПоказанияПУНППоследовательность
	       |		ПО МинимальнаяДатаРегистратора.Организация = бестПоказанияПУНППоследовательность.Организация
	       |			И МинимальнаяДатаРегистратора.ПериодНачисления = бестПоказанияПУНППоследовательность.ПериодНачисления
	       |			И МинимальнаяДатаРегистратора.Район = бестПоказанияПУНППоследовательность.Район
	       |			И (бестПоказанияПУНППоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	       |			И МинимальнаяДатаРегистратора.ОбъектРасчета = бестПоказанияПУНППоследовательность.ОбъектРасчета
	       |			И МинимальнаяДатаРегистратора.ПриборУчета = бестПоказанияПУНППоследовательность.ПриборУчета
	       |			И МинимальнаяДатаРегистратора.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |			И (бестПоказанияПУНППоследовательность.Организация = &Организация)
	       |			И (бестПоказанияПУНППоследовательность.ПериодНачисления = &ПериодНачисления)
	       |			И (бестПоказанияПУНППоследовательность.Район = &Район)
	       |			И (бестПоказанияПУНППоследовательность.Договор = &Договор)
	       |			И МинимальнаяДатаРегистратора.Договор = бестПоказанияПУНППоследовательность.Договор
	       |			И (бестПоказанияПУНППоследовательность.МКД = &МКД)
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	МинимальнаяДатаРегистратора.Организация,
	       |	МинимальнаяДатаРегистратора.ПериодНачисления,
	       |	МинимальнаяДатаРегистратора.Район,
	       |	МинимальнаяДатаРегистратора.МКД,
	       |	МинимальнаяДатаРегистратора.ПриборУчета,
	       |	МинимальнаяДатаРегистратора.ПериодРегистрации,
	       |	МинимальнаяДатаРегистратора.ДатаРегистратора,
	       |	МинимальнаяДатаРегистратора.Договор,
	       |	МинимальнаяДатаРегистратора.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	ВложенныйЗапрос.Организация КАК Организация,
	       |	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	       |	ВложенныйЗапрос.Район КАК Район,
	       |	ВложенныйЗапрос.МКД КАК МКД,
	       |	ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	       |	ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
	       |	ВложенныйЗапрос.ДатаРегистратора КАК ДатаРегистратора,
	       |	ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	       |	ВложенныйЗапрос.Разделитель КАК Разделитель,
	       |	ВЫБОР
	       |		КОГДА ВложенныйЗапрос.ПериодРегистрации < &НачалоПериодаРасчета
	       |			ТОГДА &НачалоПериодаРасчета
	       |		ИНАЧЕ ВложенныйЗапрос.ПериодРегистрации
	       |	КОНЕЦ КАК ПериодРегистрацииПоказаний,
	       |	ВложенныйЗапрос.Договор КАК Договор,
	       |	ВложенныйЗапрос.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ Граница
	       |ИЗ
	       |	(ВЫБРАТЬ
	       |		МинимальныйРегистратор.Организация КАК Организация,
	       |		МинимальныйРегистратор.ПериодНачисления КАК ПериодНачисления,
	       |		МинимальныйРегистратор.Район КАК Район,
	       |		МинимальныйРегистратор.МКД КАК МКД,
	       |		МинимальныйРегистратор.ПриборУчета КАК ПриборУчета,
	       |		МинимальныйРегистратор.ПериодРегистрации КАК ПериодРегистрации,
	       |		МинимальныйРегистратор.ДатаРегистратора КАК ДатаРегистратора,
	       |		МинимальныйРегистратор.ДокРегистратор КАК ДокРегистратор,
	       |		МИНИМУМ(бестПоказанияПУНППоследовательность.Разделитель) КАК Разделитель,
	       |		МинимальныйРегистратор.Договор КАК Договор,
	       |		МинимальныйРегистратор.ОбъектРасчета КАК ОбъектРасчета
	       |	ИЗ
	       |		МинимальныйРегистратор КАК МинимальныйРегистратор
	       |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестПоказанияПУНППоследовательность КАК бестПоказанияПУНППоследовательность
	       |			ПО МинимальныйРегистратор.Организация = бестПоказанияПУНППоследовательность.Организация
	       |				И МинимальныйРегистратор.ПериодНачисления = бестПоказанияПУНППоследовательность.ПериодНачисления
	       |				И МинимальныйРегистратор.Район = бестПоказанияПУНППоследовательность.Район
	       |				И МинимальныйРегистратор.ПриборУчета = бестПоказанияПУНППоследовательность.ПриборУчета
	       |				И МинимальныйРегистратор.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |				И МинимальныйРегистратор.ДатаРегистратора = бестПоказанияПУНППоследовательность.ДатаРегистратора
	       |				И (бестПоказанияПУНППоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	       |				И (бестПоказанияПУНППоследовательность.Организация = &Организация)
	       |				И (бестПоказанияПУНППоследовательность.ПериодНачисления = &ПериодНачисления)
	       |				И (бестПоказанияПУНППоследовательность.Район = &Район)
	       |				И (бестПоказанияПУНППоследовательность.Договор = &Договор)
	       |				И МинимальныйРегистратор.ПриборУчета = бестПоказанияПУНППоследовательность.ПриборУчета
	       |				И МинимальныйРегистратор.Договор = бестПоказанияПУНППоследовательность.Договор
	       |				И МинимальныйРегистратор.ОбъектРасчета = бестПоказанияПУНППоследовательность.ОбъектРасчета
	       |	
	       |	СГРУППИРОВАТЬ ПО
	       |		МинимальныйРегистратор.Организация,
	       |		МинимальныйРегистратор.ПериодНачисления,
	       |		МинимальныйРегистратор.Район,
	       |		МинимальныйРегистратор.МКД,
	       |		МинимальныйРегистратор.ПриборУчета,
	       |		МинимальныйРегистратор.ПериодРегистрации,
	       |		МинимальныйРегистратор.ДатаРегистратора,
	       |		МинимальныйРегистратор.ДокРегистратор,
	       |		МинимальныйРегистратор.Договор,
	       |		МинимальныйРегистратор.ОбъектРасчета) КАК ВложенныйЗапрос
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	бестПоказанияПУНППоследовательность.Организация КАК Организация,
	       |	бестПоказанияПУНППоследовательность.ПериодНачисления КАК ПериодНачисления,
	       |	бестПоказанияПУНППоследовательность.Район КАК Район,
	       |	бестПоказанияПУНППоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	       |	бестПоказанияПУНППоследовательность.МКД КАК МКД,
	       |	бестПоказанияПУНППоследовательность.ПриборУчета КАК ПриборУчета,
	       |	бестПоказанияПУНППоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	       |	бестПоказанияПУНППоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	       |	бестПоказанияПУНППоследовательность.ДокРегистратор КАК ДокРегистратор,
	       |	бестПоказанияПУНППоследовательность.Разделитель КАК Разделитель,
	       |	бестПоказанияПУНППоследовательность.Договор КАК Договор,
	       |	бестПоказанияПУНППоследовательность.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ НаборПроведенныхВПоследовательности
	       |ИЗ
	       |	Граница КАК Граница
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестПоказанияПУНППоследовательность КАК бестПоказанияПУНППоследовательность
	       |		ПО Граница.Организация = бестПоказанияПУНППоследовательность.Организация
	       |			И Граница.ПериодНачисления = бестПоказанияПУНППоследовательность.ПериодНачисления
	       |			И Граница.Район = бестПоказанияПУНППоследовательность.Район
	       |			И Граница.ПриборУчета = бестПоказанияПУНППоследовательность.ПриборУчета
	       |			И (ВЫБОР
	       |				КОГДА Граница.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |						И Граница.ДатаРегистратора = бестПоказанияПУНППоследовательность.ДатаРегистратора
	       |						И Граница.ДокРегистратор = бестПоказанияПУНППоследовательность.ДокРегистратор
	       |						И Граница.Разделитель > бестПоказанияПУНППоследовательность.Разделитель
	       |					ТОГДА ИСТИНА
	       |				КОГДА Граница.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |						И Граница.ДатаРегистратора = бестПоказанияПУНППоследовательность.ДатаРегистратора
	       |						И Граница.ДокРегистратор > бестПоказанияПУНППоследовательность.ДокРегистратор
	       |					ТОГДА ИСТИНА
	       |				КОГДА Граница.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |						И Граница.ДатаРегистратора > бестПоказанияПУНППоследовательность.ДатаРегистратора
	       |					ТОГДА ИСТИНА
	       |				ИНАЧЕ Граница.ПериодРегистрации > бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |			КОНЕЦ)
	       |			И (бестПоказанияПУНППоследовательность.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности))
	       |			И (бестПоказанияПУНППоследовательность.Организация = &Организация)
	       |			И (бестПоказанияПУНППоследовательность.ПериодНачисления = &ПериодНачисления)
	       |			И (бестПоказанияПУНППоследовательность.Район = &Район)
	       |			И (бестПоказанияПУНППоследовательность.Договор = &Договор)
	       |			И (бестПоказанияПУНППоследовательность.МКД = &МКД)
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	НаборПроведенныхВПоследовательности.Организация КАК Организация,
	       |	НаборПроведенныхВПоследовательности.ПериодНачисления КАК ПериодНачисления,
	       |	НаборПроведенныхВПоследовательности.Район КАК Район,
	       |	НаборПроведенныхВПоследовательности.СостояниеПроведения КАК СостояниеПроведения,
	       |	НаборПроведенныхВПоследовательности.МКД КАК МКД,
	       |	НаборПроведенныхВПоследовательности.ПриборУчета КАК ПриборУчета,
	       |	МАКСИМУМ(НаборПроведенныхВПоследовательности.ПериодРегистрации) КАК ПериодРегистрации,
	       |	НаборПроведенныхВПоследовательности.Договор КАК Договор,
	       |	НаборПроведенныхВПоследовательности.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ МаксимальныйПериодРегистрацииПроведенных
	       |ИЗ
	       |	НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	НаборПроведенныхВПоследовательности.Организация,
	       |	НаборПроведенныхВПоследовательности.ПериодНачисления,
	       |	НаборПроведенныхВПоследовательности.Район,
	       |	НаборПроведенныхВПоследовательности.СостояниеПроведения,
	       |	НаборПроведенныхВПоследовательности.МКД,
	       |	НаборПроведенныхВПоследовательности.ПриборУчета,
	       |	НаборПроведенныхВПоследовательности.Договор,
	       |	НаборПроведенныхВПоследовательности.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	МаксимальныйПериодРегистрацииПроведенных.Организация КАК Организация,
	       |	МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления КАК ПериодНачисления,
	       |	МаксимальныйПериодРегистрацииПроведенных.Район КАК Район,
	       |	МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	       |	МаксимальныйПериодРегистрацииПроведенных.МКД КАК МКД,
	       |	МаксимальныйПериодРегистрацииПроведенных.ПриборУчета КАК ПриборУчета,
	       |	МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	       |	МАКСИМУМ(НаборПроведенныхВПоследовательности.ДатаРегистратора) КАК ДатаРегистратора,
	       |	МаксимальныйПериодРегистрацииПроведенных.Договор КАК Договор,
	       |	МаксимальныйПериодРегистрацииПроведенных.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ МаксимальнаяДатаПроведенных
	       |ИЗ
	       |	НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйПериодРегистрацииПроведенных КАК МаксимальныйПериодРегистрацииПроведенных
	       |		ПО НаборПроведенныхВПоследовательности.Организация = МаксимальныйПериодРегистрацииПроведенных.Организация
	       |			И НаборПроведенныхВПоследовательности.ПериодНачисления = МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления
	       |			И НаборПроведенныхВПоследовательности.Район = МаксимальныйПериодРегистрацииПроведенных.Район
	       |			И НаборПроведенныхВПоследовательности.СостояниеПроведения = МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения
	       |			И НаборПроведенныхВПоследовательности.Договор = МаксимальныйПериодРегистрацииПроведенных.Договор
	       |			И НаборПроведенныхВПоследовательности.ОбъектРасчета = МаксимальныйПериодРегистрацииПроведенных.ОбъектРасчета
	       |			И НаборПроведенныхВПоследовательности.ПриборУчета = МаксимальныйПериодРегистрацииПроведенных.ПриборУчета
	       |			И НаборПроведенныхВПоследовательности.ПериодРегистрации = МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	МаксимальныйПериодРегистрацииПроведенных.Организация,
	       |	МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления,
	       |	МаксимальныйПериодРегистрацииПроведенных.Район,
	       |	МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения,
	       |	МаксимальныйПериодРегистрацииПроведенных.МКД,
	       |	МаксимальныйПериодРегистрацииПроведенных.ПриборУчета,
	       |	МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации,
	       |	МаксимальныйПериодРегистрацииПроведенных.Договор,
	       |	МаксимальныйПериодРегистрацииПроведенных.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	МаксимальнаяДатаПроведенных.Организация КАК Организация,
	       |	МаксимальнаяДатаПроведенных.ПериодНачисления КАК ПериодНачисления,
	       |	МаксимальнаяДатаПроведенных.Район КАК Район,
	       |	МаксимальнаяДатаПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	       |	МаксимальнаяДатаПроведенных.МКД КАК МКД,
	       |	МаксимальнаяДатаПроведенных.ПриборУчета КАК ПриборУчета,
	       |	МаксимальнаяДатаПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	       |	МаксимальнаяДатаПроведенных.ДатаРегистратора КАК ДатаРегистратора,
	       |	МАКСИМУМ(НаборПроведенныхВПоследовательности.ДокРегистратор) КАК ДокРегистратор,
	       |	МаксимальнаяДатаПроведенных.Договор КАК Договор,
	       |	МаксимальнаяДатаПроведенных.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ МаксимальныйРегистраторПроведенных
	       |ИЗ
	       |	МаксимальнаяДатаПроведенных КАК МаксимальнаяДатаПроведенных
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	       |		ПО МаксимальнаяДатаПроведенных.Организация = НаборПроведенныхВПоследовательности.Организация
	       |			И МаксимальнаяДатаПроведенных.ПериодНачисления = НаборПроведенныхВПоследовательности.ПериодНачисления
	       |			И МаксимальнаяДатаПроведенных.Район = НаборПроведенныхВПоследовательности.Район
	       |			И МаксимальнаяДатаПроведенных.СостояниеПроведения = НаборПроведенныхВПоследовательности.СостояниеПроведения
	       |			И МаксимальнаяДатаПроведенных.Договор = НаборПроведенныхВПоследовательности.Договор
	       |			И МаксимальнаяДатаПроведенных.ОбъектРасчета = НаборПроведенныхВПоследовательности.ОбъектРасчета
	       |			И МаксимальнаяДатаПроведенных.ПриборУчета = НаборПроведенныхВПоследовательности.ПриборУчета
	       |			И МаксимальнаяДатаПроведенных.ПериодРегистрации = НаборПроведенныхВПоследовательности.ПериодРегистрации
	       |			И МаксимальнаяДатаПроведенных.ДатаРегистратора = НаборПроведенныхВПоследовательности.ДатаРегистратора
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	МаксимальнаяДатаПроведенных.Организация,
	       |	МаксимальнаяДатаПроведенных.ПериодНачисления,
	       |	МаксимальнаяДатаПроведенных.Район,
	       |	МаксимальнаяДатаПроведенных.СостояниеПроведения,
	       |	МаксимальнаяДатаПроведенных.МКД,
	       |	МаксимальнаяДатаПроведенных.ПриборУчета,
	       |	МаксимальнаяДатаПроведенных.ПериодРегистрации,
	       |	МаксимальнаяДатаПроведенных.ДатаРегистратора,
	       |	МаксимальнаяДатаПроведенных.Договор,
	       |	МаксимальнаяДатаПроведенных.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	МаксимальныйРегистраторПроведенных.Организация КАК Организация,
	       |	МаксимальныйРегистраторПроведенных.ПериодНачисления КАК ПериодНачисления,
	       |	МаксимальныйРегистраторПроведенных.Район КАК Район,
	       |	МаксимальныйРегистраторПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	       |	МаксимальныйРегистраторПроведенных.МКД КАК МКД,
	       |	МаксимальныйРегистраторПроведенных.ПриборУчета КАК ПриборУчета,
	       |	МаксимальныйРегистраторПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	       |	МаксимальныйРегистраторПроведенных.ДатаРегистратора КАК ДатаРегистратора,
	       |	МаксимальныйРегистраторПроведенных.ДокРегистратор КАК ДокРегистратор,
	       |	МАКСИМУМ(НаборПроведенныхВПоследовательности.Разделитель) КАК Разделитель,
	       |	МаксимальныйРегистраторПроведенных.Договор КАК Договор,
	       |	МаксимальныйРегистраторПроведенных.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ МаксимальныйРазделительПроведенных
	       |ИЗ
	       |	МаксимальныйРегистраторПроведенных КАК МаксимальныйРегистраторПроведенных
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	       |		ПО МаксимальныйРегистраторПроведенных.Организация = НаборПроведенныхВПоследовательности.Организация
	       |			И МаксимальныйРегистраторПроведенных.ПериодНачисления = НаборПроведенныхВПоследовательности.ПериодНачисления
	       |			И МаксимальныйРегистраторПроведенных.Район = НаборПроведенныхВПоследовательности.Район
	       |			И МаксимальныйРегистраторПроведенных.СостояниеПроведения = НаборПроведенныхВПоследовательности.СостояниеПроведения
	       |			И МаксимальныйРегистраторПроведенных.Договор = НаборПроведенныхВПоследовательности.Договор
	       |			И МаксимальныйРегистраторПроведенных.ОбъектРасчета = НаборПроведенныхВПоследовательности.ОбъектРасчета
	       |			И МаксимальныйРегистраторПроведенных.ПриборУчета = НаборПроведенныхВПоследовательности.ПриборУчета
	       |			И МаксимальныйРегистраторПроведенных.ПериодРегистрации = НаборПроведенныхВПоследовательности.ПериодРегистрации
	       |			И МаксимальныйРегистраторПроведенных.ДатаРегистратора = НаборПроведенныхВПоследовательности.ДатаРегистратора
	       |			И МаксимальныйРегистраторПроведенных.ДокРегистратор = НаборПроведенныхВПоследовательности.ДокРегистратор
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	МаксимальныйРегистраторПроведенных.Организация,
	       |	МаксимальныйРегистраторПроведенных.ПериодНачисления,
	       |	МаксимальныйРегистраторПроведенных.Район,
	       |	МаксимальныйРегистраторПроведенных.СостояниеПроведения,
	       |	МаксимальныйРегистраторПроведенных.МКД,
	       |	МаксимальныйРегистраторПроведенных.ПриборУчета,
	       |	МаксимальныйРегистраторПроведенных.ПериодРегистрации,
	       |	МаксимальныйРегистраторПроведенных.ДатаРегистратора,
	       |	МаксимальныйРегистраторПроведенных.ДокРегистратор,
	       |	МаксимальныйРегистраторПроведенных.Договор,
	       |	МаксимальныйРегистраторПроведенных.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	МаксимальныйРазделительПроведенных.Организация КАК Организация,
	       |	МаксимальныйРазделительПроведенных.ПериодНачисления КАК ПериодНачисления,
	       |	МаксимальныйРазделительПроведенных.Район КАК Район,
	       |	МаксимальныйРазделительПроведенных.МКД КАК МКД,
	       |	МаксимальныйРазделительПроведенных.ПриборУчета КАК ПриборУчета,
	       |	бестПредоставленныеПоказанияНП.Шкала КАК Шкала,
	       |	бестПредоставленныеПоказанияНП.ТарифнаяЗона КАК ТарифнаяЗона,
	       |	МаксимальныйРазделительПроведенных.Разделитель КАК Разделитель,
	       |	бестПредоставленныеПоказанияНП.НомерПозиции КАК НомерПозиции,
	       |	МаксимальныйРазделительПроведенных.Договор КАК Договор,
	       |	МаксимальныйРазделительПроведенных.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ ПоследниеНомераПозиции
	       |ИЗ
	       |	МаксимальныйРазделительПроведенных КАК МаксимальныйРазделительПроведенных
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестПредоставленныеПоказанияНП КАК бестПредоставленныеПоказанияНП
	       |		ПО МаксимальныйРазделительПроведенных.Организация = бестПредоставленныеПоказанияНП.Организация
	       |			И МаксимальныйРазделительПроведенных.ПериодНачисления = бестПредоставленныеПоказанияНП.ПериодНачисления
	       |			И МаксимальныйРазделительПроведенных.Район = бестПредоставленныеПоказанияНП.Район
	       |			И МаксимальныйРазделительПроведенных.Договор = бестПредоставленныеПоказанияНП.Договор
	       |			И МаксимальныйРазделительПроведенных.ОбъектРасчета = бестПредоставленныеПоказанияНП.ОбъектРасчета
	       |			И МаксимальныйРазделительПроведенных.ДокРегистратор = бестПредоставленныеПоказанияНП.ДокРегистратор
	       |			И МаксимальныйРазделительПроведенных.Разделитель = бестПредоставленныеПоказанияНП.Разделитель
	       |			И (бестПредоставленныеПоказанияНП.Организация = &Организация)
	       |			И (бестПредоставленныеПоказанияНП.ПериодНачисления = &ПериодНачисления)
	       |			И (бестПредоставленныеПоказанияНП.Район = &Район)
	       |			И (бестПредоставленныеПоказанияНП.Договор = &Договор)
	       |			И МаксимальныйРазделительПроведенных.ПериодРегистрации = бестПредоставленныеПоказанияНП.ДатаРегистратора
	       |			И МаксимальныйРазделительПроведенных.ПриборУчета = бестПредоставленныеПоказанияНП.ПриборУчета
	       |			И (бестПредоставленныеПоказанияНП.МКД = &МКД)
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	бестМаксимальныеПоказанияНП.Организация КАК Организация,
	       |	бестМаксимальныеПоказанияНП.Район КАК Район,
	       |	бестМаксимальныеПоказанияНП.ПриборУчета КАК ПриборУчета,
	       |	бестМаксимальныеПоказанияНП.Шкала КАК Шкала,
	       |	бестМаксимальныеПоказанияНП.ТарифнаяЗона КАК ТарифнаяЗона,
	       |	Граница.ПериодРегистрацииПоказаний КАК ПериодРегистрацииПоказаний,
	       |	Граница.ДокРегистратор КАК ДокРегистратор,
	       |	Граница.Разделитель КАК Разделитель,
	       |	МАКСИМУМ(бестМаксимальныеПоказанияНП.Период) КАК ПериодМаксПоказаний,
	       |	бестМаксимальныеПоказанияНП.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ МаксПерПоказаний
	       |ИЗ
	       |	Граница КАК Граница
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестМаксимальныеПоказанияНП КАК бестМаксимальныеПоказанияНП
	       |		ПО Граница.Организация = бестМаксимальныеПоказанияНП.Организация
	       |			И Граница.Район = бестМаксимальныеПоказанияНП.Район
	       |			И Граница.ПриборУчета = бестМаксимальныеПоказанияНП.ПриборУчета
	       |			И (ВЫБОР
	       |				КОГДА Граница.ПериодРегистрацииПоказаний = бестМаксимальныеПоказанияНП.Период
	       |						И Граница.ДокРегистратор = бестМаксимальныеПоказанияНП.Регистратор
	       |						И Граница.Разделитель > бестМаксимальныеПоказанияНП.Разделитель
	       |					ТОГДА ИСТИНА
	       |				КОГДА Граница.ПериодРегистрацииПоказаний = бестМаксимальныеПоказанияНП.Период
	       |						И Граница.ДокРегистратор > бестМаксимальныеПоказанияНП.Регистратор
	       |					ТОГДА ИСТИНА
	       |				ИНАЧЕ Граница.ПериодРегистрацииПоказаний > бестМаксимальныеПоказанияНП.Период
	       |			КОНЕЦ)
	       |			И (бестМаксимальныеПоказанияНП.Организация = &Организация)
	       |			И (бестМаксимальныеПоказанияНП.Район = &Район)
	       |			И (бестМаксимальныеПоказанияНП.МКД = &МКД)
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	бестМаксимальныеПоказанияНП.Организация,
	       |	бестМаксимальныеПоказанияНП.Район,
	       |	бестМаксимальныеПоказанияНП.ПриборУчета,
	       |	бестМаксимальныеПоказанияНП.Шкала,
	       |	бестМаксимальныеПоказанияНП.ТарифнаяЗона,
	       |	Граница.ПериодРегистрацииПоказаний,
	       |	Граница.ДокРегистратор,
	       |	Граница.Разделитель,
	       |	бестМаксимальныеПоказанияНП.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	бестМаксимальныеПоказанияНП.Организация КАК Организация,
	       |	бестМаксимальныеПоказанияНП.Район КАК Район,
	       |	бестМаксимальныеПоказанияНП.ПриборУчета КАК ПриборУчета,
	       |	бестМаксимальныеПоказанияНП.Шкала КАК Шкала,
	       |	бестМаксимальныеПоказанияНП.ТарифнаяЗона КАК ТарифнаяЗона,
	       |	МаксПерПоказаний.ПериодРегистрацииПоказаний КАК ПериодРегистрацииПоказаний,
	       |	МаксПерПоказаний.ДокРегистратор КАК ДокРегистратор,
	       |	МаксПерПоказаний.Разделитель КАК Разделитель,
	       |	МаксПерПоказаний.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	       |	МАКСИМУМ(бестМаксимальныеПоказанияНП.Регистратор) КАК РегистраторМаксПоказаний,
	       |	бестМаксимальныеПоказанияНП.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ РегМакПок
	       |ИЗ
	       |	МаксПерПоказаний КАК МаксПерПоказаний
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестМаксимальныеПоказанияНП КАК бестМаксимальныеПоказанияНП
	       |		ПО МаксПерПоказаний.Организация = бестМаксимальныеПоказанияНП.Организация
	       |			И МаксПерПоказаний.Район = бестМаксимальныеПоказанияНП.Район
	       |			И МаксПерПоказаний.ПриборУчета = бестМаксимальныеПоказанияНП.ПриборУчета
	       |			И МаксПерПоказаний.Шкала = бестМаксимальныеПоказанияНП.Шкала
	       |			И МаксПерПоказаний.ТарифнаяЗона = бестМаксимальныеПоказанияНП.ТарифнаяЗона
	       |			И МаксПерПоказаний.ПериодМаксПоказаний = бестМаксимальныеПоказанияНП.Период
	       |			И (ВЫБОР
	       |				КОГДА МаксПерПоказаний.ПериодРегистрацииПоказаний = бестМаксимальныеПоказанияНП.Период
	       |						И МаксПерПоказаний.ДокРегистратор = бестМаксимальныеПоказанияНП.Регистратор
	       |						И МаксПерПоказаний.Разделитель > бестМаксимальныеПоказанияНП.Разделитель
	       |					ТОГДА ИСТИНА
	       |				КОГДА МаксПерПоказаний.ПериодРегистрацииПоказаний = бестМаксимальныеПоказанияНП.Период
	       |						И МаксПерПоказаний.ДокРегистратор > бестМаксимальныеПоказанияНП.Регистратор
	       |					ТОГДА ИСТИНА
	       |				ИНАЧЕ МаксПерПоказаний.ПериодРегистрацииПоказаний > бестМаксимальныеПоказанияНП.Период
	       |			КОНЕЦ)
	       |			И (бестМаксимальныеПоказанияНП.Организация = &Организация)
	       |			И (бестМаксимальныеПоказанияНП.Район = &Район)
	       |			И МаксПерПоказаний.ОбъектРасчета = бестМаксимальныеПоказанияНП.ОбъектРасчета
	       |			И (бестМаксимальныеПоказанияНП.МКД = &МКД)
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	бестМаксимальныеПоказанияНП.Организация,
	       |	бестМаксимальныеПоказанияНП.Район,
	       |	бестМаксимальныеПоказанияНП.ПриборУчета,
	       |	бестМаксимальныеПоказанияНП.Шкала,
	       |	бестМаксимальныеПоказанияНП.ТарифнаяЗона,
	       |	МаксПерПоказаний.ПериодРегистрацииПоказаний,
	       |	МаксПерПоказаний.ДокРегистратор,
	       |	МаксПерПоказаний.Разделитель,
	       |	МаксПерПоказаний.ПериодМаксПоказаний,
	       |	бестМаксимальныеПоказанияНП.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	бестМаксимальныеПоказанияНП.Организация КАК Организация,
	       |	бестМаксимальныеПоказанияНП.Район КАК Район,
	       |	бестМаксимальныеПоказанияНП.ПриборУчета КАК ПриборУчета,
	       |	бестМаксимальныеПоказанияНП.Шкала КАК Шкала,
	       |	бестМаксимальныеПоказанияНП.ТарифнаяЗона КАК ТарифнаяЗона,
	       |	РегМакПок.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	       |	РегМакПок.РегистраторМаксПоказаний КАК РегистраторМаксПоказаний,
	       |	МАКСИМУМ(ЕСТЬNULL(бестМаксимальныеПоказанияНП.Разделитель, 0)) КАК РазделительМаксПоказаний,
	       |	бестМаксимальныеПоказанияНП.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ РазделительМакПок
	       |ИЗ
	       |	РегМакПок КАК РегМакПок
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестМаксимальныеПоказанияНП КАК бестМаксимальныеПоказанияНП
	       |		ПО РегМакПок.Организация = бестМаксимальныеПоказанияНП.Организация
	       |			И РегМакПок.Район = бестМаксимальныеПоказанияНП.Район
	       |			И РегМакПок.ПриборУчета = бестМаксимальныеПоказанияНП.ПриборУчета
	       |			И РегМакПок.Шкала = бестМаксимальныеПоказанияНП.Шкала
	       |			И РегМакПок.ТарифнаяЗона = бестМаксимальныеПоказанияНП.ТарифнаяЗона
	       |			И РегМакПок.ПериодМаксПоказаний = бестМаксимальныеПоказанияНП.Период
	       |			И РегМакПок.РегистраторМаксПоказаний = бестМаксимальныеПоказанияНП.Регистратор
	       |			И (ВЫБОР
	       |				КОГДА РегМакПок.ПериодРегистрацииПоказаний = бестМаксимальныеПоказанияНП.Период
	       |						И РегМакПок.ДокРегистратор = бестМаксимальныеПоказанияНП.Регистратор
	       |						И РегМакПок.Разделитель > бестМаксимальныеПоказанияНП.Разделитель
	       |					ТОГДА ИСТИНА
	       |				КОГДА РегМакПок.ПериодРегистрацииПоказаний = бестМаксимальныеПоказанияНП.Период
	       |						И РегМакПок.ДокРегистратор > бестМаксимальныеПоказанияНП.Регистратор
	       |					ТОГДА ИСТИНА
	       |				ИНАЧЕ РегМакПок.ПериодРегистрацииПоказаний > бестМаксимальныеПоказанияНП.Период
	       |			КОНЕЦ)
	       |			И (бестМаксимальныеПоказанияНП.Организация = &Организация)
	       |			И (бестМаксимальныеПоказанияНП.Район = &Район)
	       |			И РегМакПок.ОбъектРасчета = бестМаксимальныеПоказанияНП.ОбъектРасчета
	       |			И (бестМаксимальныеПоказанияНП.МКД = &МКД)
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	бестМаксимальныеПоказанияНП.Организация,
	       |	бестМаксимальныеПоказанияНП.Район,
	       |	бестМаксимальныеПоказанияНП.ПриборУчета,
	       |	бестМаксимальныеПоказанияНП.Шкала,
	       |	бестМаксимальныеПоказанияНП.ТарифнаяЗона,
	       |	РегМакПок.ПериодМаксПоказаний,
	       |	РегМакПок.РегистраторМаксПоказаний,
	       |	бестМаксимальныеПоказанияНП.ОбъектРасчета
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	РазделительМакПок.Организация КАК Организация,
	       |	РазделительМакПок.Район КАК Район,
	       |	РазделительМакПок.ПриборУчета КАК ПриборУчета,
	       |	РазделительМакПок.Шкала КАК Шкала,
	       |	РазделительМакПок.ТарифнаяЗона КАК ТарифнаяЗона,
	       |	РазделительМакПок.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	       |	РазделительМакПок.РегистраторМаксПоказаний КАК РегистраторМаксПоказаний,
	       |	бестМаксимальныеПоказанияНП.ДатаРегистратора КАК ДатаРегистратораМаксимальных,
	       |	бестМаксимальныеПоказанияНП.Показание КАК МаксПоказания,
	       |	РазделительМакПок.ОбъектРасчета КАК ОбъектРасчета
	       |ПОМЕСТИТЬ ДанныеМаксПоказаний
	       |ИЗ
	       |	РазделительМакПок КАК РазделительМакПок
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестМаксимальныеПоказанияНП КАК бестМаксимальныеПоказанияНП
	       |		ПО РазделительМакПок.Организация = бестМаксимальныеПоказанияНП.Организация
	       |			И РазделительМакПок.Район = бестМаксимальныеПоказанияНП.Район
	       |			И РазделительМакПок.ПриборУчета = бестМаксимальныеПоказанияНП.ПриборУчета
	       |			И РазделительМакПок.Шкала = бестМаксимальныеПоказанияНП.Шкала
	       |			И РазделительМакПок.ТарифнаяЗона = бестМаксимальныеПоказанияНП.ТарифнаяЗона
	       |			И РазделительМакПок.ПериодМаксПоказаний = бестМаксимальныеПоказанияНП.Период
	       |			И РазделительМакПок.РегистраторМаксПоказаний = бестМаксимальныеПоказанияНП.Регистратор
	       |			И РазделительМакПок.РазделительМаксПоказаний = бестМаксимальныеПоказанияНП.Разделитель
	       |			И (бестМаксимальныеПоказанияНП.Организация = &Организация)
	       |			И (бестМаксимальныеПоказанияНП.Район = &Район)
	       |			И РазделительМакПок.ОбъектРасчета = бестМаксимальныеПоказанияНП.ОбъектРасчета
	       |			И (бестМаксимальныеПоказанияНП.МКД = &МКД)
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	бестПоказанияПУНППоследовательность.Организация КАК Организация,
	       |	бестПоказанияПУНППоследовательность.ПериодНачисления КАК ПериодНачисления,
	       |	бестПоказанияПУНППоследовательность.Район КАК Район,
	       |	бестПоказанияПУНППоследовательность.МКД КАК МКД,
	       |	бестПоказанияПУНППоследовательность.ПриборУчета КАК ПриборУчета,
	       |	бестПоказанияПУНППоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	       |	бестПоказанияПУНППоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	       |	бестПоказанияПУНППоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	       |	бестПоказанияПУНППоследовательность.ДокРегистратор КАК ДокРегистратор,
	       |	бестПоказанияПУНППоследовательность.Разделитель КАК Разделитель,
	       |	бестПоказанияПУНППоследовательность.ВыводПрибораУчета КАК ВыводПрибораУчета,
	       |	бестПоказанияПУНППоследовательность.ИмяТабЧасти КАК ИмяТабЧасти,
	       |	бестПоказанияПУНППоследовательность.ОбъектРасчета КАК ОбъектРасчета,
	       |	бестПоказанияПУНППоследовательность.Договор КАК Договор
	       |ПОМЕСТИТЬ НаборДокументов
	       |ИЗ
	       |	Граница КАК Граница
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестПоказанияПУНППоследовательность КАК бестПоказанияПУНППоследовательность
	       |		ПО Граница.Организация = бестПоказанияПУНППоследовательность.Организация
	       |			И Граница.ПериодНачисления = бестПоказанияПУНППоследовательность.ПериодНачисления
	       |			И Граница.Район = бестПоказанияПУНППоследовательность.Район
	       |			И Граница.ПриборУчета = бестПоказанияПУНППоследовательность.ПриборУчета
	       |			И (ВЫБОР
	       |				КОГДА Граница.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |						И Граница.ДатаРегистратора = бестПоказанияПУНППоследовательность.ДатаРегистратора
	       |						И Граница.ДокРегистратор = бестПоказанияПУНППоследовательность.ДокРегистратор
	       |						И Граница.Разделитель <= бестПоказанияПУНППоследовательность.Разделитель
	       |					ТОГДА ИСТИНА
	       |				КОГДА Граница.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |						И Граница.ДатаРегистратора = бестПоказанияПУНППоследовательность.ДатаРегистратора
	       |						И Граница.ДокРегистратор < бестПоказанияПУНППоследовательность.ДокРегистратор
	       |					ТОГДА ИСТИНА
	       |				КОГДА Граница.ПериодРегистрации = бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |						И Граница.ДатаРегистратора < бестПоказанияПУНППоследовательность.ДатаРегистратора
	       |					ТОГДА ИСТИНА
	       |				ИНАЧЕ Граница.ПериодРегистрации < бестПоказанияПУНППоследовательность.ПериодРегистрации
	       |			КОНЕЦ)
	       |			И (бестПоказанияПУНППоследовательность.Организация = &Организация)
	       |			И (бестПоказанияПУНППоследовательность.ПериодНачисления = &ПериодНачисления)
	       |			И (бестПоказанияПУНППоследовательность.Район = &Район)
	       |			И (бестПоказанияПУНППоследовательность.Договор = &Договор)
	       |			И (бестПоказанияПУНППоследовательность.МКД = &МКД)
	       |			И Граница.ОбъектРасчета = бестПоказанияПУНППоследовательность.ОбъектРасчета
	       |			И Граница.Договор = бестПоказанияПУНППоследовательность.Договор
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	бестПоказанияПриборовУчетаНП.Организация КАК Организация,
	       |	бестПоказанияПриборовУчетаНП.Район КАК Район,
	       |	бестПоказанияПриборовУчетаНП.ПриборУчета КАК ПриборУчета,
	       |	бестПоказанияПриборовУчетаНП.Шкала КАК Шкала,
	       |	бестПоказанияПриборовУчетаНП.ТарифнаяЗона КАК ТарифнаяЗона,
	       |	МАКСИМУМ(ВЫБОР
	       |			КОГДА бестПоказанияПриборовУчетаНП.Переворот
	       |				ТОГДА 1
	       |			ИНАЧЕ 0
	       |		КОНЕЦ) КАК БылПереворот,
	       |	бестПоказанияПриборовУчетаНП.ОбъектРасчета КАК ОбъектРасчета,
	       |	бестПоказанияПриборовУчетаНП.Договор КАК Договор
	       |ПОМЕСТИТЬ ДанныеПоПереворотам
	       |ИЗ
	       |	НаборДокументов КАК НаборДокументов
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестПоказанияПриборовУчетаНП КАК бестПоказанияПриборовУчетаНП
	       |		ПО НаборДокументов.Организация = бестПоказанияПриборовУчетаНП.Организация
	       |			И НаборДокументов.Район = бестПоказанияПриборовУчетаНП.Район
	       |			И НаборДокументов.ПриборУчета = бестПоказанияПриборовУчетаНП.ПриборУчета
	       |			И (бестПоказанияПриборовУчетаНП.Период МЕЖДУ НаборДокументов.ДатаРегистратора И НаборДокументов.ПериодРегистрации)
	       |			И (бестПоказанияПриборовУчетаНП.СостояниеПоказаний = ЗНАЧЕНИЕ(Перечисление.энргСостояниеПоказаний.Приняты))
	       |			И НаборДокументов.ДокРегистратор <> бестПоказанияПриборовУчетаНП.Регистратор
	       |			И (бестПоказанияПриборовУчетаНП.Организация = &Организация)
	       |			И НаборДокументов.Договор = бестПоказанияПриборовУчетаНП.Договор
	       |			И НаборДокументов.ОбъектРасчета = бестПоказанияПриборовУчетаНП.ОбъектРасчета
	       |			И (бестПоказанияПриборовУчетаНП.Договор = &Договор)
	       |
	       |СГРУППИРОВАТЬ ПО
	       |	бестПоказанияПриборовУчетаНП.Организация,
	       |	бестПоказанияПриборовУчетаНП.Район,
	       |	бестПоказанияПриборовУчетаНП.ПриборУчета,
	       |	бестПоказанияПриборовУчетаНП.Шкала,
	       |	бестПоказанияПриборовУчетаНП.ТарифнаяЗона,
	       |	бестПоказанияПриборовУчетаНП.ОбъектРасчета,
	       |	бестПоказанияПриборовУчетаНП.Договор
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	НаборДокументов.Организация КАК Организация,
	       |	НаборДокументов.ПериодНачисления КАК ПериодНачисления,
	       |	НаборДокументов.Район КАК Район,
	       |	НаборДокументов.МКД КАК МКД,
	       |	НаборДокументов.ПриборУчета КАК ПриборУчета,
	       |	бестПоказанияПриборовУчетаНП.Шкала КАК Шкала,
	       |	бестПоказанияПриборовУчетаНП.ТарифнаяЗона КАК ТарифнаяЗона,
	       |	НаборДокументов.СостояниеПроведения КАК СостояниеПроведения,
	       |	НаборДокументов.ПериодРегистрации КАК ПериодРегистрации,
	       |	НаборДокументов.ДатаРегистратора КАК ДатаРегистратора,
	       |	НаборДокументов.ДокРегистратор КАК ДокРегистратор,
	       |	НаборДокументов.Разделитель КАК Разделитель,
	       |	НаборДокументов.ВыводПрибораУчета КАК ВыводПрибораУчета,
	       |	НаборДокументов.ИмяТабЧасти КАК ИмяТабЧасти,
	       |	бестПоказанияПриборовУчетаНП.Показание КАК Показание,
	       |	бестПоказанияПриборовУчетаНП.СостояниеПоказаний КАК СостояниеПоказаний,
	       |	бестПоказанияПриборовУчетаНП.Переворот КАК Переворот,
	       |	бестПоказанияПриборовУчетаНП.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	       |	бестПоказанияПриборовУчетаНП.КС КАК КС,
	       |	НаборДокументов.ОбъектРасчета КАК ОбъектРасчета,
	       |	НаборДокументов.Договор КАК Договор,
	       |	бестПоказанияПриборовУчетаНП.ТочкаУчета КАК ТочкаУчета
	       |ПОМЕСТИТЬ ДанныеДокументов
	       |ИЗ
	       |	НаборДокументов КАК НаборДокументов
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестПоказанияПриборовУчетаНП КАК бестПоказанияПриборовУчетаНП
	       |		ПО НаборДокументов.ДокРегистратор = бестПоказанияПриборовУчетаНП.Регистратор
	       |			И НаборДокументов.Организация = бестПоказанияПриборовУчетаНП.Организация
	       |			И НаборДокументов.ПриборУчета = бестПоказанияПриборовУчетаНП.ПриборУчета
	       |			И НаборДокументов.Разделитель = бестПоказанияПриборовУчетаНП.Разделитель
	       |			И (НЕ НаборДокументов.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	       |			И (бестПоказанияПриборовУчетаНП.Организация = &Организация)
	       |			И (бестПоказанияПриборовУчетаНП.Район = &Район)
	       |			И (бестПоказанияПриборовУчетаНП.Договор = &Договор)
	       |			И НаборДокументов.Договор = бестПоказанияПриборовУчетаНП.Договор
	       |			И НаборДокументов.ОбъектРасчета = бестПоказанияПриборовУчетаНП.ОбъектРасчета
	       |
	       |ОБЪЕДИНИТЬ ВСЕ
	       |
	       |ВЫБРАТЬ
	       |	НаборДокументов.Организация,
	       |	НаборДокументов.ПериодНачисления,
	       |	НаборДокументов.Район,
	       |	НаборДокументов.МКД,
	       |	НаборДокументов.ПриборУчета,
	       |	ЗНАЧЕНИЕ(Справочник.энргШкалыПриборовУчета.ПустаяСсылка),
	       |	ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка),
	       |	НаборДокументов.СостояниеПроведения,
	       |	НаборДокументов.ПериодРегистрации,
	       |	НаборДокументов.ДатаРегистратора,
	       |	НаборДокументов.ДокРегистратор,
	       |	НаборДокументов.Разделитель,
	       |	НаборДокументов.ВыводПрибораУчета,
	       |	НаборДокументов.ИмяТабЧасти,
	       |	0,
	       |	ЗНАЧЕНИЕ(Перечисление.энргСостояниеПоказаний.Отклонены),
	       |	ЛОЖЬ,
	       |	0,
	       |	ЛОЖЬ,
	       |	НаборДокументов.ОбъектРасчета,
	       |	НаборДокументов.Договор,
	       |	ЗНАЧЕНИЕ(Справочник.энргТочкиУчета.ПустаяСсылка)
	       |ИЗ
	       |	НаборДокументов КАК НаборДокументов
	       |ГДЕ
	       |	НаборДокументов.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	ДанныеДокументов.Организация КАК Организация,
	       |	ДанныеДокументов.ПериодНачисления КАК ПериодНачисления,
	       |	ДанныеДокументов.Район КАК Район,
	       |	ДанныеДокументов.МКД КАК МКД,
	       |	ДанныеДокументов.ПриборУчета КАК ПриборУчета,
	       |	ЕСТЬNULL(ДанныеМаксПоказаний.Шкала, ДанныеДокументов.Шкала) КАК Шкала,
	       |	ЕСТЬNULL(ДанныеМаксПоказаний.ТарифнаяЗона, ДанныеДокументов.ТарифнаяЗона) КАК ТарифнаяЗона,
	       |	ДанныеДокументов.СостояниеПроведения КАК СостояниеПроведения,
	       |	ДанныеДокументов.ПериодРегистрации КАК ПериодРегистрации,
	       |	ДанныеДокументов.ДатаРегистратора КАК ДатаРегистратора,
	       |	ДанныеДокументов.ДокРегистратор КАК ДокРегистратор,
	       |	ДанныеДокументов.Разделитель КАК Разделитель,
	       |	ДанныеДокументов.ВыводПрибораУчета КАК ВыводПрибораУчета,
	       |	ДанныеДокументов.ИмяТабЧасти КАК ИмяТабЧасти,
	       |	ДанныеДокументов.Показание КАК Показание,
	       |	ДанныеДокументов.СостояниеПоказаний КАК СостояниеПоказаний,
	       |	ДанныеДокументов.Переворот КАК Переворот,
	       |	ДанныеДокументов.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	       |	ДанныеДокументов.КС КАК КС,
	       |	ДанныеДокументов.ТочкаУчета КАК ТочкаУчета,
	       |	ЕСТЬNULL(энргПриборыУчетаАбонента.МаксимальноВозможныеПоказания, 0) КАК МаксимальноВозможныеПоказания,
	       |	1 КАК коэффициентПУ,
	       |	ЕСТЬNULL(ПоследниеНомераПозиции.НомерПозиции, -1) КАК НомерПозици,
	       |	ЕСТЬNULL(ДанныеПоПереворотам.БылПереворот, 0) КАК БылПереворот,
	       |	ЕСТЬNULL(ДанныеМаксПоказаний.ПериодМаксПоказаний, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодМаксПоказаний,
	       |	ЕСТЬNULL(ДанныеМаксПоказаний.МаксПоказания, -1) КАК МаксПоказания,
	       |	ЕСТЬNULL(ДанныеМаксПоказаний.РегистраторМаксПоказаний, ЗНАЧЕНИЕ(Документ.энргРегистрацияПоказанийАбонента.ПустаяСсылка)) КАК РегистраторМаксПоказаний,
	       |	ЕСТЬNULL(ДанныеМаксПоказаний.ДатаРегистратораМаксимальных, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистратораМаксимальных,
	       |	ДанныеДокументов.ОбъектРасчета КАК ОбъектРасчета,
	       |	ДанныеДокументов.Договор КАК Договор
	       |ИЗ
	       |	ДанныеДокументов КАК ДанныеДокументов
	       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.энргПриборыУчетаАбонента КАК энргПриборыУчетаАбонента
	       |		ПО ДанныеДокументов.ПриборУчета = энргПриборыУчетаАбонента.Ссылка
	       |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеНомераПозиции КАК ПоследниеНомераПозиции
	       |		ПО ДанныеДокументов.Организация = ПоследниеНомераПозиции.Организация
	       |			И ДанныеДокументов.ПериодНачисления = ПоследниеНомераПозиции.ПериодНачисления
	       |			И ДанныеДокументов.Район = ПоследниеНомераПозиции.Район
	       |			И ДанныеДокументов.МКД = ПоследниеНомераПозиции.МКД
	       |			И ДанныеДокументов.ПриборУчета = ПоследниеНомераПозиции.ПриборУчета
	       |			И ДанныеДокументов.Шкала = ПоследниеНомераПозиции.Шкала
	       |			И ДанныеДокументов.ТарифнаяЗона = ПоследниеНомераПозиции.ТарифнаяЗона
	       |			И ДанныеДокументов.ОбъектРасчета = ПоследниеНомераПозиции.ОбъектРасчета
	       |			И ДанныеДокументов.Договор = ПоследниеНомераПозиции.Договор
	       |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоПереворотам КАК ДанныеПоПереворотам
	       |		ПО ДанныеДокументов.Организация = ДанныеПоПереворотам.Организация
	       |			И ДанныеДокументов.Район = ДанныеПоПереворотам.Район
	       |			И ДанныеДокументов.ПриборУчета = ДанныеПоПереворотам.ПриборУчета
	       |			И ДанныеДокументов.Шкала = ДанныеПоПереворотам.Шкала
	       |			И ДанныеДокументов.ТарифнаяЗона = ДанныеПоПереворотам.ТарифнаяЗона
	       |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеМаксПоказаний КАК ДанныеМаксПоказаний
	       |		ПО ДанныеДокументов.Организация = ДанныеМаксПоказаний.Организация
	       |			И ДанныеДокументов.Район = ДанныеМаксПоказаний.Район
	       |			И ДанныеДокументов.ПриборУчета = ДанныеМаксПоказаний.ПриборУчета
	       |			И ДанныеДокументов.ОбъектРасчета = ДанныеМаксПоказаний.ОбъектРасчета
	       |			И (ДанныеДокументов.СостояниеПроведения <> ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	       |
	       |УПОРЯДОЧИТЬ ПО
	       |	Организация,
	       |	ПериодНачисления,
	       |	Район,
	       |	МКД,
	       |	ПриборУчета,
	       |	Шкала,
	       |	ТарифнаяЗона,
	       |	ПериодРегистрации,
	       |	ДатаРегистратора,
	       |	ДокРегистратор,
	       |	Разделитель";
		
	Если не Отбор.свойство("Договор") тогда
		Текст = СтрЗаменить(Текст,"И бестПоказанияПУНППоследовательность.Договор = &Договор","");
		Текст = СтрЗаменить(Текст,"И (бестПоказанияПУНППоследовательность.Договор = &Договор)","");
		Текст = СтрЗаменить(Текст,"И (бестПредоставленныеПоказанияНП.Договор = &Договор)","");
		Текст = СтрЗаменить(Текст,"И (бестПоказанияПриборовУчетаНП.Договор = &Договор)","");
	КонецЕсли;
	
	
	Если Отбор.ИсключаяОтдельностоящие тогда
		Текст = СтрЗаменить(Текст,"И бестПоказанияПУНППоследовательность.МКД = &МКД","И бестПоказанияПУНППоследовательность.МКД <> &МКД");
		Текст = СтрЗаменить(Текст,"И (бестПоказанияПУНППоследовательность.МКД = &МКД)","И (бестПоказанияПУНППоследовательность.МКД <> &МКД)");
		Текст = СтрЗаменить(Текст,"И (бестПредоставленныеПоказанияНП.МКД = &МКД)","И (бестПредоставленныеПоказанияНП.МКД <> &МКД)");
		Текст = СтрЗаменить(Текст,"И (бестМаксимальныеПоказанияНП.МКД = &МКД)","И (бестМаксимальныеПоказанияНП.МКД <> &МКД)");

	Иначе
		Если Отбор.МКД = Неопределено Тогда 
			Текст = СтрЗаменить(Текст,"И бестПоказанияПУНППоследовательность.МКД = &МКД","");
			Текст = СтрЗаменить(Текст,"И (бестПоказанияПУНППоследовательность.МКД = &МКД)","");
			Текст = СтрЗаменить(Текст,"И (бестПредоставленныеПоказанияНП.МКД = &МКД)","");
			Текст = СтрЗаменить(Текст,"И (бестМаксимальныеПоказанияНП.МКД = &МКД)","");

		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Организация",		Отбор.Организация);
	Запрос.УстановитьПараметр("Район",				Отбор.район);
	Запрос.УстановитьПараметр("ПериодНачисления",	Отбор.ПериодНачисления);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",НачалоПериодаРасчета);
	
	Запрос.УстановитьПараметр("МКД",				Отбор.МКД);

	
	Если Отбор.свойство("Договор") тогда
		Запрос.УстановитьПараметр("Договор",		Отбор.Договор);
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПровестиПоказанияПриборовУчетаНП(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления)
	
	ПериодНачисления 								= ПараметрыПроведений.ПериодНачисления;
	Организация 									= ПараметрыПроведений.Организация;
	Район 											= ПараметрыПроведений.Район;
	Договор 										= ПараметрыПроведений.Договор;
	ОбъектРасчета 									= ПараметрыПроведений.ОбъектРасчета;
	ПриборУчета 									= ПараметрыПроведений.ПриборУчета;
	Шкала		 									= ПараметрыПроведений.Шкала;
	ТарифнаяЗона 									= ПараметрыПроведений.ТарифнаяЗона;
	НомерПозиции 									= ПараметрыПроведений.НомерПозиции;
	ПоказанияС 										= ПараметрыПроведений.ПоказанияС;
	ПоказанияПО 									= ПараметрыПроведений.ПоказанияПО;
	НачалоПериодаРасчета 							= ПараметрыПроведений.НачалоПериодаРасчета;
	
	Попытка
		Исключен  									= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
		ПроведенВПоследоватености  					= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
		
		ПоказанияОтклонены 							= Перечисления.энргСостояниеПоказаний.Отклонены;
		ПоказанияПриняты 							= Перечисления.энргСостояниеПоказаний.Приняты;
		ПустоеСостояниеПоказаний					= Перечисления.энргСостояниеПоказаний.ПустаяСсылка();
		ТекНомерПозиции 							= НомерПозиции;
		
		ПредыдущиеМакс 								= Макс(МассивДокументов[0].МаксПоказания,0);
		ПериодПредыдущихМаксПок 					= МассивДокументов[0].ПериодМаксПоказаний;
		РегистраторМаксимальных 					= МассивДокументов[0].РегистраторМаксПоказаний;
		ДатаРегистратораМаксимальных 				= МассивДокументов[0].ДатаРегистратораМаксимальных;
		
		МаксимальныеПоказания  						= Новый Соответствие; 		
		
		для Каждого Выборка из МассивДокументов цикл
			
			Если Выборка.состояниепроведения  = Исключен тогда 			
				// Очищаем данные.
				НаборПоследовательности 			= РегистрыСведений.бестПоказанияПУНППоследовательность.СоздатьНаборЗаписей();
				НаборПоследовательности.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
				НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
				НаборПоследовательности.Отбор.Организация.установить(Организация);
				НаборПоследовательности.Отбор.Район.установить(Район);
				НаборПоследовательности.Отбор.СостояниеПроведения.установить(Выборка.СостояниеПроведения);
				НаборПоследовательности.Отбор.Договор.установить(Договор);
				НаборПоследовательности.Отбор.ОбъектРасчета.установить(ОбъектРасчета);
				НаборПоследовательности.Отбор.ПриборУчета.установить(ПриборУчета);
				НаборПоследовательности.Отбор.ПериодРегистрации.установить(Выборка.ПериодРегистрации);
				НаборПоследовательности.Отбор.ДатаРегистратора.установить(Выборка.ДатаРегистратора);
				НаборПоследовательности.Записать();
				
				// Получаем таблицу максимальных показаний по регистратору.
				НаборМаксПоказаний  				= РегистрыСведений.бестМаксимальныеПоказанияНП.СоздатьНаборЗаписей();
				НаборМаксПоказаний.Отбор.регистратор.установить(Выборка.ДокРегистратор);
				НаборМаксПоказаний.Записать();
				
				НаборПредоставленных 				= РегистрыСведений.бестПредоставленныеПоказанияНП.СоздатьНаборЗаписей();
				НаборПредоставленных.Отбор.Докрегистратор.установить(Выборка.ДокРегистратор);
				НаборПредоставленных.Записать();
				
				Продолжить;
			КонецЕсли;
			
			СостояниеПоказаний  					= Выборка.состояниеПоказаний;
			Переворот  								= Выборка.Переворот;
			
			ОбновлятьДанные 						= Истина;
			ЭтоОткрытие 							= Ложь;
			// Обновляем показания в документа.
			Если ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.бестЗаключениеДоговоровСЮридическимиЛицами") тогда
				Если  Выборка.ДокРегистратор.Видоперации  = Перечисления.бестВидыОпераций.ОперацияСДоговором_ОткрытиеДоговора тогда
					ОбновлятьДанные 				= Ложь;
					ЭтоОткрытие 					= Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.бестОперацияСУслугамиНП")	тогда
				Если Выборка.ДокРегистратор.Видоперации  = Перечисления.бестВидыОпераций.ОперацияСУслугами_ПодключениеУслуги тогда
					ОбновлятьДанные 				= Ложь;
				КонецЕсли;
			//ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргПерерасчет")	тогда
			//	Если Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргПерерасчет_КорректировкаПоказаний тогда
			//		ОбновлятьДанные 				= Ложь;
			//	КонецЕсли;
			ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.бестОперацияСПриборомУчетаНП")	тогда
				Если Выборка.ДокРегистратор.Видоперации  = Перечисления.бестВидыОпераций.ОперацияСПриборомУчета_ВводПУ тогда
					ОбновлятьДанные 				= Ложь;
				ИначеЕсли Выборка.ДокРегистратор.Видоперации  = Перечисления.бестВидыОпераций.ОперацияСПриборомУчета_ЗаменаПУ тогда
					ТабЧасть  						= Выборка.ДокРегистратор["ПриборыУчетаЗамена"];
					СтрокиПрибора 					= ТабЧасть.найтиСтроки(Новый Структура("ПриборУчета",ПриборУчета));
					Если СтрокиПрибора.количество() = 0 тогда
						ОбновлятьДанные 			= Ложь;
					КонецЕсли;
				КонецЕсли; 	
			ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.бестРегистрацияПоказанийНПОбщий")	тогда
				
					ОбновлятьДанные 				= Ложь;
		
			КонецЕсли;
			
			Если ОбновлятьДанные тогда
				ПараметрыОперации  					= Новый Структура("
				|Договор,ОбъектРасчета,ПриборУчета,Шкала,ТарифнаяЗона,ПредыдущиеМакс,ПериодПредыдущихМаксПок,СостояниеПоказаний,ДанныеМаксимальногоПотребления,
				|Переворот,НомерСтрокиТЧ,Разделитель,ДанныеСреднегоОбъема,МаксимальноВозможныеПоказания,КоэффициентПУ,ИмяТабЧасти,КС",
				Договор,ОбъектРасчета,ПриборУчета,Шкала,ТарифнаяЗона,ПредыдущиеМакс,ПериодПредыдущихМаксПок,СостояниеПоказаний,ДанныеМаксимальногоПотребления,
				Переворот,Выборка.НомерСтрокиТЧ,Выборка.разделитель,ДанныеСреднегоОбъема,Выборка.МаксимальноВозможныеПоказания,Выборка.КоэффициентПУ,Выборка.ИмяТабЧасти,Выборка.КС);
				
				ОбновитьДанныеВДокументеНП(ПериодНачисления,Выборка.ДокРегистратор,ПараметрыОперации);
				
				СостояниеПоказаний 					= ПараметрыОперации.СостояниеПоказаний;
				Переворот 							= ПараметрыОперации.Переворот;
			КонецЕсли;	
			
			// Получаем таблицу максимальных показаний по регистратору.
			НаборМаксПоказаний  					= РегистрыСведений.бестМаксимальныеПоказанияНП.СоздатьНаборЗаписей();
			НаборМаксПоказаний.Отбор.регистратор.установить(Выборка.ДокРегистратор);
			НаборМаксПоказаний.Прочитать();
			ТаблицаМаксимальных 					= НаборМаксПоказаний.Выгрузить();
			для Каждого стр из ТаблицаМаксимальных цикл
				стр.активность  = истина;
				Если НЕ ЗначениеЗаполнено(стр.МКД) Тогда
					стр.МКД = стр.ОбъектРасчета.МКД;
				КонецЕсли;
			КонецЦикла;
			
			НаборМаксПоказаний.Очистить(); 
			НаборМаксПоказаний.Записать(); 
			
			Текущие  								= Выборка.Показание;
			
			ЭтоМаксимальные 						= ПредыдущиеМакс <=  Текущие или Переворот;
			
			Если Выборка.ДатаРегистратора < Выборка.ПериодРегистрации тогда
				// Может быть либо у потерянной квитанции или у контрольного съема который НЕ с 23-26.
				Если Выборка.БылПереворот = 1 тогда
					ЭтоМаксимальные 					= Ложь;			 
				КонецЕсли; 			 
			КонецЕсли;
			
			Если СостояниеПоказаний<> ПоказанияПриняты тогда
				ЭтоМаксимальные 						= ложь;
			КонецЕсли;
			
			ПараметрыСтрокиМаксимальных  				= Новый Структура("Период,Активность,Организация,Район,Договор,ОбъектРасчета,ПриборУчета,Шкала,ТарифнаяЗона,Разделитель",Выборка.ПериодРегистрации,истина,Организация,Район,Договор,ОбъектРасчета,ПриборУчета,Шкала,ТарифнаяЗона,Выборка.Разделитель);
			СтрокиТаблицыМаксимальных					= ТаблицаМаксимальных.НайтиСтроки(ПараметрыСтрокиМаксимальных);
			ПоказанияТекущегоПериода 					= Выборка.ПериодРегистрации >= НачалоПериодаРасчета;
			ВСрок 										= ?(ЭтоОткрытие, Истина, Выборка.ПериодРегистрации >= НачалоПериодаРасчета и День(Выборка.ПериодРегистрации)>=ПоказанияС и День(Выборка.ПериодРегистрации)<=ПоказанияПО);
			
			Если СостояниеПоказаний = ПоказанияПриняты и Не ЭтоОткрытие Тогда
				НаборРасчетСреднего 					= РегистрыСведений.бестРасчетСреднегоОбъемаНП.СоздатьНаборЗаписей();
				НаборРасчетСреднего.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",истина);
				СтрокаНабор  							= НаборРасчетСреднего.Добавить();
				СтрокаНабор.Организация 	 			= Организация;
				СтрокаНабор.Район						= Район;
				СтрокаНабор.Договор						= Договор;
				СтрокаНабор.ОбъектРасчета				= ОбъектРасчета;
				СтрокаНабор.МКД							= ОбъектРасчета.МКД;
				СтрокаНабор.ТочкаУчета					= Выборка.ТочкаУчета;
				СтрокаНабор.Шкала						= Шкала;
				СтрокаНабор.ТарифнаяЗона				= ТарифнаяЗона;
				СтрокаНабор.ПериодНачисления			= ПериодНачисления;
				СтрокаНабор.ДокРегистратор  			= Выборка.ДокРегистратор;
				СтрокаНабор.Разделитель 				= Выборка.Разделитель;
				СтрокаНабор.ОбъемУслуги 				= Текущие - ПредыдущиеМакс;
				НаборРасчетСреднего.Записать(Ложь);
			КонецЕсли;
			
			Если ЭтоМаксимальные или ВСрок тогда 				
				Если ЭтоМаксимальные тогда
					ПериодПредыдущихМаксПок 			= Выборка.ПериодРегистрации;
					ПредыдущиеМакс 						= Текущие;				
					РегистраторМаксимальных 			= Выборка.ДокРегистратор;
					ДатаРегистратораМаксимальных 		= Выборка.ДатаРегистратора
				КонецЕсли;
				
				Если СтрокиТаблицыМаксимальных.Количество() = 0 и ЭтоМаксимальные тогда
					// Строки такой нет значит добавляем.
					СтрокаМаксимальных  				= ТаблицаМаксимальных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаМаксимальных,ПараметрыСтрокиМаксимальных);
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
					СтрокаМаксимальных.МКД 				= ОбъектРасчета.МКД;
				ИначеЕсли СтрокиТаблицыМаксимальных.Количество() = 1 и ЭтоМаксимальные тогда
					// Меняем показания.
					СтрокаМаксимальных  				= СтрокиТаблицыМаксимальных[0];
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
					СтрокаМаксимальных.МКД 				= ОбъектРасчета.МКД;
				ИначеЕсли ЭтоМаксимальные тогда
					// Удаляем строки по прибору учета.
					для Каждого СтрокаТаблицыМаксимальных из СтрокиТаблицыМаксимальных цикл
						ТаблицаМаксимальных.Удалить(СтрокаТаблицыМаксимальных)
					КонецЦикла;
					// Добавляем новую.
					СтрокаМаксимальных  				= ТаблицаМаксимальных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаМаксимальных,ПараметрыСтрокиМаксимальных);
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
					СтрокаМаксимальных.МКД 				= ОбъектРасчета.МКД;
				иначе
					Если СтрокиТаблицыМаксимальных.Количество() > 0 тогда
						// Удаляем строку из максимальных показаний.
						ТаблицаМаксимальных.Удалить(СтрокиТаблицыМаксимальных[0]);
					КонецЕсли;  // Иначе ничего не деляем там и так не никаких данных.
				КонецЕсли; // Иначе ничего не делаем оставляем строку так как она уже есть.
			иначе
				Если СтрокиТаблицыМаксимальных.Количество() > 0 тогда
					// Удаляем строку из максимальных показаний.
					ТаблицаМаксимальных.Удалить(СтрокиТаблицыМаксимальных[0]);
				КонецЕсли;  // Иначе ничего не деляем там и так не никаких данных.
			КонецЕсли; 			
			
			Если  СостояниеПоказаний = ПоказанияПриняты и ВСрок тогда
			//Если  Выборка.СостояниеПоказаний = ПоказанияПриняты или ВСрок тогда

				// Записываем набор.
				НаборПредоставленных 					= РегистрыСведений.бестПредоставленныеПоказанияНП.СоздатьНаборЗаписей();
				НаборПредоставленных.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",истина);
				СтрокаНабор  							= НаборПредоставленных.Добавить();
				СтрокаНабор.ПериодНачисления 			= ПериодНачисления;
				СтрокаНабор.Организация					= Организация;
				СтрокаНабор.Район						= Район;
				СтрокаНабор.Договор						= Договор;
				СтрокаНабор.ОбъектРасчета				= ОбъектРасчета;
				СтрокаНабор.ПриборУчета					= ПриборУчета;
				СтрокаНабор.Шкала						= Шкала;
				СтрокаНабор.ТарифнаяЗона				= ТарифнаяЗона;
				СтрокаНабор.НомерПозиции  				= ТекНомерПозиции;
				СтрокаНабор.ДатаРегистратора  			= Выборка.ПериодРегистрации;
				СтрокаНабор.ДокРегистратор  			= Выборка.ДокРегистратор;
				СтрокаНабор.Разделитель		  			= Выборка.Разделитель;
				СтрокаНабор.Показания  					= ?(ПредыдущиеМакс<0,0,ПредыдущиеМакс);
				СтрокаНабор.ВСрок  						= ВСрок;
				СтрокаНабор.ПоказанияТекущегоПериода	= ПоказанияТекущегоПериода;
				СтрокаНабор.МКД							= ОбъектРасчета.МКД;
				НаборПредоставленных.Записать(Ложь); 				     			
				
				ТекНомерПозиции 						= ТекНомерПозиции +1;			
			КонецЕсли;   
			
			// Записываем максимальные показаний.
			НаборМаксПоказаний.Загрузить(ТаблицаМаксимальных);
			НаборМаксПоказаний.Записать(Ложь);			
		КонецЦикла;
		Набор 											= РегистрыСведений.бестМаксимальныеПоказанияСрезНП.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.Договор.установить(Договор);
		Набор.Отбор.ОбъектРасчета.установить(ОбъектРасчета);
		Набор.Отбор.ПриборУчета.установить(ПриборУчета);
		Набор.Отбор.Шкала.установить(Шкала);
		Набор.Отбор.ТарифнаяЗона.установить(ТарифнаяЗона);
		Набор.Записать();
		  
		Набор 											= РегистрыСведений.бестМаксимальныеПоказанияСрезНП.СоздатьНаборЗаписей();
		СтрокаНабора 									= Набор.Добавить();
		СтрокаНабора.Организация 						= Организация;
		СтрокаНабора.ПериодНачисления 					= ПериодНачисления;
		СтрокаНабора.Район								= Район;
		СтрокаНабора.Договор							= Договор;
		СтрокаНабора.ОбъектРасчета						= ОбъектРасчета;
		СтрокаНабора.ПриборУчета						= ПриборУчета;
		СтрокаНабора.Шкала								= Шкала;
		СтрокаНабора.ТарифнаяЗона						= ТарифнаяЗона;
		СтрокаНабора.Показания 							= ПредыдущиеМакс;
		СтрокаНабора.ДокРегистратор 					= РегистраторМаксимальных;
		СтрокаНабора.ДатаРегистратора 					= ДатаРегистратораМаксимальных;
		СтрокаНабора.МКД 								= ОбъектРасчета.МКД;
		Набор.Записать(Ложь);
		Возврат Ложь;
	Исключение
		Представление  								= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Представление);
		Возврат Истина;
	КонецПопытки;
КонецФункции

Функция ИмяТабличнойЧастиПоказанийНП(Регистратор)
	
    Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.бестЗаключениеДоговоровСЮридическимиЛицами")	тогда
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСДоговором_ОткрытиеДоговора тогда
			Возврат "ПоказанияПриборовУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСДоговором_ЗакрытиеДоговора тогда
			Возврат "ТочкиУчетаЗакрытие";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли  ТипЗнч(Регистратор) = Тип("ДокументСсылка.бестОперацияСПриборомУчетаНП")	тогда
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ВводПУ тогда
			Возврат "ПоказанияПриборовУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ЗаменаПУ тогда
			Возврат "ПоказанияПриборовУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ВыводПУ тогда
			Возврат "ПоказанияПриборовУчета";	
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.бестОперацияСУслугамиНП")	тогда	
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ПодключениеУслуги тогда
			Возврат "ПоказанияПриборовУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ОтключениеУслуги тогда
			Возврат "ПоказанияПриборовУчета";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.бестРегистрацияПоказанийНП")	тогда	
		Возврат "ПоказанияПриборовУчета";			
	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
	КонецЕсли; 	
КонецФункции

Функция ИмяТабличнойЧастиТочкиУчетаНП(Регистратор)
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.бестЗаключениеДоговоровСЮридическимиЛицами")	тогда
		Если Регистратор.ВидОперации  = Перечисления.бестВидыОпераций.ОперацияСДоговором_ОткрытиеДоговора тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.бестВидыОпераций.ОперацияСДоговором_ЗакрытиеДоговора тогда
			Возврат "ТочкиУчетаЗакрытие";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли  ТипЗнч(Регистратор) = Тип("ДокументСсылка.бестОперацияСПриборомУчетаНП")	тогда
		Если Регистратор.ВидОперации  = Перечисления.бестВидыОпераций.ОперацияСПриборомУчета_ВводПУ тогда
			Возврат "ПриборыУчетаВВод";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.бестВидыОпераций.ОперацияСПриборомУчета_ЗаменаПУ тогда
			Возврат "ПриборыУчетаЗамена";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.бестВидыОпераций.ОперацияСПриборомУчета_ВыводПУ тогда
			Возврат "ПриборыУчетаВывод";	
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.бестОперацияСУслугамиНП")	тогда	
		Если Регистратор.ВидОперации  = Перечисления.бестВидыОпераций.ОперацияСУслугами_ПодключениеУслуги тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.бестВидыОпераций.ОперацияСУслугами_ОтключениеУслуги тогда
			Возврат "ТочкиУчета";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.бестРегистрацияПоказанийНП")	тогда	
		Возврат "ТочкиУчета";
	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
	КонецЕсли; 	
КонецФункции


#КонецОбласти

#Область ОтложенныеДвиженияДокументовНачисления

Процедура ОчиститьНаборыЗаписейНП(ПериодНачисления,Район,МКД,ДокРегистратор,ВводНачальныхОстатков)
	
	НаборСтабильныеПериоды					= РегистрыСведений.энргСтабильныеПериоды.СоздатьНаборЗаписей();
	НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
	НаборСтабильныеПериоды.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборСтабильныеПериоды.Отбор.Район.установить(Район);
	НаборСтабильныеПериоды.Отбор.МКД.установить(МКД);
	НаборСтабильныеПериоды.записать();
	
	НаборНомерСтрокСтабПериода 				= РегистрыСведений.энргНомераСтрокСтабильногоПериода.СоздатьНаборЗаписей();
	НаборНомерСтрокСтабПериода.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборНомерСтрокСтабПериода.Отбор.Район.установить(Район);
	НаборНомерСтрокСтабПериода.Отбор.МКД.установить(МКД);
	НаборНомерСтрокСтабПериода.Записать();
	
	НаборМаксимальныеПоказания 				= РегистрыСведений.бестМаксимальныеПоказанияСрез.СоздатьНаборЗаписей();
	НаборМаксимальныеПоказания.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборМаксимальныеПоказания.Отбор.Район.установить(Район);
	НаборМаксимальныеПоказания.Отбор.МКД.установить(МКД);
	НаборМаксимальныеПоказания.Записать();
	
	Если ВводНачальныхОстатков тогда
		НаборМаксимальныеПоказания 			= РегистрыСведений.бестМаксимальныеПоказанияСрез.СоздатьНаборЗаписей();
		НаборМаксимальныеПоказания.Отбор.ПериодНачисления.установить(НачалоМесяца(ПериодНачисления-1));
		НаборМаксимальныеПоказания.Отбор.Район.установить(Район);
		НаборМаксимальныеПоказания.Отбор.МКД.установить(МКД);
		НаборМаксимальныеПоказания.Записать(); 		
	КонецЕсли; 
	
	НаборОтложенныхДвижений  				= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
	НаборОтложенныхДвижений.Отбор.ДокРегистратор.установить(ДокРегистратор);
	НаборОтложенныхДвижений.Записать();
КонецПроцедуры

Функция РезультатНачальныеОстаткиСтабильногоПериодаНП(ПериодНачисления,Организация,Район,ПериодРегистрации,ИсключаяОтдельностоящие = Ложь, Договор = Неопределено)
	
	Разделить = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";  
	
	Текст 	=
	"ВЫБРАТЬ
	|	бестОтложенныеДвиженияДокументовНП.ПериодНачисления КАК ПериодНачисления,
	|	бестОтложенныеДвиженияДокументовНП.Район КАК Район,
	|	бестОтложенныеДвиженияДокументовНП.ДокРегистратор КАК ДокРегистратор,
	|	бестОтложенныеДвиженияДокументовНП.ДатаРегистратора КАК ДатаРегистратора,
	|	бестОтложенныеДвиженияДокументовНП.Организация КАК Организация,
	|	бестОтложенныеДвиженияДокументовНП.Договор КАК Договор
	|ПОМЕСТИТЬ ДокументыДляПроведенияНП
	|ИЗ
	|	РегистрСведений.бестОтложенныеДвиженияДокументовНП КАК бестОтложенныеДвиженияДокументовНП
	|ГДЕ
	|	бестОтложенныеДвиженияДокументовНП.ПериодНачисления = &Периодначисления
	|	И бестОтложенныеДвиженияДокументовНП.Район = &Район
	|	И бестОтложенныеДвиженияДокументовНП.РазделЗаписи = ЗНАЧЕНИЕ(Перечисление.бестРазделыЗаписиНП.СтабильныеПериодыНП)
	|	И бестОтложенныеДвиженияДокументовНП.Организация = &Организация
	|	И бестОтложенныеДвиженияДокументовНП.Договор = &Договор";
	
	Текст 	= Текст + Разделить;	
	
	Текст 	= Текст + СтабильныеПериодыДокументыНачисления(ИсключаяОтдельностоящие,Договор);
	                                                      
	Если Договор = Неопределено тогда
		Текст 				= СтрЗаменить(Текст,"И бестОтложенныеДвиженияДокументовНП.Договор = &Договор","");
	КонецЕсли;

	МВТ 							= Новый МенеджерВременныхТаблиц;
	Запрос  						= Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.УстановитьПараметр("ПериодРегистрации",		ПериодРегистрации);
	Запрос.УстановитьПараметр("ПредыдущийПериод",		НачалоМесяца(ПериодНачисления-1));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Периодначисления",		ПериодНачисления);
	Запрос.УстановитьПараметр("Район",					Район);
	Запрос.УстановитьПараметр("Период",					КонецМесяца(ПериодНачисления));
	
	
	Если Договор <> Неопределено Тогда
		Запрос.УстановитьПараметр("Договор",			Договор);
	КонецЕсли;
	
	Запрос.Выполнить();

	
	Текст 							=	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредоставленныеПоказания.Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	ПредоставленныеПоказания.Район КАК Район,
	|	ПредоставленныеПоказания.Договор КАК Договор,
	|	ПредоставленныеПоказания.ОбъектРасчета КАК ОбъектРасчета,
	|	ПредоставленныеПоказания.ПриборУчета КАК ПриборУчета
	|ПОМЕСТИТЬ ПредоставленныеПоказания
	|ИЗ
	|	РегистрСведений.бестПредоставленныеПоказанияНП КАК ПредоставленныеПоказания
	|ГДЕ
	|	ПредоставленныеПоказания.Организация = &Организация
	|	И ПредоставленныеПоказания.ПериодНачисления = &ПредыдущийПериод
	|	И ПредоставленныеПоказания.Район = &Район
	|	И ПредоставленныеПоказания.Договор = &Договор
	|	И ПредоставленныеПоказания.ПоказанияТекущегоПериода";
	
	//"|ВЫБРАТЬ  
	//|" + бестНачисленияНП.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыНП","ВложенныйЗапрос","НомерПозиции,ИгнорироватьПоказания",Истина,Ложь) + "
	//|	ВложенныйЗапрос.ЭтоВводНачальныхОстатков,
	//|	ВЫБОР
	//|		КОГДА ВложенныйЗапрос.ИгнорироватьПоказания И НЕ ПредоставленныеПоказания.Организация ЕСТЬ NULL 
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ВложенныйЗапрос.ИгнорироватьПоказания
	//|	КОНЕЦ КАК ИгнорироватьПоказания			
	//|ИЗ 
	//|	(ВЫБРАТЬ
	//|		" + бестНачисленияНП.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыНП","СтабильныеПериодыДокументыНачислений","НомерПозиции",Истина,Ложь) + "
	//|		0 КАК НомерПозиции,
	//|		ЛОЖЬ КАК ЭтоВводНачальныхОстатков
	//|	ИЗ
	//|		СтабильныеПериодыДокументыНачислений КАК СтабильныеПериодыДокументыНачислений
	//|
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|	" + бестНачисленияНП.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыНП","СтабильныеПериодыВводНачальныхОстатков","НомерПозиции",Истина,Ложь) + "
	//|		0 КАК НомерПозиции,
	//|		ИСТИНА КАК ЭтоВводНачальныхОстатков
	//|	ИЗ
	//|		СтабильныеПериодыВводНачальныхОстатков КАК СтабильныеПериодыВводНачальныхОстатков) КАК ВложенныйЗапрос
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ПредоставленныеПоказания КАК ПредоставленныеПоказания
	//|		ПО ВложенныйЗапрос.Организация = ПредоставленныеПоказания.Организация
	//|		И ВложенныйЗапрос.ПериодНачисления = ПредоставленныеПоказания.ПериодНачисления
	//|		И ВложенныйЗапрос.Район = ПредоставленныеПоказания.Район
	//|		И ВложенныйЗапрос.Договор = ПредоставленныеПоказания.Договор
	//|		И ВложенныйЗапрос.ОбъектРасчета = ПредоставленныеПоказания.ОбъектРасчета
	//|		И ВложенныйЗапрос.ПриборУчета = ПредоставленныеПоказания.ПриборУчета	
	//|
	//|УПОРЯДОЧИТЬ ПО	
	//|	Организация,
	//|	ПериодНачисления,
	//|	Район,
	//|	Договор,
	//|	ДокРегистратор
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СтабильныеПериодыДокументыНачислений.Организация КАК Организация,
	//|	&ПериодНачисления КАК ПериодНачисления,
	//|	СтабильныеПериодыДокументыНачислений.Район КАК Район,
	//|	СтабильныеПериодыДокументыНачислений.Договор КАК Договор,
	//|	СтабильныеПериодыДокументыНачислений.ОбъектРасчета КАК ОбъектРасчета,
	//|	бестМаксимальныеПоказанияСрезНП.ПриборУчета КАК ПриборУчета,
	//|	бестМаксимальныеПоказанияСрезНП.Шкала КАК Шкала,
	//|	бестМаксимальныеПоказанияСрезНП.ТарифнаяЗона КАК ТарифнаяЗона,
	//|	бестМаксимальныеПоказанияСрезНП.Показания КАК Показания,
	//|	бестМаксимальныеПоказанияСрезНП.ДокРегистратор КАК ДокРегистратор,
	//|	бестМаксимальныеПоказанияСрезНП.ДатаРегистратора КАК ДатаРегистратора,
	//|	ЛОЖЬ КАК ЭтоВводНачальныхОстатков
	//|ИЗ
	//|	СтабильныеПериодыДокументыНачислений КАК СтабильныеПериодыДокументыНачислений
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестМаксимальныеПоказанияСрезНП КАК бестМаксимальныеПоказанияСрезНП
	//|		ПО СтабильныеПериодыДокументыНачислений.Организация = бестМаксимальныеПоказанияСрезНП.Организация
	//|			И (СтабильныеПериодыДокументыНачислений.ПериодНачисления = ДОБАВИТЬКДАТЕ(бестМаксимальныеПоказанияСрезНП.ПериодНачисления, МЕСЯЦ, 1))
	//|			И СтабильныеПериодыДокументыНачислений.Район = бестМаксимальныеПоказанияСрезНП.Район
	//|			И СтабильныеПериодыДокументыНачислений.Договор = бестМаксимальныеПоказанияСрезНП.Договор
	//|			И СтабильныеПериодыДокументыНачислений.ОбъектРасчета = бестМаксимальныеПоказанияСрезНП.ОбъектРасчета
	//|			И СтабильныеПериодыДокументыНачислений.ПриборУчета = бестМаксимальныеПоказанияСрезНП.ПриборУчета
	//|			И (СтабильныеПериодыДокументыНачислений.ПриборВведен)
	//|			И (бестМаксимальныеПоказанияСрезНП.Организация = &Организация)
	//|			И (бестМаксимальныеПоказанияСрезНП.ПериодНачисления = &ПредыдущийПериод)
	//|			И (бестМаксимальныеПоказанияСрезНП.Район = &Район)
	//|			И (бестМаксимальныеПоказанияСрезНП.Договор = &Договор)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВложенныйЗапрос.Организация,
	//|	ВложенныйЗапрос.ПериодНачисления,
	//|	ВложенныйЗапрос.Район,
	//|	ВложенныйЗапрос.Договор,
	//|	ВложенныйЗапрос.ОбъектРасчета,
	//|	ВложенныйЗапрос.ПриборУчета,
	//|	ВложенныйЗапрос.Шкала,
	//|	бестВводНачальныхОстатковЮридическихЛицПоказанияПриборовУчета.ТарифнаяЗона,
	//|	бестВводНачальныхОстатковЮридическихЛицПоказанияПриборовУчета.ТекущиеПоказания,
	//|	ВложенныйЗапрос.ДокРегистратор,
	//|	ВложенныйЗапрос.ДатаРегистратора,
	//|	ИСТИНА
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		СтабильныеПериодыВводНачальныхОстатков.Организация КАК Организация,
	//|		СтабильныеПериодыВводНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	//|		СтабильныеПериодыВводНачальныхОстатков.Район КАК Район,
	//|		СтабильныеПериодыВводНачальныхОстатков.ЧастныйСектор КАК ЧастныйСектор,
	//|		СтабильныеПериодыВводНачальныхОстатков.Строение КАК Строение,
	//|		СтабильныеПериодыВводНачальныхОстатков.Помещение КАК Помещение,
	//|		СтабильныеПериодыВводНачальныхОстатков.ПриборУчета КАК ПриборУчета,
	//|		бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета.Шкала КАК Шкала,
	//|		СтабильныеПериодыВводНачальныхОстатков.ДокРегистратор КАК ДокРегистратор,
	//|		СтабильныеПериодыВводНачальныхОстатков.ДатаРегистратора КАК ДатаРегистратора,
	//|		бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета.IDСтроки КАК IDСтроки
	//|	ИЗ
	//|		СтабильныеПериодыВводНачальныхОстатков КАК СтабильныеПериодыВводНачальныхОстатков
	//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бестВводНачальныхОстатковЮридическихЛиц.ШкалыПриборовУчета КАК бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета
	//|			ПО СтабильныеПериодыВводНачальныхОстатков.ДокРегистратор = бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета.Ссылка
	//|				И СтабильныеПериодыВводНачальныхОстатков.IDСтрокиТочкиУчета = бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета.IDСтрокиТочкиУчета
	//|				И (СтабильныеПериодыВводНачальныхОстатков.ПриборВведен)) КАК ВложенныйЗапрос
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бестВводНачальныхОстатковЮридическихЛиц.ПоказанияПриборовУчета КАК бестВводНачальныхОстатковЮридическихЛицПоказанияПриборовУчета
	//|		ПО ВложенныйЗапрос.ДокРегистратор = бестВводНачальныхОстатковЮридическихЛицПоказанияПриборовУчета.Ссылка
	//|			И ВложенныйЗапрос.IDСтроки = бестВводНачальныхОстатковЮридическихЛицПоказанияПриборовУчета.IDСтроки
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Организация,
	//|	ПериодНачисления,
	//|	Район,
	//|	Договор,
	//|	ОбъектРасчета
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////	
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СтабильныеПериодыДокументыНачислений.Организация КАК Организация,
	//|	СтабильныеПериодыДокументыНачислений.ПериодНачисления КАК ПериодНачисления,
	//|	СтабильныеПериодыДокументыНачислений.ДатаРегистратора КАК ДатаРегистратора,
	//|	СтабильныеПериодыДокументыНачислений.ДокРегистратор КАК ДокРегистратор,
	//|	0 КАК НомерПозиции,
	//|	ПараметрыШкалСтаблиногоПериода.Район КАК Район,
	//|	ПараметрыШкалСтаблиногоПериода.Договор КАК Договор,
	//|	ПараметрыШкалСтаблиногоПериода.ОбъектРасчета КАК ОбъектРасчета,
	//|	ПараметрыШкалСтаблиногоПериода.ТочкаУчета КАК ТочкаУчета,
	//|	ПараметрыШкалСтаблиногоПериода.Шкала КАК Шкала,
	//|	ПараметрыШкалСтаблиногоПериода.ВидДифференцированности КАК ВидДифференцированности
	//|ИЗ
	//|	СтабильныеПериодыДокументыНачислений КАК СтабильныеПериодыДокументыНачислений
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыШкалСтаблиногоПериода КАК ПараметрыШкалСтаблиногоПериода
	//|		ПО СтабильныеПериодыДокументыНачислений.Организация = ПараметрыШкалСтаблиногоПериода.Организация
	//|			И СтабильныеПериодыДокументыНачислений.ПериодНачисления = ПараметрыШкалСтаблиногоПериода.ПериодНачисления
	//|			И СтабильныеПериодыДокументыНачислений.Район = ПараметрыШкалСтаблиногоПериода.Район
	//|			И СтабильныеПериодыДокументыНачислений.Договор = ПараметрыШкалСтаблиногоПериода.Договор
	//|			И СтабильныеПериодыДокументыНачислений.ОбъектРасчета = ПараметрыШкалСтаблиногоПериода.ОбъектРасчета
	//|			И СтабильныеПериодыДокументыНачислений.ТочкаУчета = ПараметрыШкалСтаблиногоПериода.ТочкаУчета
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СтабильныеПериодыВводНачальныхОстатков.Организация,
	//|	СтабильныеПериодыВводНачальныхОстатков.ПериодНачисления,
	//|	СтабильныеПериодыВводНачальныхОстатков.ДатаРегистратора,
	//|	СтабильныеПериодыВводНачальныхОстатков.ДокРегистратор,
	//|	0,
	//|	СтабильныеПериодыВводНачальныхОстатков.Район,
	//|	СтабильныеПериодыВводНачальныхОстатков.Договор,
	//|	СтабильныеПериодыВводНачальныхОстатков.ОбъектРасчета,
	//|	СтабильныеПериодыВводНачальныхОстатков.ТочкаУчета,
	//|	бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета.Шкала,
	//|	бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета.ВидДифференцированности
	//|ИЗ
	//|	СтабильныеПериодыВводНачальныхОстатков КАК СтабильныеПериодыВводНачальныхОстатков
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бестВводНачальныхОстатковЮридическихЛиц.ШкалыПриборовУчета КАК бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета
	//|		ПО СтабильныеПериодыВводНачальныхОстатков.ДокРегистратор = бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета.Ссылка
	//|			И СтабильныеПериодыВводНачальныхОстатков.IDСтрокиТочкиУчета = бестВводНачальныхОстатковЮридическихЛицШкалыПриборовУчета.IDСтрокиТочкиУчета
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Организация,
	//|	ПериодНачисления,
	//|	Район,
	//|	Договор,
	//|	ОбъектРасчета";
	
	
	
	//Текст 	= МаксимальныеПоказанияНПСрез();

	Текст 	= Текст + Разделить;
	
	Текст 	= Текст +  "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыНачальныхОстатков.Организация КАК Организация,
	|	ДокументыНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыНачальныхОстатков.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыНачальныхОстатков.ДокРегистратор КАК ДокРегистратор,
	|	ДокументыНачальныхОстатков.ДокНачислениеДоговор КАК ДокНачислениеДоговор,
	|	ДокументыНачальныхОстатков.МКД КАК МКД,
	|	0 КАК НомерПозиции,	
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыПриборыУзловУчета","СтабильныеПериодыПриборыУзлаУчета","Организация,ПериодНачисления,ДатаРегистратора,ДокРегистратор,НомерПозиции") + "
	|ПОМЕСТИТЬ ДокументыНачальныхОстатковУзлы
	|ИЗ
	|	ДокументыНачальныхОстатков КАК ДокументыНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтабильныеПериодыПриборыУзлаУчета КАК СтабильныеПериодыПриборыУзлаУчета
	|		ПО ДокументыНачальныхОстатков.Организация = СтабильныеПериодыПриборыУзлаУчета.Организация
	|			И ДокументыНачальныхОстатков.ПериодНачисления = СтабильныеПериодыПриборыУзлаУчета.ПериодНачисления
	|			И ДокументыНачальныхОстатков.Район = СтабильныеПериодыПриборыУзлаУчета.Район
	|			И ДокументыНачальныхОстатков.ОбъектРасчета = СтабильныеПериодыПриборыУзлаУчета.ОбъектРасчета
	|			И ДокументыНачальныхОстатков.ТочкаУчета = СтабильныеПериодыПриборыУзлаУчета.ТочкаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыНачальныхОстатков.Организация КАК Организация,
	|	ДокументыНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыНачальныхОстатков.Район КАК Район,
	|	ДокументыНачальныхОстатков.Договор КАК Договор,
	|	ДокументыНачальныхОстатков.МКД КАК МКД,
	|	ДокументыНачальныхОстатков.ОбъектРасчета КАК ОбъектРасчета,
	|	ДокументыНачальныхОстатков.Услуга КАК Услуга,
	|	ДокументыНачальныхОстатков.ТочкаУчета КАК ТочкаУчета,
	|	ДокументыНачальныхОстатков.ПериодРегистрации КАК ПериодРегистрации,
	|	ДокументыНачальныхОстатков.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыНачальныхОстатков.ДокРегистратор КАК ДокРегистратор,
	|	ДокументыНачальныхОстатков.ДоговорЗаключен КАК ДоговорЗаключен,
	|	ДокументыНачальныхОстатков.ОбъектРасчетаПодключен КАК ОбъектРасчетаПодключен,
	|	ДокументыНачальныхОстатков.УслугаПодключена КАК УслугаПодключена,
	|	ДокументыНачальныхОстатков.ПриборВведен КАК ПриборВведен,
	|	ДокументыНачальныхОстатков.ПриборУчета КАК ПриборУчета,
	|	ДокументыНачальныхОстатков.ЗначениеНагрузки КАК ЗначениеНагрузки,
	|	ДокументыНачальныхОстатков.ЗначениеПлощади КАК ЗначениеПлощади,
	|	ДокументыНачальныхОстатков.ТарифнаяГруппа КАК ТарифнаяГруппа,
	|	ДокументыНачальныхОстатков.ДатаПоверки КАК ДатаПоверки,
	|	ДокументыНачальныхОстатков.ЗависимаяТочкаУчета КАК ЗависимаяТочкаУчета,
	|	ДокументыНачальныхОстатков.КоэффициентРасчета КАК КоэффициентРасчета,
	|	ДокументыНачальныхОстатков.ДатаСостоянияПрибора КАК ДатаСостоянияПрибора,
	|	ДокументыНачальныхОстатков.ЗначениеНормативаЗаДень КАК ЗначениеНормативаЗаДень,
	|	ДокументыНачальныхОстатков.ОбъектУчаствуетВРаспределенииМКД КАК ОбъектУчаствуетВРаспределенииМКД,
	|	ДокументыНачальныхОстатков.РасчетПоФормуле КАК РасчетПоФормуле,
	|	ДокументыНачальныхОстатков.ТепловаяСоставляющая КАК ТепловаяСоставляющая,
	|	ДокументыНачальныхОстатков.СпособРасчетаНорматива КАК СпособРасчетаНорматива,
	|	ДокументыНачальныхОстатков.КлючНорматива КАК КлючНорматива,
	|	ДокументыНачальныхОстатков.Поставщик КАК Поставщик,
	|	ДокументыНачальныхОстатков.Шкала КАК Шкала,
	|	ДокументыНачальныхОстатков.НетВозможностьУстановкиПУ КАК НетВозможностьУстановкиПУ,
	|	ДокументыНачальныхОстатков.СоставнаяУслуга КАК СоставнаяУслуга,
	|	ВЫРАЗИТЬ(ДокументыНачальныхОстатков.ФормулаРасчета КАК СТРОКА(500)) КАК ФормулаРасчета,
	|	ДокументыНачальныхОстатков.ТипСхемыГВС КАК ТипСхемыГВС,
	|	ДокументыНачальныхОстатков.ВидТепловогоПункта КАК ВидТепловогоПункта,
	|	ДокументыНачальныхОстатков.ЗначениеМесячнойНагрузки КАК ЗначениеМесячнойНагрузки,
	|	ДокументыНачальныхОстатков.УчаствуетВДолевойСхеме КАК УчаствуетВДолевойСхеме,
	|	ДокументыНачальныхОстатков.СпособРаспределенияОбъемаДолевойТУ КАК СпособРаспределенияОбъемаДолевойТУ,
	|	ДокументыНачальныхОстатков.СпособРаспределенияОстаткаДолевыеСхемы КАК СпособРаспределенияОстаткаДолевыеСхемы,
	|	ДокументыНачальныхОстатков.РасчетИндивидуальногоПотребления КАК РасчетИндивидуальногоПотребления,
	|	ДокументыНачальныхОстатков.КоличествоЧасовРаботы КАК КоличествоЧасовРаботы,
	|	ДокументыНачальныхОстатков.КоэффициентДолевогоРаспределения КАК КоэффициентДолевогоРаспределения,
	|	ДокументыНачальныхОстатков.СхемаРасчетаПриВыходеПУ КАК СхемаРасчетаПриВыходеПУ,
	|	ДокументыНачальныхОстатков.ИндивидуальнаяСезонность КАК ИндивидуальнаяСезонность,
	|	ДокументыНачальныхОстатков.ЧастьУзлаУчета КАК ЧастьУзлаУчета,
	|	ДокументыНачальныхОстатков.РасчетПоФактическомуПотреблению КАК РасчетПоФактическомуПотреблению,
	|	ДокументыНачальныхОстатков.ДиаметрСечения КАК ДиаметрСечения,
	|	0 КАК НомерПозиции,
	|	0 КАК ФиксированныйОбъем,
	|	ЛОЖЬ КАК МенялосьСостояниеПУ,
	|	ЛОЖЬ КАК МенялосьСостояниеФормулы,
	|	ЛОЖЬ КАК ВводНачальныхОстатков
	|ИЗ
	|	ДокументыНачальныхОстатков КАК ДокументыНачальныхОстатков
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДокументыНачальныхОстатков.ДокНачислениеДоговор <> ЗНАЧЕНИЕ(Справочник.энргДоговорыКонтрагентов.ПустаяСсылка)
	|				ТОГДА ДокументыНачальныхОстатков.ДокНачислениеДоговор = ДокументыНачальныхОстатков.Договор
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	Договор,
	|	ДокРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыНачальныхОстатков.Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	ДокументыНачальныхОстатков.Район КАК Район,
	|	ДокументыНачальныхОстатков.МКД КАК МКД,
	|	ДокументыНачальныхОстатков.Договор КАК Договор,
	|	ДокументыНачальныхОстатков.ОбъектРасчета КАК ОбъектРасчета,
	|	бестМаксимальныеПоказанияСрез.ПриборУчета КАК ПриборУчета,
	|	бестМаксимальныеПоказанияСрез.Шкала КАК Шкала,
	|	бестМаксимальныеПоказанияСрез.ТарифнаяЗона КАК ТарифнаяЗона,
	|	бестМаксимальныеПоказанияСрез.Показания КАК Показания,
	|	бестМаксимальныеПоказанияСрез.ДокРегистратор КАК ДокРегистратор,
	|	бестМаксимальныеПоказанияСрез.ДатаРегистратора КАК ДатаРегистратора
	|ИЗ
	|	ДокументыНачальныхОстатковУзлы КАК ДокументыНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестМаксимальныеПоказанияСрезНП КАК бестМаксимальныеПоказанияСрез
	|		ПО ДокументыНачальныхОстатков.Организация = бестМаксимальныеПоказанияСрез.Организация
	|			И (ДокументыНачальныхОстатков.ПериодНачисления = ДОБАВИТЬКДАТЕ(бестМаксимальныеПоказанияСрез.ПериодНачисления, МЕСЯЦ, 1))
	|			И ДокументыНачальныхОстатков.Район = бестМаксимальныеПоказанияСрез.Район
	//|			И ДокументыНачальныхОстатков.МКД = бестМаксимальныеПоказанияСрез.МКД
	|			И ВЫБОР
	|			КОГДА ДокументыНачальныхОстатков.ДокНачислениеДоговор <> ЗНАЧЕНИЕ(Справочник.энргДоговорыКонтрагентов.ПустаяСсылка)
	|				ТОГДА ДокументыНачальныхОстатков.ДокНачислениеДоговор = бестМаксимальныеПоказанияСрез.Договор
	|			ИНАЧЕ ДокументыНачальныхОстатков.Договор = бестМаксимальныеПоказанияСрез.Договор
	|			КОНЕЦ
	|			И ДокументыНачальныхОстатков.ОбъектРасчета = бестМаксимальныеПоказанияСрез.ОбъектРасчета
	|			И ДокументыНачальныхОстатков.ПриборУчета = бестМаксимальныеПоказанияСрез.ПриборУчета
	|			И (ДокументыНачальныхОстатков.ПриборВведен)
	|			И (бестМаксимальныеПоказанияСрез.Организация = &Организация)
	|			И (бестМаксимальныеПоказанияСрез.ПериодНачисления = &ПредыдущийПериод)
	|			И (бестМаксимальныеПоказанияСрез.Район = &Район)
	|			И (бестМаксимальныеПоказанияСрез.Договор = &Договор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыНачальныхОстатков.Организация КАК Организация,
	|	ДокументыНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыНачальныхОстатков.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыНачальныхОстатков.ДокРегистратор КАК ДокРегистратор,
	|	0 КАК НомерПозиции,
	|	ПараметрыШкалСтаблиногоПериода.Район КАК Район,
	|	ПараметрыШкалСтаблиногоПериода.МКД КАК МКД,
	|	ПараметрыШкалСтаблиногоПериода.Договор КАК Договор,
	|	ПараметрыШкалСтаблиногоПериода.ОбъектРасчета КАК ОбъектРасчета,
	|	ПараметрыШкалСтаблиногоПериода.ТочкаУчета КАК ТочкаУчета,
	|	ПараметрыШкалСтаблиногоПериода.ПриборУчета КАК ПриборУчета,
	|	ПараметрыШкалСтаблиногоПериода.Шкала КАК Шкала,
	|	ПараметрыШкалСтаблиногоПериода.ВидДифференцированности КАК ВидДифференцированности
	|ИЗ
	|	ДокументыНачальныхОстатков КАК ДокументыНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыШкалСтаблиногоПериода КАК ПараметрыШкалСтаблиногоПериода
	|		ПО ДокументыНачальныхОстатков.Организация = ПараметрыШкалСтаблиногоПериода.Организация
	|			И ДокументыНачальныхОстатков.ПериодНачисления = ПараметрыШкалСтаблиногоПериода.ПериодНачисления
	|			И ДокументыНачальныхОстатков.Район = ПараметрыШкалСтаблиногоПериода.Район
	|			И ДокументыНачальныхОстатков.ОбъектРасчета = ПараметрыШкалСтаблиногоПериода.ОбъектРасчета
	|			И ДокументыНачальныхОстатков.ТочкаУчета = ПараметрыШкалСтаблиногоПериода.ТочкаУчета
	|			И ВЫБОР
	|			КОГДА ДокументыНачальныхОстатков.ДокНачислениеДоговор <> ЗНАЧЕНИЕ(Справочник.энргДоговорыКонтрагентов.ПустаяСсылка)
	|				ТОГДА ДокументыНачальныхОстатков.ДокНачислениеДоговор = ПараметрыШкалСтаблиногоПериода.Договор
	|			ИНАЧЕ ДокументыНачальныхОстатков.Договор = ПараметрыШкалСтаблиногоПериода.Договор
	|			КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыНачальныхОстатков.Организация КАК Организация,
	|	ДокументыНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыНачальныхОстатков.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыНачальныхОстатков.ДокРегистратор КАК ДокРегистратор,
	|	0 КАК НомерПозиции,	
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыПриборыУзловУчета","СтабильныеПериодыПриборыУзлаУчета","Организация,ПериодНачисления,ДатаРегистратора,ДокРегистратор,НомерПозиции") + "
	|ИЗ
	|	ДокументыНачальныхОстатков КАК ДокументыНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтабильныеПериодыПриборыУзлаУчета КАК СтабильныеПериодыПриборыУзлаУчета
	|		ПО ДокументыНачальныхОстатков.Организация = СтабильныеПериодыПриборыУзлаУчета.Организация
	|			И ДокументыНачальныхОстатков.ПериодНачисления = СтабильныеПериодыПриборыУзлаУчета.ПериодНачисления
	|			И ДокументыНачальныхОстатков.Район = СтабильныеПериодыПриборыУзлаУчета.Район
	|			И ДокументыНачальныхОстатков.ОбъектРасчета = СтабильныеПериодыПриборыУзлаУчета.ОбъектРасчета
	|			И ДокументыНачальныхОстатков.ТочкаУчета = СтабильныеПериодыПриборыУзлаУчета.ТочкаУчета"; 
	
	Если Договор = Неопределено тогда
		Текст 				= СтрЗаменить(Текст,"И бестОтложенныеДвиженияДокументовНП.Договор = &Договор","");
		Текст 				= СтрЗаменить(Текст,"И (бестМаксимальныеПоказанияСрез.Договор = &Договор)","");
		Текст 				= СтрЗаменить(Текст,"И бестПредоставленныеПоказанияНП.Договор = &Договор","");
		Текст 				= СтрЗаменить(Текст,"И ПредоставленныеПоказания.Договор = &Договор","");	
	КонецЕсли;
		
	Запрос.Текст 			= Текст;
		
	Возврат Запрос.ВыполнитьПакет();

			
КонецФункции

Функция СтабильныеПериодыВводНачальныхОстатков()
	Текст 	=  
	"ВЫБРАТЬ
	|	энргВводНачальныхОстатковДанныеТочекУчета.Ссылка КАК Регистратор,
	|	ДокументыДляПроведенияНП.ДатаРегистратора КАК Дата,
	|	энргВводНачальныхОстатков.Район КАК Район,
	|	энргВводНачальныхОстатков.МКД КАК МКД,
	|	ДокументыДляПроведенияНП.ПериодНачисления,
	|	энргВводНачальныхОстатковДанныеТочекУчета.Абонент,
	|	энргВводНачальныхОстатковДанныеТочекУчета.Услуга,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ТочкаУчета,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ВидДифференцированности,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ДатаПодключенияПУ,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ПриборУчета,
	|	ВЫБОР
	|		КОГДА энргВводНачальныхОстатковДанныеТочекУчета.КоэффициентПУ = 0
	|			ТОГДА 1
	|		ИНАЧЕ энргВводНачальныхОстатковДанныеТочекУчета.КоэффициентПУ
	|	КОНЕЦ КАК КоэффициентПУ,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ДатаПоверки,
	|	энргВводНачальныхОстатковДанныеТочекУчета.РасчетПоФормуле,
	|	энргВводНачальныхОстатков.ГруппаПотребителей,
	|	энргВводНачальныхОстатковДанныеТочекУчета.Поставщик,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ЭтоСоставнаяУслуга,
	|	энргВводНачальныхОстатковДанныеТочекУчета.IDСтроки,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ЗависимаяТочка КАК ЗависимаяТочкаУчета,
	|	энргВводНачальныхОстатковДанныеТочекУчета.КоэффициентФормулы КАК КоэффициентРасчета
	|ПОМЕСТИТЬ ДанныеТочекУчета
	|ИЗ
	|	Документ.энргВводНачальныхОстатков.ТочкиУчета КАК энргВводНачальныхОстатковДанныеТочекУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПроведенияНП КАК ДокументыДляПроведения
	|		ПО энргВводНачальныхОстатковДанныеТочекУчета.Ссылка = ДокументыДляПроведения.ДокРегистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков КАК энргВводНачальныхОстатков
	|		ПО энргВводНачальныхОстатковДанныеТочекУчета.Ссылка = энргВводНачальныхОстатков.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТочекУчета.Регистратор,
	|	ДанныеТочекУчета.ПериодНачисления,
	|	ДанныеТочекУчета.Абонент,
	|	ДанныеТочекУчета.Район,
	|	ДанныеТочекУчета.МКД,
	|	ВЫБОР
	|		КОГДА энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка ЕСТЬ NULL 
	|			ТОГДА ДанныеТочекУчета.Услуга
	|		ИНАЧЕ энргВводНачальныхОстатковПоставщикиСоставныхУслуг.ЧастьСоставнойУслуги
	|	КОНЕЦ КАК Услуга,
	|	ДанныеТочекУчета.ТочкаУчета,
	|	ДанныеТочекУчета.ВидДифференцированности,
	|	ДанныеТочекУчета.ДатаПодключенияПУ,
	|	ДанныеТочекУчета.ПриборУчета,
	|	ДанныеТочекУчета.КоэффициентПУ,
	|	ДанныеТочекУчета.ДатаПоверки,
	|	ДанныеТочекУчета.РасчетПоФормуле,
	|	ДанныеТочекУчета.ГруппаПотребителей,
	|	ДанныеТочекУчета.Дата,
	|	ВЫБОР
	|		КОГДА энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка ЕСТЬ NULL 
	|			ТОГДА ДанныеТочекУчета.Поставщик
	|		ИНАЧЕ энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Поставщик
	|	КОНЕЦ КАК Поставщик,
	|	ДанныеТочекУчета.ЗависимаяТочкаУчета,
	|	ДанныеТочекУчета.КоэффициентРасчета
	|ПОМЕСТИТЬ ДанныеУслуг
	|ИЗ
	|	ДанныеТочекУчета КАК ДанныеТочекУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоставщикиСоставныхУслуг КАК энргВводНачальныхОстатковПоставщикиСоставныхУслуг
	|		ПО ДанныеТочекУчета.Регистратор = энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка
	|			И (ДанныеТочекУчета.ЭтоСоставнаяУслуга)
	|			И ДанныеТочекУчета.IDСтроки = энргВводНачальныхОстатковПоставщикиСоставныхУслуг.IDСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУслуг.Регистратор,
	|	ДанныеУслуг.ПериодНачисления,
	|	ДанныеУслуг.Абонент,
	|	ДанныеУслуг.Район,
	|	ДанныеУслуг.МКД,
	|	ДанныеУслуг.Услуга КАК Услуга,
	|	ДанныеУслуг.ТочкаУчета,
	|	ДанныеУслуг.ВидДифференцированности,
	|	ДанныеУслуг.ДатаПодключенияПУ,
	|	ДанныеУслуг.ПриборУчета,
	|	ДанныеУслуг.КоэффициентПУ,
	|	ДанныеУслуг.ДатаПоверки,
	|	ДанныеУслуг.РасчетПоФормуле,
	|	ДанныеУслуг.ГруппаПотребителей,
	|	ДанныеУслуг.Дата,
	|	ДанныеУслуг.Поставщик КАК Поставщик,
	|	ВЫБОР
	|		КОГДА энргВидыУслуг.ВидПлощади ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(перечисление.энргВидыПлощадей.ОбщаяПлощадь)
	|		КОГДА энргВидыУслуг.ВидПлощади = ЗНАЧЕНИЕ(Перечисление.энргВидыПлощадей.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(перечисление.энргВидыПлощадей.ОбщаяПлощадь)
	|		ИНАЧЕ энргВидыУслуг.ВидПлощади
	|	КОНЕЦ КАК ВидПлощади,
	|	ЗНАЧЕНИЕ(Перечисление.энргСпособыОпределенияНормы.ПустаяСсылка) КАК СпособОпределенияНормы,
	|	ДанныеУслуг.ЗависимаяТочкаУчета,
	|	ДанныеУслуг.КоэффициентРасчета
	|ПОМЕСТИТЬ ДанныеВидаПлощадейУслуг
	|ИЗ
	|	ДанныеУслуг КАК ДанныеУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.энргВидыУслуг КАК энргВидыУслуг
	|		ПО ДанныеУслуг.Услуга = энргВидыУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВидаПлощадейУслуг.Регистратор,
	|	ДанныеВидаПлощадейУслуг.ПериодНачисления,
	|	ДанныеВидаПлощадейУслуг.Абонент,
	|	ДанныеВидаПлощадейУслуг.Район,
	|	ДанныеВидаПлощадейУслуг.МКД,
	|	ДанныеВидаПлощадейУслуг.Услуга,
	|	ДанныеВидаПлощадейУслуг.ТочкаУчета,
	|	ДанныеВидаПлощадейУслуг.ВидДифференцированности,
	|	ДанныеВидаПлощадейУслуг.ДатаПодключенияПУ,
	|	ДанныеВидаПлощадейУслуг.ПриборУчета,
	|	ДанныеВидаПлощадейУслуг.КоэффициентПУ,
	|	ДанныеВидаПлощадейУслуг.ДатаПоверки,
	|	ДанныеВидаПлощадейУслуг.РасчетПоФормуле,
	|	ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона, ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка)) КАК ТарифнаяЗона,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.ДатаПоказаний, ДАТАВРЕМЯ(1, 1, 1))) КАК МаксДатаПоказаний,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковКоличествоПрописанных.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодКоличествоПрописанных,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковЗначениеПлощадей.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодЗначПлощадей,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковКоличествоКомнат.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодКоличествоКомнат,
	|	ЕСТЬNULL(энргВводНачальныхОстатковВидыБлагоустройств.ВидБлагоустройств, ЗНАЧЕНИЕ(Справочник.энргВидыБлагоустройств.ПустаяСсылка)) КАК ВидБлагоустройства,
	|	ДанныеВидаПлощадейУслуг.ГруппаПотребителей,
	|	ДанныеВидаПлощадейУслуг.Дата,
	|	ДанныеВидаПлощадейУслуг.Поставщик,
	|	ДанныеВидаПлощадейУслуг.ВидПлощади,
	|	ДанныеВидаПлощадейУслуг.СпособОпределенияНормы,
	|	ДанныеВидаПлощадейУслуг.ЗависимаяТочкаУчета,
	|	ДанныеВидаПлощадейУслуг.КоэффициентРасчета
	|ПОМЕСТИТЬ МаксимальныеДаты
	|ИЗ
	|	ДанныеВидаПлощадейУслуг КАК ДанныеВидаПлощадейУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоказанияПриборовУчета КАК энргВводНачальныхОстатковПоказанияПриборовУчета
	|		ПО ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковПоказанияПриборовУчета.Ссылка
	|			И ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковПоказанияПриборовУчета.Абонент
	|			И ДанныеВидаПлощадейУслуг.ПриборУчета = энргВводНачальныхОстатковПоказанияПриборовУчета.ПриборУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.КоличествоПрописанных КАК энргВводНачальныхОстатковКоличествоПрописанных
	|		ПО ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковКоличествоПрописанных.Абонент
	|			И ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковКоличествоПрописанных.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ЗначениеПлощадей КАК энргВводНачальныхОстатковЗначениеПлощадей
	|		ПО ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковЗначениеПлощадей.Абонент
	|			И ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковЗначениеПлощадей.Ссылка
	|			И ДанныеВидаПлощадейУслуг.ВидПлощади = энргВводНачальныхОстатковЗначениеПлощадей.ВидПлощади
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ВидыБлагоустройств КАК энргВводНачальныхОстатковВидыБлагоустройств
	|		ПО ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковВидыБлагоустройств.Абонент
	|			И ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковВидыБлагоустройств.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.КоличествоКомнат КАК энргВводНачальныхОстатковКоличествоКомнат
	|		ПО ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковКоличествоКомнат.Абонент
	|			И ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковКоличествоКомнат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВидаПлощадейУслуг.Регистратор,
	|	ДанныеВидаПлощадейУслуг.ПериодНачисления,
	|	ДанныеВидаПлощадейУслуг.Абонент,
	|	ДанныеВидаПлощадейУслуг.Район,
	|	ДанныеВидаПлощадейУслуг.ВидПлощади,
	|	ДанныеВидаПлощадейУслуг.СпособОпределенияНормы,
	|	ДанныеВидаПлощадейУслуг.МКД,
	|	ДанныеВидаПлощадейУслуг.Услуга,
	|	ДанныеВидаПлощадейУслуг.ТочкаУчета,
	|	ДанныеВидаПлощадейУслуг.ВидДифференцированности,
	|	ДанныеВидаПлощадейУслуг.ДатаПодключенияПУ,
	|	ДанныеВидаПлощадейУслуг.ПриборУчета,
	|	ДанныеВидаПлощадейУслуг.КоэффициентПУ,
	|	ДанныеВидаПлощадейУслуг.ДатаПоверки,
	|	ДанныеВидаПлощадейУслуг.РасчетПоФормуле,
	|	ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона, ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка)),
	|	ЕСТЬNULL(энргВводНачальныхОстатковВидыБлагоустройств.ВидБлагоустройств, ЗНАЧЕНИЕ(Справочник.энргВидыБлагоустройств.ПустаяСсылка)),
	|	ДанныеВидаПлощадейУслуг.ГруппаПотребителей,
	|	ДанныеВидаПлощадейУслуг.Дата,
	|	ДанныеВидаПлощадейУслуг.Поставщик,
	|	ДанныеВидаПлощадейУслуг.ЗависимаяТочкаУчета,
	|	ДанныеВидаПлощадейУслуг.КоэффициентРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДаты.Регистратор,
	|	МаксимальныеДаты.ПериодНачисления,
	|	МаксимальныеДаты.Абонент,
	|	МаксимальныеДаты.Район,
	|	МаксимальныеДаты.МКД,
	|	МаксимальныеДаты.Услуга,
	|	МаксимальныеДаты.ТочкаУчета,
	|	МаксимальныеДаты.ВидДифференцированности,
	|	МаксимальныеДаты.ДатаПодключенияПУ,
	|	МаксимальныеДаты.ПриборУчета,
	|	МаксимальныеДаты.КоэффициентПУ,
	|	МаксимальныеДаты.ДатаПоверки,
	|	МаксимальныеДаты.ТарифнаяЗона,
	|	МаксимальныеДаты.РасчетПоФормуле,
	|	МаксимальныеДаты.МаксДатаПоказаний,
	|	МаксимальныеДаты.ПериодКоличествоПрописанных,
	|	МаксимальныеДаты.ПериодКоличествоКомнат,
	|	МаксимальныеДаты.ПериодЗначПлощадей,
	|	МаксимальныеДаты.ВидБлагоустройства,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.НомерСтроки, 0)) КАК ПоказанияНомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковКоличествоПрописанных.НомерСтроки, 0)) КАК КоличествоПрописанныхНомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковЗначениеПлощадей.НомерСтроки, 0)) КАК ПериодЗначПлощадейНомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковКоличествоКомнат.НомерСтроки, 0)) КАК КоличествоКомнатНомерСтроки,
	|	МаксимальныеДаты.ГруппаПотребителей,
	|	МаксимальныеДаты.Дата,
	|	МаксимальныеДаты.Поставщик,
	|	МаксимальныеДаты.ВидПлощади,
	|	МаксимальныеДаты.СпособОпределенияНормы,
	|	МаксимальныеДаты.ЗависимаяТочкаУчета,
	|	МаксимальныеДаты.КоэффициентРасчета
	|ПОМЕСТИТЬ МаксимальныеНомераСтрок
	|ИЗ
	|	МаксимальныеДаты КАК МаксимальныеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоказанияПриборовУчета КАК энргВводНачальныхОстатковПоказанияПриборовУчета
	|		ПО МаксимальныеДаты.Регистратор = энргВводНачальныхОстатковПоказанияПриборовУчета.Ссылка
	|			И МаксимальныеДаты.Абонент = энргВводНачальныхОстатковПоказанияПриборовУчета.Абонент
	|			И МаксимальныеДаты.ПриборУчета = энргВводНачальныхОстатковПоказанияПриборовУчета.ПриборУчета
	|			И МаксимальныеДаты.ТарифнаяЗона = энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона
	|			И МаксимальныеДаты.МаксДатаПоказаний = энргВводНачальныхОстатковПоказанияПриборовУчета.ДатаПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.КоличествоПрописанных КАК энргВводНачальныхОстатковКоличествоПрописанных
	|		ПО МаксимальныеДаты.Абонент = энргВводНачальныхОстатковКоличествоПрописанных.Абонент
	|			И МаксимальныеДаты.Регистратор = энргВводНачальныхОстатковКоличествоПрописанных.Ссылка
	|			И МаксимальныеДаты.ПериодКоличествоПрописанных = энргВводНачальныхОстатковКоличествоПрописанных.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ЗначениеПлощадей КАК энргВводНачальныхОстатковЗначениеПлощадей
	|		ПО МаксимальныеДаты.Абонент = энргВводНачальныхОстатковЗначениеПлощадей.Абонент
	|			И МаксимальныеДаты.Регистратор = энргВводНачальныхОстатковЗначениеПлощадей.Ссылка
	|			И МаксимальныеДаты.ВидПлощади = энргВводНачальныхОстатковЗначениеПлощадей.ВидПлощади
	|			И МаксимальныеДаты.ПериодЗначПлощадей = энргВводНачальныхОстатковЗначениеПлощадей.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.КоличествоКомнат КАК энргВводНачальныхОстатковКоличествоКомнат
	|		ПО МаксимальныеДаты.Абонент = энргВводНачальныхОстатковКоличествоКомнат.Абонент
	|			И МаксимальныеДаты.Регистратор = энргВводНачальныхОстатковКоличествоКомнат.Ссылка
	|			И МаксимальныеДаты.ПериодКоличествоКомнат = энргВводНачальныхОстатковКоличествоКомнат.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДаты.Регистратор,
	|	МаксимальныеДаты.ПериодНачисления,
	|	МаксимальныеДаты.Абонент,
	|	МаксимальныеДаты.Район,
	|	МаксимальныеДаты.МКД,
	|	МаксимальныеДаты.Услуга,
	|	МаксимальныеДаты.ТочкаУчета,
	|	МаксимальныеДаты.ВидДифференцированности,
	|	МаксимальныеДаты.ДатаПодключенияПУ,
	|	МаксимальныеДаты.ПриборУчета,
	|	МаксимальныеДаты.КоэффициентПУ,
	|	МаксимальныеДаты.ДатаПоверки,
	|	МаксимальныеДаты.РасчетПоФормуле,
	|	МаксимальныеДаты.ТарифнаяЗона,
	|	МаксимальныеДаты.МаксДатаПоказаний,
	|	МаксимальныеДаты.ПериодКоличествоПрописанных,
	|	МаксимальныеДаты.ПериодКоличествоКомнат,
	|	МаксимальныеДаты.ПериодЗначПлощадей,
	|	МаксимальныеДаты.ВидБлагоустройства,
	|	МаксимальныеДаты.ГруппаПотребителей,
	|	МаксимальныеДаты.Дата,
	|	МаксимальныеДаты.Поставщик,
	|	МаксимальныеДаты.ВидПлощади,
	|	МаксимальныеДаты.СпособОпределенияНормы,
	|	МаксимальныеДаты.ЗависимаяТочкаУчета,
	|	МаксимальныеДаты.КоэффициентРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеНомераСтрок.Регистратор,
	|	МаксимальныеНомераСтрок.ПериодНачисления,
	|	МаксимальныеНомераСтрок.Абонент,
	|	МаксимальныеНомераСтрок.Район,
	|	МаксимальныеНомераСтрок.МКД,
	|	МаксимальныеНомераСтрок.Услуга,
	|	МаксимальныеНомераСтрок.ТочкаУчета,
	|	МаксимальныеНомераСтрок.ВидДифференцированности,
	|	МаксимальныеНомераСтрок.ДатаПодключенияПУ,
	|	МаксимальныеНомераСтрок.ПриборУчета,
	|	МаксимальныеНомераСтрок.КоэффициентПУ,
	|	МаксимальныеНомераСтрок.ДатаПоверки,
	|	МаксимальныеНомераСтрок.РасчетПоФормуле,
	|	МаксимальныеНомераСтрок.ТарифнаяЗона,
	|	ЕСТЬNULL(энргВводНачальныхОстатковЗначениеПлощадей.ЗначениеПлощади, 0) КАК Площадь,
	|	ЕСТЬNULL(энргВводНачальныхОстатковКоличествоПрописанных.Прописанных, 0) КАК КоличествоПрописанных,
	|	ЕСТЬNULL(энргВводНачальныхОстатковКоличествоКомнат.Количество, 0) КАК КоличествоКомнат,
	|	ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.Показание, 0) КАК Показания,
	|	ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.ДатаПоказаний, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоказаний,
	|	МаксимальныеНомераСтрок.ГруппаПотребителей,
	|	МаксимальныеНомераСтрок.ВидБлагоустройства,
	|	МаксимальныеНомераСтрок.Дата,
	|	ЕСТЬNULL(энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон.ОтключатьВНеполивнойСезон, ЛОЖЬ) КАК ОтключатьВНеполивнойСезон,
	|	МаксимальныеНомераСтрок.Поставщик,
	|	МаксимальныеНомераСтрок.ЗависимаяТочкаУчета,
	|	МаксимальныеНомераСтрок.КоэффициентРасчета,
	|	МаксимальныеНомераСтрок.СпособОпределенияНормы
	|ПОМЕСТИТЬ РасчетныеДанные
	|ИЗ
	|	МаксимальныеНомераСтрок КАК МаксимальныеНомераСтрок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоказанияПриборовУчета КАК энргВводНачальныхОстатковПоказанияПриборовУчета
	|		ПО МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковПоказанияПриборовУчета.Ссылка
	|			И МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковПоказанияПриборовУчета.Абонент
	|			И МаксимальныеНомераСтрок.ПриборУчета = энргВводНачальныхОстатковПоказанияПриборовУчета.ПриборУчета
	|			И МаксимальныеНомераСтрок.ТарифнаяЗона = энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона
	|			И МаксимальныеНомераСтрок.МаксДатаПоказаний = энргВводНачальныхОстатковПоказанияПриборовУчета.ДатаПоказаний
	|			И МаксимальныеНомераСтрок.ПоказанияНомерСтроки = энргВводНачальныхОстатковПоказанияПриборовУчета.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.КоличествоПрописанных КАК энргВводНачальныхОстатковКоличествоПрописанных
	|		ПО МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковКоличествоПрописанных.Абонент
	|			И МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковКоличествоПрописанных.Ссылка
	|			И МаксимальныеНомераСтрок.ПериодКоличествоПрописанных = энргВводНачальныхОстатковКоличествоПрописанных.Период
	|			И МаксимальныеНомераСтрок.КоличествоПрописанныхНомерСтроки = энргВводНачальныхОстатковКоличествоПрописанных.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ЗначениеПлощадей КАК энргВводНачальныхОстатковЗначениеПлощадей
	|		ПО МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковЗначениеПлощадей.Абонент
	|			И МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковЗначениеПлощадей.Ссылка
	|			И МаксимальныеНомераСтрок.ВидПлощади = энргВводНачальныхОстатковЗначениеПлощадей.ВидПлощади
	|			И МаксимальныеНомераСтрок.ПериодЗначПлощадей = энргВводНачальныхОстатковЗначениеПлощадей.Период
	|			И МаксимальныеНомераСтрок.ПериодЗначПлощадейНомерСтроки = энргВводНачальныхОстатковЗначениеПлощадей.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ОтключаемыеВНеполивнойСезон КАК энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон
	|		ПО МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон.Абонент
	|			И МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон.Ссылка
	|			И МаксимальныеНомераСтрок.Услуга = энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.КоличествоКомнат КАК энргВводНачальныхОстатковКоличествоКомнат
	|		ПО МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковКоличествоКомнат.Абонент
	|			И МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковКоличествоКомнат.Ссылка
	|			И МаксимальныеНомераСтрок.ПериодКоличествоКомнат = энргВводНачальныхОстатковКоличествоКомнат.Период
	|			И МаксимальныеНомераСтрок.КоличествоКомнатНомерСтроки = энргВводНачальныхОстатковКоличествоКомнат.НомерСтроки";
	
	Возврат Текст;
	
КонецФункции 

Функция СтабильныеПериодыДокументыНачисления(ИсключаяОтдельностоящие,Договор)
	
	Текст 	=  
	"ВЫБРАТЬ
	|	бестСтабильныеПериодыНП.ПериодНачисления КАК ПериодНачисления,
	|	бестСтабильныеПериодыНП.Район КАК Район,
	|	бестСтабильныеПериодыНП.МКД КАК МКД,
	|	бестСтабильныеПериодыНП.Услуга КАК Услуга,
	|	бестСтабильныеПериодыНП.ТочкаУчета КАК ТочкаУчета,
	|	МАКСИМУМ(бестСтабильныеПериодыНП.НомерПозиции) КАК НомерПозиции,
	|	бестСтабильныеПериодыНП.Организация КАК Организация,
	|	бестСтабильныеПериодыНП.Договор КАК Договор,
	|	бестСтабильныеПериодыНП.ОбъектРасчета КАК ОбъектРасчета
	|ПОМЕСТИТЬ НомерСтрок
	|ИЗ
	|	РегистрСведений.бестСтабильныеПериодыНП КАК бестСтабильныеПериодыНП
	|ГДЕ
	|	бестСтабильныеПериодыНП.ПериодНачисления = &ПредыдущийПериод
	|	И бестСтабильныеПериодыНП.Район = &Район
	|	И бестСтабильныеПериодыНП.Организация = &Организация
	//|	И бестСтабильныеПериодыНП.МКД = &МКД
	|	И бестСтабильныеПериодыНП.Договор = &Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	бестСтабильныеПериодыНП.ПериодНачисления,
	|	бестСтабильныеПериодыНП.Район,
	|	бестСтабильныеПериодыНП.МКД,
	|	бестСтабильныеПериодыНП.Услуга,
	|	бестСтабильныеПериодыНП.ТочкаУчета,
	|	бестСтабильныеПериодыНП.Организация,
	|	бестСтабильныеПериодыНП.Договор,
	|	бестСтабильныеПериодыНП.ОбъектРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	0 КАК НомерПозиции,
	| "+ бестНачисленияНП.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыНП","СтабильныеПериоды","Организация,ПериодНачисления,НомерПозиции") + "
	|ПОМЕСТИТЬ ПараметрыСтаблиногоПериода
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестСтабильныеПериодыНП КАК СтабильныеПериоды
	|		ПО НомерСтрок.ПериодНачисления = СтабильныеПериоды.ПериодНачисления
	|			И НомерСтрок.Организация = СтабильныеПериоды.Организация
	|			И НомерСтрок.Район = СтабильныеПериоды.Район
	|			И НомерСтрок.Договор = СтабильныеПериоды.Договор
	|			И НомерСтрок.ОбъектРасчета = СтабильныеПериоды.ОбъектРасчета
	//|			И НомерСтрок.МКД = СтабильныеПериоды.МКД
	|			И НомерСтрок.Услуга = СтабильныеПериоды.Услуга
	|			И НомерСтрок.ТочкаУчета = СтабильныеПериоды.ТочкаУчета
	|			И НомерСтрок.НомерПозиции = СтабильныеПериоды.НомерПозиции
	|			И (СтабильныеПериоды.ПериодНачисления = &ПредыдущийПериод)
	|			И (СтабильныеПериоды.Район = &Район)
	|			И (СтабильныеПериоды.Организация = &Организация)
	|			И (СтабильныеПериоды.Договор = &Договор)
	|ГДЕ
	|	СтабильныеПериоды.ДоговорЗаключен
	|;
	|ВЫБРАТЬ
	| "+ энргНачисления.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыНП","ПараметрыСтаблиногоПериода","ПериодРегистрации,ДатаРегистратора,ДокРегистратор",Истина,Ложь) + "
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	ДокументыДляПроведенияНП.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыДляПроведенияНП.ДокРегистратор КАК ДокРегистратор,
	|	ВЫБОР
	|	КОГДА ДокументыДляПроведенияНП.ДокРегистратор ССЫЛКА Документ.бестНачислениеНП
	|		ТОГДА ДокументыДляПроведенияНП.ДокРегистратор.Договор
	|	КОНЕЦ КАК ДокНачислениеДоговор
	|ПОМЕСТИТЬ ДокументыНачальныхОстатков
	|ИЗ
	|	ПараметрыСтаблиногоПериода КАК ПараметрыСтаблиногоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПроведенияНП КАК ДокументыДляПроведенияНП
	|		ПО ПараметрыСтаблиногоПериода.Организация = ДокументыДляПроведенияНП.Организация
	|			И ПараметрыСтаблиногоПериода.ПериодНачисления = ДокументыДляПроведенияНП.ПериодНачисления
	|			И ПараметрыСтаблиногоПериода.Район = ДокументыДляПроведенияНП.Район
	|			И ПараметрыСтаблиногоПериода.Договор = ДокументыДляПроведенияНП.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыШкалыНП","СтабильныеПериодыШкалы","Организация,ПериодНачисления,НомерПозиции,ДатаРегистратора,ДокРегистратор") + "		
	|ПОМЕСТИТЬ ПараметрыШкалСтаблиногоПериода
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестСтабильныеПериодыШкалыНП КАК СтабильныеПериодыШкалы
	|		ПО НомерСтрок.Организация = СтабильныеПериодыШкалы.Организация
	|			И НомерСтрок.ПериодНачисления = СтабильныеПериодыШкалы.ПериодНачисления
	|			И НомерСтрок.Район = СтабильныеПериодыШкалы.Район
	|			И НомерСтрок.Договор = СтабильныеПериодыШкалы.Договор
	|			И НомерСтрок.ОбъектРасчета = СтабильныеПериодыШкалы.ОбъектРасчета
	//|			И НомерСтрок.МКД = СтабильныеПериодыШкалы.МКД
	|			И НомерСтрок.ТочкаУчета = СтабильныеПериодыШкалы.ТочкаУчета	
	|			И НомерСтрок.НомерПозиции = СтабильныеПериодыШкалы.НомерПозиции
	|			И (СтабильныеПериодыШкалы.Организация = &Организация)
	|			И (СтабильныеПериодыШкалы.ПериодНачисления = &ПредыдущийПериод)
	|			И (СтабильныеПериодыШкалы.Район = &Район) 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("бестСтабильныеПериодыПриборыУзловУчета","бестСтабильныеПериодыПриборыУзловУчета","Организация,ПериодНачисления,НомерПозиции,ДокРегистратор") + "
	|ПОМЕСТИТЬ СтабильныеПериодыПриборыУзлаУчета
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестСтабильныеПериодыПриборыУзловУчета КАК бестСтабильныеПериодыПриборыУзловУчета
	|		ПО НомерСтрок.Организация = бестСтабильныеПериодыПриборыУзловУчета.Организация
	|			И НомерСтрок.ПериодНачисления = бестСтабильныеПериодыПриборыУзловУчета.ПериодНачисления
	|			И НомерСтрок.Район = бестСтабильныеПериодыПриборыУзловУчета.Район
	|			И НомерСтрок.Договор = бестСтабильныеПериодыПриборыУзловУчета.Договор
	|			И НомерСтрок.ОбъектРасчета = бестСтабильныеПериодыПриборыУзловУчета.ОбъектРасчета
	|			И НомерСтрок.ТочкаУчета = бестСтабильныеПериодыПриборыУзловУчета.ТочкаУчета	
	|			И НомерСтрок.НомерПозиции = бестСтабильныеПериодыПриборыУзловУчета.НомерПозиции
	|			И (бестСтабильныеПериодыПриборыУзловУчета.Организация = &Организация)
	|			И (бестСтабильныеПериодыПриборыУзловУчета.ПериодНачисления = &ПредыдущийПериод)
	|			И (бестСтабильныеПериодыПриборыУзловУчета.Район = &Район)";

	
	Если Договор = Неопределено Тогда
		Текст = СтрЗаменить(Текст,"И бестНомераСтрокСтабильногоПериодаНП.Договор = &Договор","");
		Текст = СтрЗаменить(Текст,"И (СтабильныеПериоды.Договор = &Договор)","");
		Текст = СтрЗаменить(Текст,"И (СтабильныеПериодыШкалы.Договор = &Договор)","");
		Текст = СтрЗаменить(Текст,"И бестСтабильныеПериодыНП.Договор = &Договор","");	
	КонецЕсли;
	

	Возврат Текст;
	
КонецФункции  

Функция МаксимальныеПоказанияНПСрез()
	
	Текст 	=  
	"ВЫБРАТЬ
	|	бестПредоставленныеПоказанияНП.Организация КАК Организация,
	|	бестПредоставленныеПоказанияНП.ПериодНачисления КАК ПериодНачисления,
	|	бестПредоставленныеПоказанияНП.Договор КАК Договор,
	|	бестПредоставленныеПоказанияНП.ОбъектРасчета КАК ОбъектРасчета,
	|	бестПредоставленныеПоказанияНП.Район КАК Район,
	|	бестПредоставленныеПоказанияНП.ПриборУчета КАК ПриборУчета,
	|	бестПредоставленныеПоказанияНП.ТарифнаяЗона КАК ТарифнаяЗона,
	|	бестПредоставленныеПоказанияНП.НомерПозиции КАК НомерПозиции,
	|	бестПредоставленныеПоказанияНП.Разделитель КАК Разделитель,
	|	бестПредоставленныеПоказанияНП.ДатаРегистратора КАК ДатаРегистратора,
	|	бестПредоставленныеПоказанияНП.ДокРегистратор КАК ДокРегистратор,
	|	бестПредоставленныеПоказанияНП.Показания КАК Показания,
	|	бестПредоставленныеПоказанияНП.Шкала КАК Шкала
	|ПОМЕСТИТЬ НаборПредоставленныхПоказаний
	|ИЗ
	|	РегистрСведений.бестПредоставленныеПоказанияНП КАК бестПредоставленныеПоказанияНП
	|ГДЕ
	|	бестПредоставленныеПоказанияНП.Организация = &Организация
	|	И бестПредоставленныеПоказанияНП.ПериодНачисления = &ПредыдущийПериод
	|	И бестПредоставленныеПоказанияНП.Район = &Район
	|	И бестПредоставленныеПоказанияНП.Договор = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПредоставленныхПоказаний.Организация КАК Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления КАК ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор КАК Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета КАК ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.Район КАК Район,
	|	НаборПредоставленныхПоказаний.ПриборУчета КАК ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МАКСИМУМ(НаборПредоставленныхПоказаний.НомерПозиции) КАК НомерПозиции,
	|	НаборПредоставленныхПоказаний.Шкала КАК Шкала
	|ПОМЕСТИТЬ МаксНомерПозиции
	|ИЗ
	|	НаборПредоставленныхПоказаний КАК НаборПредоставленныхПоказаний
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборПредоставленныхПоказаний.Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.Район,
	|	НаборПредоставленныхПоказаний.ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона,
	|	НаборПредоставленныхПоказаний.Шкала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПредоставленныхПоказаний.Организация КАК Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления КАК ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор КАК Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета КАК ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.Район КАК Район,
	|	НаборПредоставленныхПоказаний.ПриборУчета КАК ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МАКСИМУМ(НаборПредоставленныхПоказаний.ДатаРегистратора) КАК ДатаРегистратора,
	|	НаборПредоставленныхПоказаний.НомерПозиции КАК НомерПозиции,
	|	НаборПредоставленныхПоказаний.Шкала КАК Шкала
	|ПОМЕСТИТЬ МаксДатаРегистратора
	|ИЗ
	|	НаборПредоставленныхПоказаний КАК НаборПредоставленныхПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксНомерПозиции КАК МаксНомерПозиции
	|		ПО НаборПредоставленныхПоказаний.Организация = МаксНомерПозиции.Организация
	|			И НаборПредоставленныхПоказаний.Район = МаксНомерПозиции.Район
	|			И НаборПредоставленныхПоказаний.Договор = МаксНомерПозиции.Договор
	|			И НаборПредоставленныхПоказаний.ОбъектРасчета = МаксНомерПозиции.ОбъектРасчета
	|			И НаборПредоставленныхПоказаний.ПериодНачисления = МаксНомерПозиции.ПериодНачисления
	|			И НаборПредоставленныхПоказаний.ПриборУчета = МаксНомерПозиции.ПриборУчета
	|			И НаборПредоставленныхПоказаний.ТарифнаяЗона = МаксНомерПозиции.ТарифнаяЗона
	|			И НаборПредоставленныхПоказаний.НомерПозиции = МаксНомерПозиции.НомерПозиции
	|			И НаборПредоставленныхПоказаний.Шкала = МаксНомерПозиции.Шкала
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборПредоставленныхПоказаний.Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.Район,
	|	НаборПредоставленныхПоказаний.ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона,
	|	НаборПредоставленныхПоказаний.НомерПозиции,
	|	НаборПредоставленныхПоказаний.Шкала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПредоставленныхПоказаний.Организация КАК Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления КАК ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор КАК Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета КАК ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.Район КАК Район,
	|	НаборПредоставленныхПоказаний.ПриборУчета КАК ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона КАК ТарифнаяЗона,
	|	НаборПредоставленныхПоказаний.ДатаРегистратора КАК ДатаРегистратора,
	|	МАКСИМУМ(НаборПредоставленныхПоказаний.ДокРегистратор) КАК ДокРегистратор,
	|	НаборПредоставленныхПоказаний.НомерПозиции КАК НомерПозиции,
	|	НаборПредоставленныхПоказаний.Шкала КАК Шкала
	|ПОМЕСТИТЬ МаксРегистратор
	|ИЗ
	|	НаборПредоставленныхПоказаний КАК НаборПредоставленныхПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксДатаРегистратора КАК МаксДатаРегистратора
	|		ПО НаборПредоставленныхПоказаний.Организация = МаксДатаРегистратора.Организация
	|			И НаборПредоставленныхПоказаний.ПериодНачисления = МаксДатаРегистратора.ПериодНачисления
	|			И НаборПредоставленныхПоказаний.Район = МаксДатаРегистратора.Район
	|			И НаборПредоставленныхПоказаний.Договор = МаксДатаРегистратора.Договор
	|			И НаборПредоставленныхПоказаний.ОбъектРасчета = МаксДатаРегистратора.ОбъектРасчета
	|			И НаборПредоставленныхПоказаний.ПриборУчета = МаксДатаРегистратора.ПриборУчета
	|			И НаборПредоставленныхПоказаний.ТарифнаяЗона = МаксДатаРегистратора.ТарифнаяЗона
	|			И НаборПредоставленныхПоказаний.ДатаРегистратора = МаксДатаРегистратора.ДатаРегистратора
	|			И НаборПредоставленныхПоказаний.НомерПозиции = МаксДатаРегистратора.НомерПозиции
	|			И НаборПредоставленныхПоказаний.Шкала = МаксДатаРегистратора.Шкала
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборПредоставленныхПоказаний.Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.Район,
	|	НаборПредоставленныхПоказаний.ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона,
	|	НаборПредоставленныхПоказаний.ДатаРегистратора,
	|	НаборПредоставленныхПоказаний.НомерПозиции,
	|	НаборПредоставленныхПоказаний.Шкала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПредоставленныхПоказаний.Организация КАК Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления КАК ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор КАК Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета КАК ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.ПриборУчета КАК ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МАКСИМУМ(НаборПредоставленныхПоказаний.Разделитель) КАК Разделитель,
	|	НаборПредоставленныхПоказаний.ДатаРегистратора КАК ДатаРегистратора,
	|	НаборПредоставленныхПоказаний.ДокРегистратор КАК ДокРегистратор,
	|	НаборПредоставленныхПоказаний.Район КАК Район,
	|	НаборПредоставленныхПоказаний.НомерПозиции КАК НомерПозиции,
	|	НаборПредоставленныхПоказаний.Шкала КАК Шкала
	|ПОМЕСТИТЬ МаксРазделитель
	|ИЗ
	|	НаборПредоставленныхПоказаний КАК НаборПредоставленныхПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксРегистратор КАК МаксРегистратор
	|		ПО НаборПредоставленныхПоказаний.Организация = МаксРегистратор.Организация
	|			И НаборПредоставленныхПоказаний.ПериодНачисления = МаксРегистратор.ПериодНачисления
	|			И НаборПредоставленныхПоказаний.Район = МаксРегистратор.Район
	|			И НаборПредоставленныхПоказаний.Договор = МаксРегистратор.Договор
	|			И НаборПредоставленныхПоказаний.ОбъектРасчета = МаксРегистратор.ОбъектРасчета
	|			И НаборПредоставленныхПоказаний.ПриборУчета = МаксРегистратор.ПриборУчета
	|			И НаборПредоставленныхПоказаний.ТарифнаяЗона = МаксРегистратор.ТарифнаяЗона
	|			И НаборПредоставленныхПоказаний.ДатаРегистратора = МаксРегистратор.ДатаРегистратора
	|			И НаборПредоставленныхПоказаний.ДокРегистратор = МаксРегистратор.ДокРегистратор
	|			И НаборПредоставленныхПоказаний.НомерПозиции = МаксРегистратор.НомерПозиции
	|			И НаборПредоставленныхПоказаний.Шкала = МаксРегистратор.Шкала
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборПредоставленныхПоказаний.Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона,
	|	НаборПредоставленныхПоказаний.ДатаРегистратора,
	|	НаборПредоставленныхПоказаний.ДокРегистратор,
	|	НаборПредоставленныхПоказаний.Район,
	|	НаборПредоставленныхПоказаний.НомерПозиции,
	|	НаборПредоставленныхПоказаний.Шкала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПредоставленныхПоказаний.Организация КАК Организация,
	|	НаборПредоставленныхПоказаний.ПериодНачисления КАК ПериодНачисления,
	|	НаборПредоставленныхПоказаний.Договор КАК Договор,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета КАК ОбъектРасчета,
	|	НаборПредоставленныхПоказаний.ПриборУчета КАК ПриборУчета,
	|	НаборПредоставленныхПоказаний.ТарифнаяЗона КАК ТарифнаяЗона,
	|	НаборПредоставленныхПоказаний.Разделитель КАК Разделитель,
	|	НаборПредоставленныхПоказаний.ДатаРегистратора КАК ДатаРегистратора,
	|	НаборПредоставленныхПоказаний.ДокРегистратор КАК ДокРегистратор,
	|	НаборПредоставленныхПоказаний.НомерПозиции КАК НомерПозиции,
	|	НаборПредоставленныхПоказаний.Район КАК Район,
	|	НаборПредоставленныхПоказаний.Показания КАК Показания,
	|	НаборПредоставленныхПоказаний.ОбъектРасчета.МКД КАК МКД,
	|	НаборПредоставленныхПоказаний.Шкала КАК Шкала
	|ПОМЕСТИТЬ бестМаксимальныеПоказанияСрез
	|ИЗ
	|	НаборПредоставленныхПоказаний КАК НаборПредоставленныхПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксРазделитель КАК МаксРазделитель
	|		ПО НаборПредоставленныхПоказаний.Организация = МаксРазделитель.Организация
	|			И НаборПредоставленныхПоказаний.ПериодНачисления = МаксРазделитель.ПериодНачисления
	|			И НаборПредоставленныхПоказаний.Договор = МаксРазделитель.Договор
	|			И НаборПредоставленныхПоказаний.ОбъектРасчета = МаксРазделитель.ОбъектРасчета
	|			И НаборПредоставленныхПоказаний.ПриборУчета = МаксРазделитель.ПриборУчета
	|			И НаборПредоставленныхПоказаний.ТарифнаяЗона = МаксРазделитель.ТарифнаяЗона
	|			И НаборПредоставленныхПоказаний.ДатаРегистратора = МаксРазделитель.ДатаРегистратора
	|			И НаборПредоставленныхПоказаний.ДокРегистратор = МаксРазделитель.ДокРегистратор
	|			И НаборПредоставленныхПоказаний.Разделитель = МаксРазделитель.Разделитель
	|			И НаборПредоставленныхПоказаний.НомерПозиции = МаксРазделитель.НомерПозиции
	|			И НаборПредоставленныхПоказаний.ПриборУчета = МаксРазделитель.ПриборУчета
	|			И НаборПредоставленныхПоказаний.Шкала = МаксРазделитель.Шкала";
	
	Возврат Текст;
КонецФункции  

#КонецОбласти

#Область СреднийОбъемПотребленияНП

Функция РезультатаЗапросаСреднегоПотребленияНП(Организация, ПериодНачисления,Район,ОтборПоДому,Договор)
	
	ГраницыПериода  								= Обработки.энргГраницыПериодаНачисленияМенеджер.ГраницыРасчетногоПериода(Организация, Район, ПериодНачисления);
	НачалоПериодаРасчета							= ГраницыПериода.НачалоОП;
	
	Запрос  		= Новый Запрос;
	Запрос.УстановитьПараметр("Район",				Район);
	Запрос.УстановитьПараметр("Период",				НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",	ПериодНачисления);
	Запрос.УстановитьПараметр("ПериодВвода",		ДобавитьМесяц(ПериодНачисления,-2));
	Запрос.УстановитьПараметр("НачалоПериода",		ДобавитьМесяц(НачалоМесяца(ПериодНачисления),-6));
	Запрос.УстановитьПараметр("КонецПериода",		НачалоМесяца(ПериодНачисления)-1);
	Текст 			= ТекстЗапросаСреднийОбъемНП();
	
	Если Договор<>Неопределено тогда
		Запрос.УстановитьПараметр("Договор",Договор);
	иначе
		Текст 		= СтрЗаменить(Текст,"И (бестСтабильныеПериодыНП.Договор = &Договор)","");
		Текст 		= СтрЗаменить(Текст,"И (бестРасчетСреднегоОбъемаНП.Договор = &Договор)","");		
	КонецЕсли; 	
	
	Запрос.Текст 	= Текст;
	Результат  		= Запрос.Выполнить();
	Возврат результат;
КонецФункции

Функция ТекстЗапросаСреднийОбъемНП()
	
	текст  = "ВЫБРАТЬ
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.Организация КАК Организация,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.Услуга КАК Услуга,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.КоличествоПоказаний КАК КоличествоПоказаний,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.КоличествоПериодов КАК КоличествоПериодов,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.ЗаПрошлыйГод КАК ЗаПрошлыйГод,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.ПоВсемНачислениям КАК ПоВсемНачислениям,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.ЗаПрошлыйГодОбъемПотребленный КАК ЗаПрошлыйГодОбъемПотребленный,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.КоличествоПериодовОбъемПотребленный КАК КоличествоПериодовОбъемПотребленный,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.КоличествоПоказанийОбъемПотребленный КАК КоличествоПоказанийОбъемПотребленный,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.НачислятьСреднийОбъемНеБолееМесяцев КАК НачислятьСреднийОбъемНеБолееМесяцев,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.НачислятьСреднийОбъемНеБолееМесяцевОбъемПотребленный КАК НачислятьСреднийОбъемНеБолееМесяцевОбъемПотребленный,
	         |	бестНастройкиРасчетаСреднегоПотребленияСрезПоследних.ПоВсемНачислениямОбъемПотребленный КАК ПоВсемНачислениямОбъемПотребленный
	         |ПОМЕСТИТЬ НастройкиРасчетаСреднегоПотребления
	         |ИЗ
	         |	РегистрСведений.бестНастройкиРасчетаСреднегоПотребления.СрезПоследних(&ПериодНачисления, Организация = &Организация) КАК бестНастройкиРасчетаСреднегоПотребленияСрезПоследних
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	бестРасчетСреднегоОбъемаНП.Район КАК Район,
	         |	бестРасчетСреднегоОбъемаНП.МКД КАК МКД,
	         |	бестРасчетСреднегоОбъемаНП.ТочкаУчета КАК ТочкаУчета,
	         |	СтабильныеПериоды.Услуга КАК Услуга,
	         |	бестРасчетСреднегоОбъемаНП.Шкала КАК Шкала,
	         |	бестРасчетСреднегоОбъемаНП.ТарифнаяЗона КАК ТарифнаяЗона,
	         |	МАКСИМУМ(бестРасчетСреднегоОбъемаНП.ПериодНачисления) КАК КонецПериода,
	         |	МАКСИМУМ(СтабильныеПериоды.КоличествоПериодов) КАК КоличествоПериодов,
	         |	МАКСИМУМ(СтабильныеПериоды.ЗаПрошлыйГод) КАК ЗаПрошлыйГод,
	         |	МАКСИМУМ(СтабильныеПериоды.ПоВсемНачислениям) КАК ПоВсемНачислениям,
	         |	бестРасчетСреднегоОбъемаНП.Договор КАК Договор,
	         |	бестРасчетСреднегоОбъемаНП.ОбъектРасчета КАК ОбъектРасчета
	         |ПОМЕСТИТЬ ТочкиДляРасчета
	         |ИЗ
	         |	(ВЫБРАТЬ
	         |		бестСтабильныеПериодыНП.Район КАК Район,
	         |		бестСтабильныеПериодыНП.МКД КАК МКД,
	         |		бестСтабильныеПериодыНП.ТочкаУчета КАК ТочкаУчета,
	         |		бестСтабильныеПериодыНП.Услуга КАК Услуга,
	         |		НастройкиРасчетаСреднегоПотребления.КоличествоПериодов КАК КоличествоПериодов,
	         |		НастройкиРасчетаСреднегоПотребления.ЗаПрошлыйГод КАК ЗаПрошлыйГод,
	         |		НастройкиРасчетаСреднегоПотребления.ПоВсемНачислениям КАК ПоВсемНачислениям,
	         |		бестСтабильныеПериодыНП.ОбъектРасчета КАК ОбъектРасчета,
	         |		бестСтабильныеПериодыНП.Договор КАК Договор
	         |	ИЗ
	         |		РегистрСведений.бестСтабильныеПериодыНП КАК бестСтабильныеПериодыНП
	         |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиРасчетаСреднегоПотребления КАК НастройкиРасчетаСреднегоПотребления
	         |			ПО бестСтабильныеПериодыНП.Услуга = НастройкиРасчетаСреднегоПотребления.Услуга
	         |				И (бестСтабильныеПериодыНП.Организация = &Организация)
	         |				И (бестСтабильныеПериодыНП.ПериодНачисления = &ПериодНачисления)
	         |				И (бестСтабильныеПериодыНП.Район = &Район)
	         |				И (бестСтабильныеПериодыНП.Договор = &Договор)
	         |				И (бестСтабильныеПериодыНП.НомерПозиции = 0)
	         |				И (бестСтабильныеПериодыНП.ДоговорЗаключен)
	         |				И (бестСтабильныеПериодыНП.УслугаПодключена)) КАК СтабильныеПериоды
	         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестРасчетСреднегоОбъемаНП КАК бестРасчетСреднегоОбъемаНП
	         |		ПО СтабильныеПериоды.Район = бестРасчетСреднегоОбъемаНП.Район
	         |			И СтабильныеПериоды.МКД = бестРасчетСреднегоОбъемаНП.МКД
	         |			И СтабильныеПериоды.ТочкаУчета = бестРасчетСреднегоОбъемаНП.ТочкаУчета
	         |			И (бестРасчетСреднегоОбъемаНП.ПериодНачисления < &ПериодНачисления)
	         |			И СтабильныеПериоды.Договор = бестРасчетСреднегоОбъемаНП.Договор
	         |			И СтабильныеПериоды.ОбъектРасчета = бестРасчетСреднегоОбъемаНП.ОбъектРасчета
	         |
	         |СГРУППИРОВАТЬ ПО
	         |	бестРасчетСреднегоОбъемаНП.Район,
	         |	бестРасчетСреднегоОбъемаНП.МКД,
	         |	бестРасчетСреднегоОбъемаНП.ТочкаУчета,
	         |	СтабильныеПериоды.Услуга,
	         |	бестРасчетСреднегоОбъемаНП.Шкала,
	         |	бестРасчетСреднегоОбъемаНП.ТарифнаяЗона,
	         |	бестРасчетСреднегоОбъемаНП.Договор,
	         |	бестРасчетСреднегоОбъемаНП.ОбъектРасчета
	         |
	         |ИМЕЮЩИЕ
	         |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(бестРасчетСреднегоОбъемаНП.ПериодНачисления, МЕСЯЦ)) >= МАКСИМУМ(СтабильныеПериоды.КоличествоПериодов)
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	ВложенныйЗапрос.Район КАК Район,
	         |	ВложенныйЗапрос.Строение КАК МКД,
	         |	ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	         |	ВложенныйЗапрос.Услуга КАК Услуга,
	         |	ВложенныйЗапрос.Шкала КАК Шкала,
	         |	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	         |	ВложенныйЗапрос.КоличествоПредоставленных КАК КоличествоПредоставленных,
	         |	ВложенныйЗапрос.СрокНеПредоставления КАК СрокНеПредоставления,
	         |	ВложенныйЗапрос.КонецПериода КАК КонецПериода,
	         |	ВложенныйЗапрос.КоличествоПоказаний КАК КоличествоПоказаний,
	         |	ВложенныйЗапрос.КоличествоПериодов КАК КоличествоПериодов,
	         |	ВложенныйЗапрос.ЗаПрошлыйГод КАК ЗаПрошлыйГод,
	         |	ВложенныйЗапрос.НачислятьСреднийОбъемНеБолееМесяцев КАК НачислятьСреднийОбъемНеБолееМесяцев,
	         |	ВложенныйЗапрос.ЭтоОбъемПотребленный КАК ЭтоОбъемПотребленный,
	         |	ВложенныйЗапрос.Договор КАК Договор,
	         |	ВложенныйЗапрос.ОбъектРасчета КАК ОбъектРасчета
	         |ПОМЕСТИТЬ ТочкиДляРасчета2
	         |ИЗ
	         |	(ВЫБРАТЬ
	         |		бестРасчетСреднегоОбъемаНП.Район КАК Район,
	         |		бестРасчетСреднегоОбъемаНП.МКД КАК Строение,
	         |		бестРасчетСреднегоОбъемаНП.ТочкаУчета КАК ТочкаУчета,
	         |		СтабильныеПериоды.Услуга КАК Услуга,
	         |		бестРасчетСреднегоОбъемаНП.Шкала КАК Шкала,
	         |		бестРасчетСреднегоОбъемаНП.ТарифнаяЗона КАК ТарифнаяЗона,
	         |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(бестРасчетСреднегоОбъемаНП.ПериодНачисления, МЕСЯЦ)) КАК КоличествоПредоставленных,
	         |		РАЗНОСТЬДАТ(МАКСИМУМ(бестРасчетСреднегоОбъемаНП.ПериодНачисления), &ПериодНачисления, МЕСЯЦ) КАК СрокНеПредоставления,
	         |		МАКСИМУМ(бестРасчетСреднегоОбъемаНП.ПериодНачисления) КАК КонецПериода,
	         |		МАКСИМУМ(СтабильныеПериоды.КоличествоПоказаний) КАК КоличествоПоказаний,
	         |		МАКСИМУМ(СтабильныеПериоды.КоличествоПериодов) КАК КоличествоПериодов,
	         |		МАКСИМУМ(СтабильныеПериоды.ЗаПрошлыйГод) КАК ЗаПрошлыйГод,
	         |		МАКСИМУМ(СтабильныеПериоды.НачислятьСреднийОбъемНеБолееМесяцев) КАК НачислятьСреднийОбъемНеБолееМесяцев,
	         |		ЛОЖЬ КАК ЭтоОбъемПотребленный,
	         |		СтабильныеПериоды.Договор КАК Договор,
	         |		СтабильныеПериоды.ОбъектРасчета КАК ОбъектРасчета
	         |	ИЗ
	         |		(ВЫБРАТЬ
	         |			бестСтабильныеПериодыНП.Район КАК Район,
	         |			бестСтабильныеПериодыНП.МКД КАК Строение,
	         |			бестСтабильныеПериодыНП.ТочкаУчета КАК ТочкаУчета,
	         |			бестСтабильныеПериодыНП.Услуга КАК Услуга,
	         |			НастройкиРасчетаСреднегоПотребления.КоличествоПоказаний КАК КоличествоПоказаний,
	         |			НастройкиРасчетаСреднегоПотребления.КоличествоПериодов КАК КоличествоПериодов,
	         |			НастройкиРасчетаСреднегоПотребления.ЗаПрошлыйГод КАК ЗаПрошлыйГод,
	         |			НастройкиРасчетаСреднегоПотребления.ПоВсемНачислениям КАК ПоВсемНачислениям,
	         |			НастройкиРасчетаСреднегоПотребления.НачислятьСреднийОбъемНеБолееМесяцев КАК НачислятьСреднийОбъемНеБолееМесяцев,
	         |			бестСтабильныеПериодыНП.Договор КАК Договор,
	         |			бестСтабильныеПериодыНП.ОбъектРасчета КАК ОбъектРасчета
	         |		ИЗ
	         |			НастройкиРасчетаСреднегоПотребления КАК НастройкиРасчетаСреднегоПотребления
	         |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестСтабильныеПериодыНП КАК бестСтабильныеПериодыНП
	         |				ПО 
	         |					(бестСтабильныеПериодыНП.Услуга = НастройкиРасчетаСреднегоПотребления.Услуга)
	         |					И (бестСтабильныеПериодыНП.Организация = &Организация)
	         |					И (бестСтабильныеПериодыНП.ПериодНачисления = &ПериодНачисления)
	         |					И (бестСтабильныеПериодыНП.Район = &Район)
	         |					И (бестСтабильныеПериодыНП.Договор = &Договор)
	         |					И (бестСтабильныеПериодыНП.НомерПозиции = 0)
	         |					И (бестСтабильныеПериодыНП.ДоговорЗаключен)
	         |					И (бестСтабильныеПериодыНП.УслугаПодключена)) КАК СтабильныеПериоды
	         |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестРасчетСреднегоОбъемаНП КАК бестРасчетСреднегоОбъемаНП
	         |			ПО СтабильныеПериоды.Район = бестРасчетСреднегоОбъемаНП.Район
	         |				И СтабильныеПериоды.Строение = бестРасчетСреднегоОбъемаНП.МКД
	         |				И СтабильныеПериоды.ТочкаУчета = бестРасчетСреднегоОбъемаНП.ТочкаУчета
	         |				И СтабильныеПериоды.Договор = бестРасчетСреднегоОбъемаНП.Договор
	         |				И СтабильныеПериоды.ОбъектРасчета = бестРасчетСреднегоОбъемаНП.ОбъектРасчета
	         |				И (бестРасчетСреднегоОбъемаНП.ПериодНачисления < ВЫБОР
	         |					КОГДА СтабильныеПериоды.ЗаПрошлыйГод
	         |						ТОГДА НАЧАЛОПЕРИОДА(&ПериодНачисления, ГОД)
	         |					ИНАЧЕ &ПериодНачисления
	         |				КОНЕЦ)
	         |	
	         |	СГРУППИРОВАТЬ ПО
	         |		СтабильныеПериоды.Услуга,
	         |		СтабильныеПериоды.Договор,
	         |		СтабильныеПериоды.ОбъектРасчета,
	         |		бестРасчетСреднегоОбъемаНП.Район,
	         |		бестРасчетСреднегоОбъемаНП.МКД,
	         |		бестРасчетСреднегоОбъемаНП.ТочкаУчета,
	         |		бестРасчетСреднегоОбъемаНП.Шкала,
	         |		бестРасчетСреднегоОбъемаНП.ТарифнаяЗона
	         |	
	         |	ОБЪЕДИНИТЬ ВСЕ
	         |	
	         |	ВЫБРАТЬ
	         |		бестРасчетСреднегоОбъемаНП.Район,
	         |		бестРасчетСреднегоОбъемаНП.МКД,
	         |		бестРасчетСреднегоОбъемаНП.ТочкаУчета,
	         |		СтабильныеПериоды.Услуга,
	         |		бестРасчетСреднегоОбъемаНП.Шкала,
	         |		бестРасчетСреднегоОбъемаНП.ТарифнаяЗона,
	         |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(бестРасчетСреднегоОбъемаНП.ПериодНачисления, МЕСЯЦ)),
	         |		РАЗНОСТЬДАТ(МАКСИМУМ(бестРасчетСреднегоОбъемаНП.ПериодНачисления), &ПериодНачисления, МЕСЯЦ),
	         |		МАКСИМУМ(бестРасчетСреднегоОбъемаНП.ПериодНачисления),
	         |		МАКСИМУМ(СтабильныеПериоды.КоличествоПоказанийОбъемПотребленный),
	         |		МАКСИМУМ(СтабильныеПериоды.КоличествоПериодовОбъемПотребленный),
	         |		МАКСИМУМ(СтабильныеПериоды.ЗаПрошлыйГодОбъемПотребленный),
	         |		МАКСИМУМ(СтабильныеПериоды.НачислятьСреднийОбъемНеБолееМесяцевОбъемПотребленный),
	         |		ИСТИНА,
	         |		СтабильныеПериоды.Договор,
	         |		СтабильныеПериоды.ОбъектРасчета
	         |	ИЗ
	         |		(ВЫБРАТЬ
	         |			бестСтабильныеПериодыНП.Район КАК Район,
	         |			бестСтабильныеПериодыНП.МКД КАК Строение,
	         |			бестСтабильныеПериодыНП.ТочкаУчета КАК ТочкаУчета,
	         |			бестСтабильныеПериодыНП.Услуга КАК Услуга,
	         |			НастройкиРасчетаСреднегоПотребления.КоличествоПоказанийОбъемПотребленный КАК КоличествоПоказанийОбъемПотребленный,
	         |			НастройкиРасчетаСреднегоПотребления.КоличествоПериодовОбъемПотребленный КАК КоличествоПериодовОбъемПотребленный,
	         |			НастройкиРасчетаСреднегоПотребления.ЗаПрошлыйГодОбъемПотребленный КАК ЗаПрошлыйГодОбъемПотребленный,
	         |			НастройкиРасчетаСреднегоПотребления.ПоВсемНачислениямОбъемПотребленный КАК ПоВсемНачислениямОбъемПотребленный,
	         |			НастройкиРасчетаСреднегоПотребления.НачислятьСреднийОбъемНеБолееМесяцевОбъемПотребленный КАК НачислятьСреднийОбъемНеБолееМесяцевОбъемПотребленный,
	         |			бестСтабильныеПериодыНП.Договор КАК Договор,
	         |			бестСтабильныеПериодыНП.ОбъектРасчета КАК ОбъектРасчета
	         |		ИЗ
	         |			НастройкиРасчетаСреднегоПотребления КАК НастройкиРасчетаСреднегоПотребления
	         |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестСтабильныеПериодыНП КАК бестСтабильныеПериодыНП
	         |				ПО 
	         |					(бестСтабильныеПериодыНП.Услуга = НастройкиРасчетаСреднегоПотребления.Услуга)
	         |					И (бестСтабильныеПериодыНП.Организация = &Организация)
	         |					И (бестСтабильныеПериодыНП.ПериодНачисления = &ПериодНачисления)
	         |					И (бестСтабильныеПериодыНП.Район = &Район)
	         |					И (бестСтабильныеПериодыНП.Договор = &Договор)
	         |					И (бестСтабильныеПериодыНП.НомерПозиции = 0)
	         |					И (бестСтабильныеПериодыНП.ДоговорЗаключен)
	         |					И (бестСтабильныеПериодыНП.УслугаПодключена)) КАК СтабильныеПериоды
	         |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестРасчетСреднегоОбъемаНП КАК бестРасчетСреднегоОбъемаНП
	         |			ПО (бестРасчетСреднегоОбъемаНП.ПериодНачисления < ВЫБОР
	         |					КОГДА СтабильныеПериоды.ЗаПрошлыйГодОбъемПотребленный
	         |						ТОГДА НАЧАЛОПЕРИОДА(&ПериодНачисления, ГОД)
	         |					ИНАЧЕ &ПериодНачисления
	         |				КОНЕЦ)
	         |				И СтабильныеПериоды.Район = бестРасчетСреднегоОбъемаНП.Район
	         |				И СтабильныеПериоды.Строение = бестРасчетСреднегоОбъемаНП.МКД
	         |				И СтабильныеПериоды.ТочкаУчета = бестРасчетСреднегоОбъемаНП.ТочкаУчета
	         |				И СтабильныеПериоды.Договор = бестРасчетСреднегоОбъемаНП.Договор
	         |				И СтабильныеПериоды.ОбъектРасчета = бестРасчетСреднегоОбъемаНП.ОбъектРасчета
	         |	
	         |	СГРУППИРОВАТЬ ПО
	         |		СтабильныеПериоды.Услуга,
	         |		СтабильныеПериоды.Договор,
	         |		СтабильныеПериоды.ОбъектРасчета,
	         |		бестРасчетСреднегоОбъемаНП.Район,
	         |		бестРасчетСреднегоОбъемаНП.МКД,
	         |		бестРасчетСреднегоОбъемаНП.ТочкаУчета,
	         |		бестРасчетСреднегоОбъемаНП.Шкала,
	         |		бестРасчетСреднегоОбъемаНП.ТарифнаяЗона) КАК ВложенныйЗапрос
	         |ГДЕ
	         |	ВЫБОР
	         |			КОГДА ВложенныйЗапрос.ЗаПрошлыйГод
	         |				ТОГДА ИСТИНА
	         |			ИНАЧЕ ВложенныйЗапрос.КоличествоПредоставленных >= ВложенныйЗапрос.КоличествоПоказаний
	         |					И ВложенныйЗапрос.СрокНеПредоставления <= ВложенныйЗапрос.НачислятьСреднийОбъемНеБолееМесяцев
	         |		КОНЕЦ
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	ВложенныйЗапрос.Район КАК Район,
	         |	ВложенныйЗапрос.МКД КАК МКД,
	         |	ВложенныйЗапрос.Услуга КАК Услуга,
	         |	ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	         |	ВложенныйЗапрос.Шкала КАК Шкала,
	         |	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	         |	ВложенныйЗапрос.КонецПериода КАК КонецПериода,
	         |	МИНИМУМ(ВложенныйЗапрос.НачалоПериода) КАК НачалоПериода,
	         |	ВложенныйЗапрос.Договор КАК Договор,
	         |	ВложенныйЗапрос.ОбъектРасчета КАК ОбъектРасчета,
	         |	РАЗНОСТЬДАТ(МИНИМУМ(ВложенныйЗапрос.НачалоПериода), ВложенныйЗапрос.КонецПериода, МЕСЯЦ) + 1 КАК КоличествоМесяцев,
	         |	ВложенныйЗапрос.ЭтоОбъемПотребленный КАК ЭтоОбъемПотребленный
	         |ПОМЕСТИТЬ ПериодыРасчетаСреднего
	         |ИЗ
	         |	(ВЫБРАТЬ
	         |		ТочкиДляРасчета2.Район КАК Район,
	         |		ТочкиДляРасчета2.МКД КАК МКД,
	         |		ТочкиДляРасчета2.Договор КАК Договор,
	         |		ТочкиДляРасчета2.ОбъектРасчета КАК ОбъектРасчета,
	         |		ТочкиДляРасчета2.Услуга КАК Услуга,
	         |		ТочкиДляРасчета2.ТочкаУчета КАК ТочкаУчета,
	         |		ТочкиДляРасчета2.Шкала КАК Шкала,
	         |		ТочкиДляРасчета2.ТарифнаяЗона КАК ТарифнаяЗона,
	         |		ТочкиДляРасчета2.КонецПериода КАК КонецПериода,
	         |		МАКСИМУМ(бестРасчетСреднегоОбъемаНП.ПериодНачисления) КАК НачалоПериода,
	         |		ТочкиДляРасчета2.ЭтоОбъемПотребленный КАК ЭтоОбъемПотребленный
	         |	ИЗ
	         |		ТочкиДляРасчета2 КАК ТочкиДляРасчета2
	         |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестРасчетСреднегоОбъемаНП КАК бестРасчетСреднегоОбъемаНП
	         |			ПО ТочкиДляРасчета2.Район = бестРасчетСреднегоОбъемаНП.Район
	         |				И ТочкиДляРасчета2.Договор = бестРасчетСреднегоОбъемаНП.Договор
	         |				И ТочкиДляРасчета2.ОбъектРасчета = бестРасчетСреднегоОбъемаНП.ОбъектРасчета
	         |				И ТочкиДляРасчета2.ТочкаУчета = бестРасчетСреднегоОбъемаНП.ТочкаУчета
	         |				И ТочкиДляРасчета2.Шкала = бестРасчетСреднегоОбъемаНП.Шкала
	         |				И ТочкиДляРасчета2.ТарифнаяЗона = бестРасчетСреднегоОбъемаНП.ТарифнаяЗона
	         |				И (бестРасчетСреднегоОбъемаНП.ПериодНачисления <= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета2.КонецПериода, МЕСЯЦ, -ТочкиДляРасчета2.КоличествоПериодов + 1))
	         |				И (бестРасчетСреднегоОбъемаНП.Организация = &Организация)
	         |				И (бестРасчетСреднегоОбъемаНП.Район = &Район)
	         |				И (бестРасчетСреднегоОбъемаНП.Договор = &Договор)
	         |				И (НЕ ТочкиДляРасчета2.ЗаПрошлыйГод)
	         |	
	         |	СГРУППИРОВАТЬ ПО
	         |		ТочкиДляРасчета2.Район,
	         |		ТочкиДляРасчета2.МКД,
	         |		ТочкиДляРасчета2.Договор,
	         |		ТочкиДляРасчета2.ОбъектРасчета,
	         |		ТочкиДляРасчета2.Услуга,
	         |		ТочкиДляРасчета2.ТочкаУчета,
	         |		ТочкиДляРасчета2.Шкала,
	         |		ТочкиДляРасчета2.ТарифнаяЗона,
	         |		ТочкиДляРасчета2.КонецПериода,
	         |		ТочкиДляРасчета2.ЭтоОбъемПотребленный
	         |	
	         |	ОБЪЕДИНИТЬ ВСЕ
	         |	
	         |	ВЫБРАТЬ
	         |		ТочкиДляРасчета2.Район,
	         |		ТочкиДляРасчета2.МКД,
	         |		ТочкиДляРасчета2.Договор,
	         |		ТочкиДляРасчета2.ОбъектРасчета,
	         |		ТочкиДляРасчета2.Услуга,
	         |		ТочкиДляРасчета2.ТочкаУчета,
	         |		ТочкиДляРасчета2.Шкала,
	         |		ТочкиДляРасчета2.ТарифнаяЗона,
	         |		ТочкиДляРасчета2.КонецПериода,
	         |		МИНИМУМ(бестРасчетСреднегоОбъемаНП.ПериодНачисления),
	         |		ТочкиДляРасчета2.ЭтоОбъемПотребленный
	         |	ИЗ
	         |		ТочкиДляРасчета2 КАК ТочкиДляРасчета2
	         |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестРасчетСреднегоОбъемаНП КАК бестРасчетСреднегоОбъемаНП
	         |			ПО ТочкиДляРасчета2.Район = бестРасчетСреднегоОбъемаНП.Район
	         |				И ТочкиДляРасчета2.Договор = бестРасчетСреднегоОбъемаНП.Договор
	         |				И ТочкиДляРасчета2.ОбъектРасчета = бестРасчетСреднегоОбъемаНП.ОбъектРасчета
	         |				И ТочкиДляРасчета2.ТочкаУчета = бестРасчетСреднегоОбъемаНП.ТочкаУчета
	         |				И ТочкиДляРасчета2.Шкала = бестРасчетСреднегоОбъемаНП.Шкала
	         |				И ТочкиДляРасчета2.ТарифнаяЗона = бестРасчетСреднегоОбъемаНП.ТарифнаяЗона
	         |				И (бестРасчетСреднегоОбъемаНП.ПериодНачисления <= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета2.КонецПериода, МЕСЯЦ, -ТочкиДляРасчета2.КоличествоПоказаний + 1))
	         |				И (бестРасчетСреднегоОбъемаНП.ПериодНачисления >= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета2.КонецПериода, МЕСЯЦ, -ТочкиДляРасчета2.КоличествоПериодов + 1 + 1))
	         |				И (бестРасчетСреднегоОбъемаНП.Организация = &Организация)
	         |				И (бестРасчетСреднегоОбъемаНП.Район = &Район)
	         |				И (бестРасчетСреднегоОбъемаНП.Договор = &Договор)
	         |				И (НЕ ТочкиДляРасчета2.ЗаПрошлыйГод)
	         |	
	         |	СГРУППИРОВАТЬ ПО
	         |		ТочкиДляРасчета2.Район,
	         |		ТочкиДляРасчета2.МКД,
	         |		ТочкиДляРасчета2.Договор,
	         |		ТочкиДляРасчета2.ОбъектРасчета,
	         |		ТочкиДляРасчета2.Услуга,
	         |		ТочкиДляРасчета2.ТочкаУчета,
	         |		ТочкиДляРасчета2.Шкала,
	         |		ТочкиДляРасчета2.ТарифнаяЗона,
	         |		ТочкиДляРасчета2.КонецПериода,
	         |		ТочкиДляРасчета2.ЭтоОбъемПотребленный
	         |	
	         |	ОБЪЕДИНИТЬ ВСЕ
	         |	
	         |	ВЫБРАТЬ
	         |		ТочкиДляРасчета2.Район,
	         |		ТочкиДляРасчета2.МКД,
	         |		ТочкиДляРасчета2.Договор,
	         |		ТочкиДляРасчета2.ОбъектРасчета,
	         |		ТочкиДляРасчета2.Услуга,
	         |		ТочкиДляРасчета2.ТочкаУчета,
	         |		ТочкиДляРасчета2.Шкала,
	         |		ТочкиДляРасчета2.ТарифнаяЗона,
	         |		ТочкиДляРасчета2.КонецПериода,
	         |		МИНИМУМ(бестРасчетСреднегоОбъемаНП.ПериодНачисления),
	         |		ТочкиДляРасчета2.ЭтоОбъемПотребленный
	         |	ИЗ
	         |		ТочкиДляРасчета2 КАК ТочкиДляРасчета2
	         |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестРасчетСреднегоОбъемаНП КАК бестРасчетСреднегоОбъемаНП
	         |			ПО ТочкиДляРасчета2.Район = бестРасчетСреднегоОбъемаНП.Район
	         |				И ТочкиДляРасчета2.Договор = бестРасчетСреднегоОбъемаНП.Договор
	         |				И ТочкиДляРасчета2.ОбъектРасчета = бестРасчетСреднегоОбъемаНП.ОбъектРасчета
	         |				И ТочкиДляРасчета2.ТочкаУчета = бестРасчетСреднегоОбъемаНП.ТочкаУчета
	         |				И ТочкиДляРасчета2.Шкала = бестРасчетСреднегоОбъемаНП.Шкала
	         |				И ТочкиДляРасчета2.ТарифнаяЗона = бестРасчетСреднегоОбъемаНП.ТарифнаяЗона
	         |				И (бестРасчетСреднегоОбъемаНП.ПериодНачисления < НАЧАЛОПЕРИОДА(&ПериодНачисления, ГОД))
	         |				И (бестРасчетСреднегоОбъемаНП.ПериодНачисления >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ПериодНачисления, ГОД), ГОД, -1))
	         |				И (бестРасчетСреднегоОбъемаНП.Организация = &Организация)
	         |				И (бестРасчетСреднегоОбъемаНП.Район = &Район)
	         |				И (бестРасчетСреднегоОбъемаНП.Договор = &Договор)
	         |				И (ТочкиДляРасчета2.ЗаПрошлыйГод)
	         |	
	         |	СГРУППИРОВАТЬ ПО
	         |		ТочкиДляРасчета2.Район,
	         |		ТочкиДляРасчета2.МКД,
	         |		ТочкиДляРасчета2.Договор,
	         |		ТочкиДляРасчета2.ОбъектРасчета,
	         |		ТочкиДляРасчета2.Услуга,
	         |		ТочкиДляРасчета2.ТочкаУчета,
	         |		ТочкиДляРасчета2.Шкала,
	         |		ТочкиДляРасчета2.ТарифнаяЗона,
	         |		ТочкиДляРасчета2.КонецПериода,
	         |		ТочкиДляРасчета2.ЭтоОбъемПотребленный) КАК ВложенныйЗапрос
	         |
	         |СГРУППИРОВАТЬ ПО
	         |	ВложенныйЗапрос.Район,
	         |	ВложенныйЗапрос.МКД,
	         |	ВложенныйЗапрос.Услуга,
	         |	ВложенныйЗапрос.ТочкаУчета,
	         |	ВложенныйЗапрос.Шкала,
	         |	ВложенныйЗапрос.ТарифнаяЗона,
	         |	ВложенныйЗапрос.КонецПериода,
	         |	ВложенныйЗапрос.Договор,
	         |	ВложенныйЗапрос.ОбъектРасчета,
	         |	ВложенныйЗапрос.ЭтоОбъемПотребленный
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ
	         |	&Организация КАК Организация,
	         |	&ПериодНачисления КАК ПериодНачисления,
	         |	ВложенныйЗапрос.Район КАК Район,
	         |	ВложенныйЗапрос.МКД КАК МКД,
	         |	ВложенныйЗапрос.Услуга КАК Услуга,
	         |	ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	         |	ВложенныйЗапрос.Шкала КАК Шкала,
	         |	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	         |	ВЫБОР
	         |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ЭтоОбъемПотребленный) = 1
	         |				И НЕ МАКСИМУМ(ВложенныйЗапрос.ЭтоОбъемПотребленный)
	         |			ТОГДА СУММА(ВложенныйЗапрос.ОбъемУслуги)
	         |		КОГДА НЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ЭтоОбъемПотребленный) = 1
	         |			ТОГДА СУММА(ВложенныйЗапрос.ОбъемУслуги)
	         |		ИНАЧЕ -1
	         |	КОНЕЦ КАК Объем,
	         |	ВложенныйЗапрос.Договор КАК Договор,
	         |	ВложенныйЗапрос.ОбъектРасчета КАК ОбъектРасчета,
	         |	ВЫБОР
	         |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ЭтоОбъемПотребленный) = 1
	         |				И МАКСИМУМ(ВложенныйЗапрос.ЭтоОбъемПотребленный)
	         |			ТОГДА СУММА(ВложенныйЗапрос.ОбъемПотребленный)
	         |		КОГДА НЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ЭтоОбъемПотребленный) = 1
	         |			ТОГДА СУММА(ВложенныйЗапрос.ОбъемПотребленный)
	         |		ИНАЧЕ -1
	         |	КОНЕЦ КАК ОбъемПотребленный,
	         |	МАКСИМУМ(ВложенныйЗапрос.ЭтоОбъемПотребленный) КАК ЭтоОбъемПотребленный,
	         |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ЭтоОбъемПотребленный) КАК КоличествоРасчитанныхОбъемов
	         |ИЗ
	         |	(ВЫБРАТЬ
	         |		ПериодыРасчетаСреднего.Район КАК Район,
	         |		ПериодыРасчетаСреднего.МКД КАК МКД,
	         |		ПериодыРасчетаСреднего.Услуга КАК Услуга,
	         |		ПериодыРасчетаСреднего.ТочкаУчета КАК ТочкаУчета,
	         |		ПериодыРасчетаСреднего.Шкала КАК Шкала,
	         |		ПериодыРасчетаСреднего.ТарифнаяЗона КАК ТарифнаяЗона,
	         |		ВЫБОР
	         |			КОГДА НЕ ПериодыРасчетаСреднего.ЭтоОбъемПотребленный
	         |				ТОГДА СУММА(бестРасчетСреднегоОбъемаНП.ОбъемУслуги) / ПериодыРасчетаСреднего.КоличествоМесяцев
	         |			ИНАЧЕ 0
	         |		КОНЕЦ КАК ОбъемУслуги,
	         |		ПериодыРасчетаСреднего.Договор КАК Договор,
	         |		ПериодыРасчетаСреднего.ОбъектРасчета КАК ОбъектРасчета,
	         |		ВЫБОР
	         |			КОГДА ПериодыРасчетаСреднего.ЭтоОбъемПотребленный
	         |				ТОГДА СУММА(бестРасчетСреднегоОбъемаНП.ОбъемУслуги) / ПериодыРасчетаСреднего.КоличествоМесяцев
	         |			ИНАЧЕ 0
	         |		КОНЕЦ КАК ОбъемПотребленный,
	         |		ПериодыРасчетаСреднего.ЭтоОбъемПотребленный КАК ЭтоОбъемПотребленный
	         |	ИЗ
	         |		ПериодыРасчетаСреднего КАК ПериодыРасчетаСреднего
	         |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестРасчетСреднегоОбъемаНП КАК бестРасчетСреднегоОбъемаНП
	         |			ПО ПериодыРасчетаСреднего.Район = бестРасчетСреднегоОбъемаНП.Район
	         |				И ПериодыРасчетаСреднего.Договор = бестРасчетСреднегоОбъемаНП.Договор
	         |				И ПериодыРасчетаСреднего.ТочкаУчета = бестРасчетСреднегоОбъемаНП.ТочкаУчета
	         |				И ПериодыРасчетаСреднего.Шкала = бестРасчетСреднегоОбъемаНП.Шкала
	         |				И ПериодыРасчетаСреднего.ТарифнаяЗона = бестРасчетСреднегоОбъемаНП.ТарифнаяЗона
	         |				И (бестРасчетСреднегоОбъемаНП.ПериодНачисления МЕЖДУ ПериодыРасчетаСреднего.НачалоПериода И ПериодыРасчетаСреднего.КонецПериода)
	         |				И (бестРасчетСреднегоОбъемаНП.Организация = &Организация)
	         |				И (бестРасчетСреднегоОбъемаНП.Район = &Район)
	         |				И (бестРасчетСреднегоОбъемаНП.Договор = &Договор)
	         |				И ПериодыРасчетаСреднего.ОбъектРасчета = бестРасчетСреднегоОбъемаНП.ОбъектРасчета
	         |	
	         |	СГРУППИРОВАТЬ ПО
	         |		ПериодыРасчетаСреднего.Район,
	         |		ПериодыРасчетаСреднего.МКД,
	         |		ПериодыРасчетаСреднего.Услуга,
	         |		ПериодыРасчетаСреднего.ТочкаУчета,
	         |		ПериодыРасчетаСреднего.Шкала,
	         |		ПериодыРасчетаСреднего.ТарифнаяЗона,
	         |		ПериодыРасчетаСреднего.Договор,
	         |		ПериодыРасчетаСреднего.ОбъектРасчета,
	         |		ПериодыРасчетаСреднего.ЭтоОбъемПотребленный,
	         |		ПериодыРасчетаСреднего.КоличествоМесяцев) КАК ВложенныйЗапрос
	         |
	         |СГРУППИРОВАТЬ ПО
	         |	ВложенныйЗапрос.Район,
	         |	ВложенныйЗапрос.МКД,
	         |	ВложенныйЗапрос.Услуга,
	         |	ВложенныйЗапрос.ТочкаУчета,
	         |	ВложенныйЗапрос.Шкала,
	         |	ВложенныйЗапрос.ТарифнаяЗона,
	         |	ВложенныйЗапрос.ОбъектРасчета,
	         |	ВложенныйЗапрос.Договор"; 

		Возврат Текст;
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Процедура УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(ЗначенияБлокировки,ИмяПоследовательности, Отказ = Ложь, Заголовок = "") Экспорт
	
	ПараметрыБлокировки = Новый Структура();
	ПараметрыБлокировки.Вставить("ТипТаблицы", "РегистрСведений." + ИмяПоследовательности);
	ПараметрыБлокировки.Вставить("ИмяТаблицы", "");
	
	энргОбщегоНазначения.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки, , Отказ, Заголовок);
КонецПроцедуры

Функция ПараметрыЗаписиЖурнала(ИмяОперации,ПериодНачисления,Район)
	ПараметрыЗаписиЖурнала  = Новый Структура();
	
	СоотвествиеОпераций  	= Новый Структура;	
	СоотвествиеОпераций.Вставить("ОтложенныеДвиженияДокументовНачисленияМКД",			"Работа с последовательностями (биллинг). Чтение данных на начало периода расчета");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностьСтабильныеПериодыМКД",	"Работа с последовательностями (биллинг). События мкд");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностьПоказанияПУМКД",		"Работа с последовательностями (биллинг). Показания мкд");
	СоотвествиеОпераций.Вставить("ОтложенныеДвиженияДокументовНачисления",				"Работа с последовательностями (биллинг). Чтение данных на начало периода расчета (мкд)");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностьСтабильныеПериоды",		"Работа с последовательностями (биллинг). События абонентов");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностьПоказанияПУ",			"Работа с последовательностями (биллинг). Показания абонентов");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностиВзаиморасчетов",		"Работа с последовательностями (биллинг). Взаиморасчеты с абонентами");
	СоотвествиеОпераций.Вставить("ПерерасчетСреднихНачислений",							"Работа с начислениями (биллинг). Перерасчет средних начислений");
	
	ПараметрыЗаписиЖурнала.Вставить("ИмяОперации",СоотвествиеОпераций[ИмяОперации]);
	ПараметрыЗаписиЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Информация);
	ПараметрыЗаписиЖурнала.Вставить("Метаданные",РегистрыСведений.энргСтабильныеПериодыМКД);
	ПараметрыЗаписиЖурнала.Вставить("КомментарийСтарт","Запуск по району " 		+ Район + " за период" + Формат(ПериодНачисления,"ДФ='ММММ гггг'"));
	ПараметрыЗаписиЖурнала.Вставить("КомментарийСтоп","Завершение по району " 	+ Район + " за период" + Формат(ПериодНачисления,"ДФ='ММММ гггг'"));
	Возврат ПараметрыЗаписиЖурнала;
КонецФункции

#КонецОбласти



#Область ВосстановитьПоследовательностьВзаиморасчеты

Функция ЗаполнитьМВТВзаиморасчеты(Организация, ПериодНачисления,Район,ИспользоватьОтборы,МКД,Договор,НачалоПериодаРасчета,КонецПериодаРасчета,ИсключаяОтдельностоящие)
	МВТ 							= Новый МенеджерВременныхТаблиц;	
	Запрос  						= Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",ПериодНачисления);
	Запрос.УстановитьПараметр("Район",			Район);
	Запрос.УстановитьПараметр("МКД",			МКД);
	Запрос.УстановитьПараметр("Договор",		Договор);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",			НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаРасчета",			КонецПериодаРасчета);
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Если НЕ ИспользоватьОтборы  тогда
		Текст = "";
		ОтборДоговора = "";
	Иначе
		Текст 			= бестНачисленияНП.ПолучитьОтборПоМКД(Новый Структура("ИсключаяОтдельностоящие,МКД,Договор", ИсключаяОтдельностоящие,МКД,Договор));
		ОтборДоговора 	= " И (бестВзаиморасчетыПоследовательность.Договор В (ВЫБРАТЬ ОтборДоговор.Договор КАК Договор ИЗ ОтборДоговор КАК ОтборДоговор))";			
	КонецЕсли;
	Текст 							= Текст + ТекстМВТ_Взаиморасчеты(ОтборДоговора);	
	
	Запрос.Текст 					= Текст;
	Запрос.Выполнить();
	Возврат МВТ;
КонецФункции

Функция ТекстМВТ_Взаиморасчеты(ОтборДоговора)
	
	Текст 	=
	"ВЫБРАТЬ
	|	бестВзаиморасчетыПоследовательность.Организация КАК Организация,
	|	бестВзаиморасчетыПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	бестВзаиморасчетыПоследовательность.Район КАК Район,
	|	бестВзаиморасчетыПоследовательность.Договор КАК Договор,
	|	МИНИМУМ(бестВзаиморасчетыПоследовательность.ДатаРегистратора) КАК ДатаРегистратора
	|ПОМЕСТИТЬ МинимумДатаРегистратора
	|ИЗ
	|	РегистрСведений.бестВзаиморасчетыПоследовательность КАК бестВзаиморасчетыПоследовательность
	|ГДЕ
	|	бестВзаиморасчетыПоследовательность.Организация = &Организация
	|	И бестВзаиморасчетыПоследовательность.ПериодНачисления = &ПериодНачисления
	|	И бестВзаиморасчетыПоследовательность.Район = &Район
	|	И бестВзаиморасчетыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))" + ОтборДоговора + "
	|
	|СГРУППИРОВАТЬ ПО
	|	бестВзаиморасчетыПоследовательность.Организация,
	|	бестВзаиморасчетыПоследовательность.ПериодНачисления,
	|	бестВзаиморасчетыПоследовательность.Район,
	|	бестВзаиморасчетыПоследовательность.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимумДатаРегистратора.Организация КАК Организация,
	|	МинимумДатаРегистратора.ПериодНачисления КАК ПериодНачисления,
	|	МинимумДатаРегистратора.Район КАК Район,
	|	МинимумДатаРегистратора.Договор КАК Договор,
	|	МинимумДатаРегистратора.ДатаРегистратора КАК ДатаРегистратора,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА бестВзаиморасчетыПоследовательность.ДокРегистратор ССЫЛКА Документ.бестПерерасчетНП
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДопПорядок
	|ПОМЕСТИТЬ МинимумДопПорядокРегистратора
	|ИЗ
	|	МинимумДатаРегистратора КАК МинимумДатаРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестВзаиморасчетыПоследовательность КАК бестВзаиморасчетыПоследовательность
	|		ПО (бестВзаиморасчетыПоследовательность.Организация = &Организация)
	|			И (бестВзаиморасчетыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (бестВзаиморасчетыПоследовательность.Район = &Район)" + ОтборДоговора + "
	|			И (бестВзаиморасчетыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимумДатаРегистратора.Организация = бестВзаиморасчетыПоследовательность.Организация
	|			И МинимумДатаРегистратора.ПериодНачисления = бестВзаиморасчетыПоследовательность.ПериодНачисления
	|			И МинимумДатаРегистратора.Район = бестВзаиморасчетыПоследовательность.Район
	|			И МинимумДатаРегистратора.Договор = бестВзаиморасчетыПоследовательность.Договор
	|			И МинимумДатаРегистратора.ДатаРегистратора = бестВзаиморасчетыПоследовательность.ДатаРегистратора
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимумДатаРегистратора.Организация,
	|	МинимумДатаРегистратора.ПериодНачисления,
	|	МинимумДатаРегистратора.Район,
	|	МинимумДатаРегистратора.Договор,
	|	МинимумДатаРегистратора.ДатаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимумДопПорядокРегистратора.Организация КАК Организация,
	|	МинимумДопПорядокРегистратора.ПериодНачисления КАК ПериодНачисления,
	|	МинимумДопПорядокРегистратора.Район КАК Район,
	|	МинимумДопПорядокРегистратора.Договор КАК Договор,
	|	МинимумДопПорядокРегистратора.ДатаРегистратора КАК ДатаРегистратора,
	|	МинимумДопПорядокРегистратора.ДопПорядок КАК ДопПорядок,
	|	МИНИМУМ(бестВзаиморасчетыПоследовательность.ДокРегистратор) КАК ДокРегистратор
	|ПОМЕСТИТЬ МинимумРегистратор
	|ИЗ
	|	МинимумДопПорядокРегистратора КАК МинимумДопПорядокРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестВзаиморасчетыПоследовательность КАК бестВзаиморасчетыПоследовательность
	|		ПО (бестВзаиморасчетыПоследовательность.Организация = &Организация)
	|			И (бестВзаиморасчетыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (бестВзаиморасчетыПоследовательность.Район = &Район)" + ОтборДоговора + "
	|			И (бестВзаиморасчетыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимумДопПорядокРегистратора.Организация = бестВзаиморасчетыПоследовательность.Организация
	|			И МинимумДопПорядокРегистратора.ПериодНачисления = бестВзаиморасчетыПоследовательность.ПериодНачисления
	|			И МинимумДопПорядокРегистратора.Район = бестВзаиморасчетыПоследовательность.Район
	|			И МинимумДопПорядокРегистратора.Договор = бестВзаиморасчетыПоследовательность.Договор
	|			И МинимумДопПорядокРегистратора.ДатаРегистратора = бестВзаиморасчетыПоследовательность.ДатаРегистратора
	|			И (ВЫБОР
	|				КОГДА МинимумДопПорядокРегистратора.ДопПорядок = 0
	|					ТОГДА бестВзаиморасчетыПоследовательность.ДокРегистратор ССЫЛКА Документ.бестПерерасчетНП
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимумДопПорядокРегистратора.Организация,
	|	МинимумДопПорядокРегистратора.ПериодНачисления,
	|	МинимумДопПорядокРегистратора.Район,
	|	МинимумДопПорядокРегистратора.Договор,
	|	МинимумДопПорядокРегистратора.ДатаРегистратора,
	|	МинимумДопПорядокРегистратора.ДопПорядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МинимумРегистратор.Организация КАК Организация,
	|	МинимумРегистратор.ПериодНачисления КАК ПериодНачисления,
	|	МинимумРегистратор.Район КАК Район,
	|	МинимумРегистратор.Договор КАК Договор
	|ПОМЕСТИТЬ РазличныеДоговоры
	|ИЗ
	|	МинимумРегистратор КАК МинимумРегистратор";	
	Возврат Текст;
КонецФункции

Функция РезультатЗадолженность(Организация, ПериодНачисления,Район,МКД,Договор, ИспользоватьОтборы,МВТ,НачалоПериодаРасчета,КонецПериодаРасчета)
	
	Запрос  						= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Район",					Район);
	Запрос.УстановитьПараметр("Договор",				Договор);
	Запрос.УстановитьПараметр("ПериодНачисления",		ПериодНачисления);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",	НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаРасчета",	КонецПериодаРасчета);
	Запрос.УстановитьПараметр("СначалаТекущиеНачисления", Константы.энргСначалаГаситьТекущиеНачисления.Получить());
		
	Текст 							= ТекстЗадолженностьНаГраницу(ИспользоватьОтборы);
		
	Запрос.Текст 					= Текст;
	Возврат Запрос.Выполнить();	
КонецФункции

Функция ТекстЗадолженностьНаГраницу(ИспользоватьОтборы)
	Если НЕ ИспользоватьОтборы  тогда
		ОтборДоговора 	= "";
	Иначе
		ОтборДоговора 	= " И Договор В (ВЫБРАТЬ ОтборДоговор.Договор КАК Договор ИЗ ОтборДоговор КАК ОтборДоговор)";			
	КонецЕсли;
	
	Текст 	=
	"ВЫБРАТЬ
	|	энргСпособыРаспределенияОплатыСрезПоследних.СпособРаспределения КАК СпособРаспределения
	|ПОМЕСТИТЬ СпособРаспределенияОплаты
	|ИЗ
	|	РегистрСведений.энргСпособыРаспределенияОплаты.СрезПоследних(&КонецПериодаРасчета, Организация = &Организация) КАК энргСпособыРаспределенияОплатыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПорядокПогашенияЗадолженностиСрезПоследних.Услуга КАК Услуга,
	|	энргПорядокПогашенияЗадолженностиСрезПоследних.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПорядокПогашенияУслуг
	|ИЗ
	|	РегистрСведений.энргПорядокПогашенияЗадолженности.СрезПоследних(&КонецПериодаРасчета, Организация = &Организация) КАК энргПорядокПогашенияЗадолженностиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бестВзаиморасчётыПоУслугамЮрЛицаОстатки.Район КАК Район,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОстатки.ПериодНачисления КАК ПериодНачисления,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОстатки.Договор КАК Договор,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОстатки.Услуга КАК Услуга,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОстатки.СуммаОстаток КАК СуммаОстаток,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОстатки.ДокументРеализации КАК ДокументРеализации,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОстатки.Поставщик КАК Поставщик,
	|	бестСуммаРеализации.СтавкаНДС КАК СтавкаНДС,
	|	бестСуммаРеализации.НДСВнутри КАК НДСВнутри
	|ПОМЕСТИТЬ ОстатокНачалоПериода
	|ИЗ
	|	РегистрНакопления.бестВзаиморасчётыПоУслугамЮрЛица.Остатки(&НачалоПериодаРасчета, Район = &Район" + ОтборДоговора + ") КАК бестВзаиморасчётыПоУслугамЮрЛицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бестСуммаРеализации КАК бестСуммаРеализации
	|		ПО бестВзаиморасчётыПоУслугамЮрЛицаОстатки.ДокументРеализации = бестСуммаРеализации.Регистратор
	|			И бестВзаиморасчётыПоУслугамЮрЛицаОстатки.Договор = бестСуммаРеализации.Договор
	|			И бестВзаиморасчётыПоУслугамЮрЛицаОстатки.Услуга = бестСуммаРеализации.Услуга
	|			И бестВзаиморасчётыПоУслугамЮрЛицаОстатки.ПериодНачисления = бестСуммаРеализации.ПериодНачисления
	|			И бестВзаиморасчётыПоУслугамЮрЛицаОстатки.Поставщик = бестСуммаРеализации.Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Район КАК Район,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Период КАК Период,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Регистратор КАК Регистратор,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.ПериодНачисления КАК ПериодНачисления,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Договор КАК Договор,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Услуга КАК Услуга,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.СуммаОборот КАК СуммаОборот,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.ДокументРеализации КАК ДокументРеализации,
	|	бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Поставщик КАК Поставщик,
	|	бестСуммаРеализации.СтавкаНДС КАК СтавкаНДС,
	|	бестСуммаРеализации.НДСВнутри КАК НДСВнутри
	|ПОМЕСТИТЬ ВзаиморасчетыОбороты
	|ИЗ
	|	РегистрНакопления.бестВзаиморасчётыПоУслугамЮрЛица.Обороты(&НачалоПериодаРасчета, &КонецПериодаРасчета, Регистратор, Район = &Район" + ОтборДоговора + ") КАК бестВзаиморасчётыПоУслугамЮрЛицаОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бестСуммаРеализации КАК бестСуммаРеализации
	|		ПО бестВзаиморасчётыПоУслугамЮрЛицаОбороты.ДокументРеализации = бестСуммаРеализации.Регистратор
	|			И бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Договор = бестСуммаРеализации.Договор
	|			И бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Услуга = бестСуммаРеализации.Услуга
	|			И бестВзаиморасчётыПоУслугамЮрЛицаОбороты.ПериодНачисления = бестСуммаРеализации.ПериодНачисления
	|			И бестВзаиморасчётыПоУслугамЮрЛицаОбороты.Поставщик = бестСуммаРеализации.Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.Договор КАК Договор,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.Поставщик КАК Поставщик,
	|	ВложенныйЗапрос.ПериодРасчета КАК ПериодРасчета,
	|	СУММА(ВложенныйЗапрос.ЗадолженностьНачалоПериода) КАК ЗадолженностьНачалоПериода,
	|	ВЫБОР
	|		КОГДА &СначалаТекущиеНачисления
	|				И ВложенныйЗапрос.ПериодРасчета = &ПериодНачисления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокПериодРасчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпособРаспределенияОплаты.СпособРаспределения, ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения)
	|			ТОГДА ЕСТЬNULL(ПорядокПогашенияУслуг.Порядок, 99999)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокПогашенияУслуги,
	|	ВложенныйЗапрос.Реализация КАК Реализация,
	|	МАКСИМУМ(ВложенныйЗапрос.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ВложенныйЗапрос.НДСВнутри) КАК НДСВнутри
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазличныеДоговоры.ПериодНачисления КАК ПериодНачисления,
	|		РазличныеДоговоры.Район КАК Район,
	|		РазличныеДоговоры.Договор КАК Договор,
	|		ЕСТЬNULL(ОстатокНачалоПериода.Услуга, ЗНАЧЕНИЕ(Справочник.энргВидыУслуг.ПустаяСсылка)) КАК Услуга,
	|		ЕСТЬNULL(ОстатокНачалоПериода.Поставщик, ЗНАЧЕНИЕ(Справочник.энргКонтрагенты.ПустаяСсылка)) КАК Поставщик,
	|		ЕСТЬNULL(ОстатокНачалоПериода.ПериодНачисления, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРасчета,
	|		ЕСТЬNULL(ОстатокНачалоПериода.СуммаОстаток, 0) КАК ЗадолженностьНачалоПериода,
	|		ОстатокНачалоПериода.ДокументРеализации КАК Реализация,
	|		ОстатокНачалоПериода.СтавкаНДС КАК СтавкаНДС,
	|		ОстатокНачалоПериода.НДСВнутри КАК НДСВнутри
	|	ИЗ
	|		РазличныеДоговоры КАК РазличныеДоговоры
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОстатокНачалоПериода КАК ОстатокНачалоПериода
	|			ПО РазличныеДоговоры.Район = ОстатокНачалоПериода.Район
	|				И РазличныеДоговоры.Договор = ОстатокНачалоПериода.Договор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МинимумРегистратор.ПериодНачисления,
	|		МинимумРегистратор.Район,
	|		МинимумРегистратор.Договор,
	|		ЕСТЬNULL(ВзаиморасчетыОбороты.Услуга, ЗНАЧЕНИЕ(Справочник.энргВидыУслуг.ПустаяСсылка)),
	|		ЕСТЬNULL(ВзаиморасчетыОбороты.Поставщик, ЗНАЧЕНИЕ(Справочник.энргКонтрагенты.ПустаяСсылка)),
	|		ЕСТЬNULL(ВзаиморасчетыОбороты.ПериодНачисления, ДАТАВРЕМЯ(1, 1, 1)),
	|		МАКСИМУМ(ЕСТЬNULL(ВзаиморасчетыОбороты.СуммаОборот, 0)),
	|		ВзаиморасчетыОбороты.ДокументРеализации,
	|		МАКСИМУМ(ВзаиморасчетыОбороты.СтавкаНДС),
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыОбороты.НДСВнутри)
	|	ИЗ
	|		МинимумРегистратор КАК МинимумРегистратор
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВзаиморасчетыОбороты КАК ВзаиморасчетыОбороты
	|			ПО (ВЫБОР
	|					КОГДА МинимумРегистратор.ДатаРегистратора > ВзаиморасчетыОбороты.Период
	|						ТОГДА ИСТИНА
	|					КОГДА МинимумРегистратор.ДатаРегистратора = ВзаиморасчетыОбороты.Период
	|						ТОГДА ВЫБОР
	|								КОГДА МинимумРегистратор.ДопПорядок = 0
	|										И ВзаиморасчетыОбороты.Регистратор ССЫЛКА Документ.бестРеализацияЮрЛица
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ МинимумРегистратор.ДокРегистратор > ВзаиморасчетыОбороты.Регистратор
	|							КОНЕЦ
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|				И МинимумРегистратор.Район = ВзаиморасчетыОбороты.Район
	|				И МинимумРегистратор.Договор = ВзаиморасчетыОбороты.Договор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МинимумРегистратор.ПериодНачисления,
	|		МинимумРегистратор.Район,
	|		МинимумРегистратор.Договор,
	|		ВзаиморасчетыОбороты.Услуга,
	|		ВзаиморасчетыОбороты.Поставщик,
	|		ВзаиморасчетыОбороты.ПериодНачисления,
	|		ВзаиморасчетыОбороты.ДокументРеализации) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокПогашенияУслуг КАК ПорядокПогашенияУслуг
	|		ПО ВложенныйЗапрос.Услуга = ПорядокПогашенияУслуг.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособРаспределенияОплаты КАК СпособРаспределенияОплаты
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ПериодНачисления,
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.Услуга,
	|	ВложенныйЗапрос.Поставщик,
	|	ВложенныйЗапрос.ПериодРасчета,
	|	ВЫБОР
	|		КОГДА &СначалаТекущиеНачисления
	|				И ВложенныйЗапрос.ПериодРасчета = &ПериодНачисления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпособРаспределенияОплаты.СпособРаспределения, ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения)
	|			ТОГДА ЕСТЬNULL(ПорядокПогашенияУслуг.Порядок, 99999)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВложенныйЗапрос.Реализация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодНачисления,
	|	Район,
	|	Договор,
	|	ПорядокПериодРасчета,
	|	ПериодРасчета,
	|	ПорядокПогашенияУслуги,
	|	Услуга";
	Возврат Текст;
КонецФункции

Функция РезультатДокументыДляПроведения(Организация,ПериодНачисления,Район,МКД,Договор,ИспользоватьОтборы,МВТ)
	Запрос  						= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Район",				Район);
	Запрос.УстановитьПараметр("ПериодНачисления",	ПериодНачисления);
	Текст 							= ТекстДокументыДляПроведения(ИспользоватьОтборы);
	
	Запрос.Текст 					= Текст;
	Возврат Запрос.Выполнить();	
КонецФункции

Функция ТекстДокументыДляПроведения(ИспользоватьОтборы)
	Если НЕ ИспользоватьОтборы  тогда
		ОтборДоговора 	= "";
	Иначе
		ОтборДоговора 	= " И бестВзаиморасчетыПоследовательность.Договор В (ВЫБРАТЬ ОтборДоговор.Договор КАК Договор ИЗ ОтборДоговор КАК ОтборДоговор)";			
	КонецЕсли;
	
	Текст  =
	"ВЫБРАТЬ
	|	бестВзаиморасчетыПоследовательность.Организация КАК Организация,
	|	бестВзаиморасчетыПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	бестВзаиморасчетыПоследовательность.Район КАК Район,
	|	бестВзаиморасчетыПоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	|	бестВзаиморасчетыПоследовательность.Договор КАК Договор,
	|	бестВзаиморасчетыПоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	|	бестВзаиморасчетыПоследовательность.ДокРегистратор КАК ДокРегистратор,
	|	бестВзаиморасчетыПоследовательность.ЭтоОплата КАК ЭтоОплата,
	|	бестВзаиморасчетыПоследовательность.ИсточникПоступления КАК ИсточникПоступления
	|ПОМЕСТИТЬ ДокументыДляПроведения
	|ИЗ
	|	МинимумРегистратор КАК МинимумРегистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бестВзаиморасчетыПоследовательность КАК бестВзаиморасчетыПоследовательность
	|		ПО (бестВзаиморасчетыПоследовательность.Организация = &Организация)
	|			И (бестВзаиморасчетыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (бестВзаиморасчетыПоследовательность.Район = &Район)" + ОтборДоговора + "
	|			И (ВЫБОР
	|				КОГДА МинимумРегистратор.ДатаРегистратора < бестВзаиморасчетыПоследовательность.ДатаРегистратора
	|					ТОГДА ИСТИНА
	|				КОГДА МинимумРегистратор.ДатаРегистратора = бестВзаиморасчетыПоследовательность.ДатаРегистратора
	|					ТОГДА ВЫБОР
	|							КОГДА МинимумРегистратор.ДопПорядок = 0
	|									И бестВзаиморасчетыПоследовательность.ДокРегистратор ССЫЛКА Документ.бестРеализацияЮрЛица
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ МинимумРегистратор.ДокРегистратор <= бестВзаиморасчетыПоследовательность.ДокРегистратор
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И МинимумРегистратор.Организация = бестВзаиморасчетыПоследовательность.Организация
	|			И МинимумРегистратор.ПериодНачисления = бестВзаиморасчетыПоследовательность.ПериодНачисления
	|			И МинимумРегистратор.Район = бестВзаиморасчетыПоследовательность.Район
	|			И МинимумРегистратор.Договор = бестВзаиморасчетыПоследовательность.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	бестВзаиморасчетыПоследовательность.Организация,
	|	бестВзаиморасчетыПоследовательность.ПериодНачисления,
	|	бестВзаиморасчетыПоследовательность.Район,
	|	бестВзаиморасчетыПоследовательность.СостояниеПроведения,
	|	бестВзаиморасчетыПоследовательность.Договор,
	|	бестВзаиморасчетыПоследовательность.ДатаРегистратора,
	|	бестВзаиморасчетыПоследовательность.ДокРегистратор,
	|	бестВзаиморасчетыПоследовательность.ЭтоОплата,
	|	бестВзаиморасчетыПоследовательность.ИсточникПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыДляПроведения.Организация КАК Организация,
	|	ДокументыДляПроведения.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыДляПроведения.Район КАК Район,
	|	ДокументыДляПроведения.СостояниеПроведения КАК СостояниеПроведения,
	|	ДокументыДляПроведения.Договор КАК Договор,
	|	ДокументыДляПроведения.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыДляПроведения.ДокРегистратор КАК ДокРегистратор,
	|	ВЫБОР
	|		КОГДА ДокументыДляПроведения.ДокРегистратор ССЫЛКА Документ.бестПерерасчетНП
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДопПорядок,
	|	ДокументыДляПроведения.ЭтоОплата КАК ЭтоОплата,
	|	ДокументыДляПроведения.ИсточникПоступления КАК ИсточникПоступления
	|ИЗ
	|	ДокументыДляПроведения КАК ДокументыДляПроведения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	Договор,
	|	ДатаРегистратора,
	|	ДопПорядок,
	|	ДокРегистратор";
	Возврат Текст; 
КонецФункции

Функция РезультатДанныеНачислений(МВТ)
	
	Запрос  						= Новый Запрос;
	Запрос.УстановитьПараметр("СначалаТекущиеНачисления", Константы.энргСначалаГаситьТекущиеНачисления.Получить());
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.Текст 		=
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.Договор КАК Договор,
	|	ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|	ВложенныйЗапрос.ПериодРасчета КАК ПериодРасчета,
	|	ВложенныйЗапрос.Поставщик КАК Поставщик,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.СуммаНачислений КАК СуммаНачислений,
	|	ВЫБОР
	|		КОГДА &СначалаТекущиеНачисления
	|				И ВложенныйЗапрос.ПериодРасчета = ВложенныйЗапрос.ПериодНачисления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокПериодРасчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпособРаспределенияОплаты.СпособРаспределения, ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения)
	|			ТОГДА ЕСТЬNULL(ПорядокПогашенияУслуг.Порядок, 99999)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокПогашенияУслуги,
	|	ВложенныйЗапрос.НДСВнутри КАК НДСВнутри,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыДляПроведения.ПериодНачисления КАК ПериодНачисления,
	|		ДокументыДляПроведения.Район КАК Район,
	|		ДокументыДляПроведения.Договор КАК Договор,
	|		ДокументыДляПроведения.ДокРегистратор КАК ДокРегистратор,
	|		бестСуммаРеализации.ПериодНачисления КАК ПериодРасчета,
	|		бестСуммаРеализации.Поставщик КАК Поставщик,
	|		бестСуммаРеализации.Услуга КАК Услуга,
	|		СУММА(бестСуммаРеализации.Сумма) КАК СуммаНачислений,
	|		бестСуммаРеализации.НДСВнутри КАК НДСВнутри,
	|		бестСуммаРеализации.СтавкаНДС КАК СтавкаНДС
	|	ИЗ
	|		ДокументыДляПроведения КАК ДокументыДляПроведения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.бестСуммаРеализации КАК бестСуммаРеализации
	|			ПО ДокументыДляПроведения.ДокРегистратор = бестСуммаРеализации.Регистратор
	|				И (бестСуммаРеализации.Сумма <> 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументыДляПроведения.ДокРегистратор,
	|		бестСуммаРеализации.ПериодНачисления,
	|		бестСуммаРеализации.Поставщик,
	|		бестСуммаРеализации.Услуга,
	|		ДокументыДляПроведения.ПериодНачисления,
	|		ДокументыДляПроведения.Договор,
	|		ДокументыДляПроведения.Район,
	|		бестСуммаРеализации.НДСВнутри,
	|		бестСуммаРеализации.СтавкаНДС) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокПогашенияУслуг КАК ПорядокПогашенияУслуг
	|		ПО ВложенныйЗапрос.Услуга = ПорядокПогашенияУслуг.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособРаспределенияОплаты КАК СпособРаспределенияОплаты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ПериодНачисления,
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.ДокРегистратор,
	|	ВложенныйЗапрос.Услуга";	
	
	Возврат Запрос.Выполнить(); 	
КонецФункции

Функция РезультатАвансыНаГраницу(Организация, ПериодНачисления,район,МКД,Договор,ИспользоватьОтборы,МВТ,НачалоПериодаРасчета,КонецПериодаРасчета)
	
	Запрос  						= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Район",					Район);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",	НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаРасчета",	КонецПериодаРасчета);
	Текст 							= ТекстАвансыНаГраницу(ИспользоватьОтборы);
		
	Запрос.Текст 					= Текст;
	Возврат Запрос.Выполнить();	
	
КонецФункции

Функция ТекстАвансыНаГраницу(ИспользоватьОтборы)
	Если НЕ ИспользоватьОтборы  тогда
		ОтборДоговора 	= "";
	Иначе
		ОтборДоговора 	= " И Договор В (ВЫБРАТЬ ОтборДоговор.Договор КАК Договор ИЗ ОтборДоговор КАК ОтборДоговор)";			
	КонецЕсли;

	Текст  =
	"ВЫБРАТЬ
	|	бестАвансыОстатки.Район КАК Район,
	|	бестАвансыОстатки.Договор КАК Договор,
	|	бестАвансыОстатки.ДокументОплаты КАК ДокументОплаты,
	|	бестАвансыОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ АвансыОстатки
	|ИЗ
	|	РегистрНакопления.бестАвансы.Остатки(
	|			&НачалоПериодаРасчета,
	|			Организация = &Организация
	|				И Район = &Район" + ОтборДоговора + ") КАК бестАвансыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бестАвансыОбороты.Период КАК Период,
	|	бестАвансыОбороты.Регистратор КАК Регистратор,
	|	бестАвансыОбороты.Район КАК Район,
	|	бестАвансыОбороты.Договор КАК Договор,
	|	бестАвансыОбороты.ДокументОплаты КАК ДокументОплаты,
	|	бестАвансыОбороты.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ АвансыОбороты
	|ИЗ
	|	РегистрНакопления.бестАвансы.Обороты(
	|			&НачалоПериодаРасчета,
	|			&КонецПериодаРасчета,
	|			Регистратор,
	|			Организация = &Организация
	|				И Район = &Район" + ОтборДоговора + ") КАК бестАвансыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.Договор КАК Договор,
	|	ВложенныйЗапрос.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(ВложенныйЗапрос.СуммаАванса) КАК СуммаАванса
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазличныеДоговоры.Организация КАК Организация,
	|		РазличныеДоговоры.ПериодНачисления КАК ПериодНачисления,
	|		РазличныеДоговоры.Район КАК Район,
	|		РазличныеДоговоры.Договор КАК Договор,
	|		АвансыОстатки.ДокументОплаты КАК ДокументОплаты,
	|		АвансыОстатки.СуммаОстаток КАК СуммаАванса
	|	ИЗ
	|		РазличныеДоговоры КАК РазличныеДоговоры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АвансыОстатки КАК АвансыОстатки
	|			ПО РазличныеДоговоры.Район = АвансыОстатки.Район
	|				И РазличныеДоговоры.Договор = АвансыОстатки.Договор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МинимумРегистратор.Организация,
	|		МинимумРегистратор.ПериодНачисления,
	|		МинимумРегистратор.Район,
	|		МинимумРегистратор.Договор,
	|		АвансыОбороты.ДокументОплаты,
	|		СУММА(АвансыОбороты.СуммаОборот)
	|	ИЗ
	|		МинимумРегистратор КАК МинимумРегистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АвансыОбороты КАК АвансыОбороты
	|			ПО (ВЫБОР
	|					КОГДА МинимумРегистратор.ДатаРегистратора > АвансыОбороты.Период
	|						ТОГДА ИСТИНА
	|					КОГДА МинимумРегистратор.ДатаРегистратора = АвансыОбороты.Период
	|						ТОГДА ВЫБОР
	|								КОГДА МинимумРегистратор.ДопПорядок = 0
	|										И АвансыОбороты.Регистратор ССЫЛКА Документ.бестРеализацияЮрЛица
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ МинимумРегистратор.ДокРегистратор > АвансыОбороты.Регистратор
	|							КОНЕЦ
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|				И МинимумРегистратор.Район = АвансыОбороты.Район
	|				И МинимумРегистратор.Договор = АвансыОбороты.Договор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МинимумРегистратор.Организация,
	|		МинимумРегистратор.ПериодНачисления,
	|		МинимумРегистратор.Район,
	|		МинимумРегистратор.Договор,
	|		АвансыОбороты.ДокументОплаты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.ПериодНачисления,
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.ДокументОплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	Договор,
	|	ДокументОплаты";
	Возврат Текст;
КонецФункции

Функция РезультатОплата(МВТ, НачалоПериодаРасчета)
	
	Текст 	=
	"ВЫБРАТЬ
	|	ДокументыДляПроведения.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыДляПроведения.Район КАК Район,
	|	ДокументыДляПроведения.Договор КАК Договор,
	|	ДокументыДляПроведения.ДокРегистратор КАК ДокРегистратор,
	|	бестПлатежноеПоручениеВходящееЮрЛицаОплата.ПериодОплаты КАК ПериодВзаиморасчетов,
	|	бестПлатежноеПоручениеВходящееЮрЛицаОплата.Услуга КАК Услуга,
	|	бестПлатежноеПоручениеВходящееЮрЛицаОплата.Поставщик КАК Поставщик,
	|	бестПлатежноеПоручениеВходящееЮрЛицаОплата.СуммаОплаты КАК Сумма,
	|	бестПлатежноеПоручениеВходящееЮрЛицаОплата.ДокументНачисления КАК Реализация
	|ИЗ
	|	ДокументыДляПроведения КАК ДокументыДляПроведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бестПлатежноеПоручениеВходящееЮрЛица.Оплата КАК бестПлатежноеПоручениеВходящееЮрЛицаОплата
	|		ПО ДокументыДляПроведения.ДокРегистратор = бестПлатежноеПоручениеВходящееЮрЛицаОплата.Ссылка
	//|			И (ДокументыДляПроведения.ДатаРегистратора = ВЫБОР
	//|				КОГДА бестПлатежноеПоручениеВходящееЮрЛицаОплата.ДатаПлатежногоДокумента < &НачалоПериодаРасчета
	//|					ТОГДА &НачалоПериодаРасчета
	//|				ИНАЧЕ бестПлатежноеПоручениеВходящееЮрЛицаОплата.ДатаПлатежногоДокумента
	//|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодНачисления,
	|	Район,
	|	Договор,
	|	ДокРегистратор";
	
	Запрос  						= Новый Запрос(Текст);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета", НачалоПериодаРасчета);
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция НастройкиПорядкаПогашения()
	Запрос  		= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ
	|	энргПорядокПогашенияЗадолженности.Услуга,
	|	энргПорядокПогашенияЗадолженности.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.энргПорядокПогашенияЗадолженности КАК энргПорядокПогашенияЗадолженности
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Результат  = Запрос.Выполнить();
	Возврат Результат;	
КонецФункции

Функция НаборыПоТипам()
	
	Соотвествие  			= Новый Соответствие;	
	МассивРегистров  		= Новый Массив;
	МассивРегистров.Добавить("бестАвансы");
	МассивРегистров.Добавить("бестАвансыИспользованные");
	МассивРегистров.Добавить("бестАвансыПоступившие");
	МассивРегистров.Добавить("бестВзаиморасчётыПоУслугамЮрЛица");
	МассивРегистров.Добавить("бестОплатаУслуг"); 	
	
	для Каждого Регистр из  МассивРегистров цикл
		Типы 					= Метаданные.РегистрыНакопления[Регистр].СтандартныеРеквизиты.Регистратор.Тип.типы();		
		Для Каждого ТипРегистратора из Типы цикл			
			Если Соотвествие.Получить(ТипРегистратора) = Неопределено тогда
				Массив 			= Новый Массив;
				Массив.Добавить(Регистр);
				Соотвествие.Вставить(ТипРегистратора,Массив);
			иначе
				Соотвествие[ТипРегистратора].добавить(Регистр);
			КонецЕсли;  			
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Соотвествие;
	
КонецФункции

Функция ДанныеНачислений(Договор,ВыборкаДанныеНачислений)
	перем ТекРасшифровкаНачислений;	
		
	РасшифровкаНачислений  									= Новый ТаблицаЗначений;
	РасшифровкаНачислений.Колонки.Добавить("ПериодРасчета",				Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РасшифровкаНачислений.Колонки.Добавить("Услуга",					Новый ОписаниеТипов("СправочникСсылка.энргВидыУслуг"));
	РасшифровкаНачислений.Колонки.Добавить("ПорядокПериодРасчета",		Новый ОписаниеТипов("Число"));
	РасшифровкаНачислений.Колонки.Добавить("ПорядокПогашенияУслуги",	Новый ОписаниеТипов("Число"));
	РасшифровкаНачислений.Колонки.Добавить("СуммаНачислений",			Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	//РасшифровкаНачислений.Колонки.Добавить("СуммаНДС",					Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	РасшифровкаНачислений.Колонки.Добавить("СтавкаНДС",					Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(9,6)));
	РасшифровкаНачислений.Колонки.Добавить("НДСВнутри",					Новый ОписаниеТипов("Булево"));
	РасшифровкаНачислений.Колонки.Добавить("ДокументРеализации",		Новый ОписаниеТипов("ДокументСсылка.бестРеализацияЮрЛица"));
	РасшифровкаНачислений.Колонки.Добавить("Поставщик",					Новый ОписаниеТипов("СправочникСсылка.энргКонтрагенты"));
	
	ОписаниеНачислений  									= Новый ФиксированнаяСтруктура("СуммаНачислений,Расшифровка");
	СуммаНачислений 										= 0;
	ТекДокументНачисления 									= Неопределено;
	
	Результат  												= Новый Соответствие;
	
	Если Договор  = ВыборкаДанныеНачислений.Договор тогда		
		Пока Договор = ВыборкаДанныеНачислений.Договор цикл 			
			
			Если НЕ ТекДокументНачисления = ВыборкаДанныеНачислений.ДокРегистратор Тогда
				Если НЕ ТекДокументНачисления = Неопределено Тогда
					текОписаниеНачислений 					= Новый Структура(ОписаниеНачислений);
					текОписаниеНачислений.СуммаНачислений 	= СуммаНачислений;
					текОписаниеНачислений.Расшифровка 		= ТекРасшифровкаНачислений;
					Результат.Вставить(ТекДокументНачисления, текОписаниеНачислений);
				КонецЕсли;				
				ТекРасшифровкаНачислений 					= РасшифровкаНачислений.Скопировать();
			КонецЕсли;
						
			СтрокаНачисления	  							= ТекРасшифровкаНачислений.Добавить();
			СтрокаНачисления.ПериодРасчета 					= ВыборкаДанныеНачислений.ПериодРасчета;
			СтрокаНачисления.Услуга		 					= ВыборкаДанныеНачислений.Услуга;
			СтрокаНачисления.Поставщик 						= ВыборкаДанныеНачислений.Поставщик;
			СтрокаНачисления.СуммаНачислений				= ВыборкаДанныеНачислений.СуммаНачислений;
			СтрокаНачисления.СтавкаНДС						= ВыборкаДанныеНачислений.СтавкаНДС;
			СтрокаНачисления.НДСВнутри						= ВыборкаДанныеНачислений.НДСВнутри;
			СтрокаНачисления.ДокументРеализации				= ВыборкаДанныеНачислений.ДокРегистратор;
			СуммаНачислений 								= СуммаНачислений + ВыборкаДанныеНачислений.СуммаНачислений;
			ТекДокументНачисления 							= ВыборкаДанныеНачислений.ДокРегистратор;
			
			Если не ВыборкаДанныеНачислений.следующий() тогда
				Прервать;
			КонецЕсли;  				
		КонецЦикла;				  
	КонецЕсли; 	
	
	Если НЕ ТекДокументНачисления = Неопределено Тогда
		текОписаниеНачислений 								= Новый Структура(ОписаниеНачислений);
		текОписаниеНачислений.СуммаНачислений 				= СуммаНачислений;
		текОписаниеНачислений.Расшифровка 					= ТекРасшифровкаНачислений;
		Результат.Вставить(ТекДокументНачисления, текОписаниеНачислений);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Функция АвансНаГраницу(Договор,ВыборкаАванс)
	
	Авансы  				= Новый Массив;
	СуммаАванса 			= 0;
	Если Договор  = ВыборкаАванс.Договор тогда		
		Пока Договор = ВыборкаАванс.Договор цикл 			
			ОписаниеАванса 	= ОписаниеАванса();
			ЗаполнитьЗначенияСвойств(ОписаниеАванса, ВыборкаАванс);
			Авансы.Добавить(ОписаниеАванса);
			СуммаАванса 	= СуммаАванса + ВыборкаАванс.СуммаАванса;
			Если не ВыборкаАванс.следующий() тогда
				Прервать;
			КонецЕсли;  				
		КонецЦикла;				  
	КонецЕсли; 			
	
	Возврат Новый Структура("Авансы, СуммаАванса", Авансы, СуммаАванса);
	
КонецФункции

Функция ОписаниеАванса()
	Возврат Новый Структура("ДокументОплаты, СуммаАванса");	
КонецФункции

Функция ЗадолженностьНаГраницу(Договор,ВыборкаЗадолженность)
	перем ТекПериодыЗадолженность,ТекУслуга,ЗадолженностьУслуга;
	
	РасшифровкаЗадолженности						= ТаблицаРасшифровкиЗадолженности();
	
	ОписаниеЗадолженности  							= ОписаниеЗадолженности();
	
	ЗадолженностьВсего  							= 0;
	
	Если Договор  = ВыборкаЗадолженность.Договор тогда		
		Пока Договор = ВыборкаЗадолженность.Договор цикл 			
			Если ЗначениеЗаполнено(ВыборкаЗадолженность.Услуга)
				И ЗначениеЗаполнено(ВыборкаЗадолженность.Поставщик) 
				И ЗначениеЗаполнено(ВыборкаЗадолженность.ПериодРасчета) Тогда 				
				СтрокаЗадолженности  					= РасшифровкаЗадолженности.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗадолженности, ВыборкаЗадолженность);
				СтрокаЗадолженности.СуммаЗадолженности	= ВыборкаЗадолженность.ЗадолженностьНачалоПериода;
				ЗадолженностьВсего 						= ЗадолженностьВсего + ВыборкаЗадолженность.ЗадолженностьНачалоПериода;
			КонецЕсли;
			Если не ВыборкаЗадолженность.следующий() тогда
				Прервать;
			КонецЕсли;  				
		КонецЦикла;				  
	КонецЕсли; 	
	
	Результат  										= Новый Структура(ОписаниеЗадолженности);
	Результат.СуммаЗадолженности 					= ЗадолженностьВсего;
	Результат.Расшифровка 							= РасшифровкаЗадолженности;
	
	Возврат Результат;
КонецФункции

Функция ТаблицаРасшифровкиЗадолженности()
		
	ПериодыЗадолженности  							= Новый ТаблицаЗначений;
	Колонки  										= ПериодыЗадолженности.Колонки;
	Колонки.Добавить("ПорядокПериодРасчета",		Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ПорядокПогашенияУслуги",		Новый ОписаниеТипов("Число"));	
	Колонки.Добавить("Услуга",						Новый ОписаниеТипов("СправочникСсылка.энргВидыУслуг"));
	Колонки.Добавить("ПериодРасчета",				Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Колонки.Добавить("СуммаЗадолженности",			Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Колонки.Добавить("Поставщик",					Новый ОписаниеТипов("СправочникСсылка.энргКонтрагенты"));
	Колонки.Добавить("Реализация",					Новый ОписаниеТипов("ДокументСсылка.бестРеализацияЮрЛица"));
	Колонки.Добавить("СтавкаНДС",					Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(9,6)));
	Колонки.Добавить("НДСВнутри",					Новый ОписаниеТипов("Булево"));
	
	Возврат ПериодыЗадолженности;
КонецФункции 

Функция ДанныеОплаты(Договор, ВыборкаОплата)
	перем ТекРасшифровкаОплаты;
	
	Результат  								= Новый Соответствие;
				
	РасшифровкаОплаты  						= Новый ТаблицаЗначений;
	РасшифровкаОплаты.Колонки.Добавить("ПериодВзаиморасчетов",	Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РасшифровкаОплаты.Колонки.Добавить("Услуга",				Новый ОписаниеТипов("СправочникСсылка.энргВидыУслуг"));
	РасшифровкаОплаты.Колонки.Добавить("Поставщик",				Новый ОписаниеТипов("СправочникСсылка.энргКонтрагенты"));
	РасшифровкаОплаты.Колонки.Добавить("Сумма",					Новый ОписаниеТипов("Число"));
	РасшифровкаОплаты.Колонки.Добавить("Реализация",			Новый ОписаниеТипов("ДокументСсылка.бестРеализацияЮрЛица"));
	
	ТекДокументОплаты 						= Неопределено;
	ОписаниеОплаты  						=	 Новый ФиксированнаяСтруктура("Сумма,Расшифровка");
	Сумма 									= 0;
	Если Договор  = ВыборкаОплата.Договор тогда	
		Пока Договор = ВыборкаОплата.Договор цикл			
			Если НЕ ТекДокументОплаты = ВыборкаОплата.ДокРегистратор Тогда
				Если НЕ ТекДокументОплаты = Неопределено Тогда
					текОписание 			= Новый Структура(ОписаниеОплаты);
					текОписание.Сумма 		= Сумма;
					текОписание.Расшифровка = ТекРасшифровкаОплаты;
					Результат.Вставить(ТекДокументОплаты, текОписание);
				КонецЕсли;				
				ТекРасшифровкаОплаты 		= РасшифровкаОплаты.Скопировать();
			КонецЕсли;
			
			СтрокаНачисления	  			= ТекРасшифровкаОплаты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачисления,ВыборкаОплата);
			
			Сумма 							= Сумма + ВыборкаОплата.Сумма;
			ТекДокументОплаты 				= ВыборкаОплата.ДокРегистратор;
			
			Если не ВыборкаОплата.следующий() тогда
				Прервать;
			КонецЕсли;  				
		КонецЦикла;				  
	КонецЕсли;
	
	Если НЕ ТекДокументОплаты = Неопределено Тогда
		текОписание 						= Новый Структура(ОписаниеОплаты);
		текОписание.Сумма 					= Сумма;
		текОписание.Расшифровка 			= ТекРасшифровкаОплаты;
		Результат.Вставить(ТекДокументОплаты, текОписание);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ИзменитьСостояниеПоследовательности(Организация, ПериодНачисления,Район,ПроведенСНарушением,ПроведенВПоследовательности,Договор)
	Попытка
		НаборПоследовательности  					= РегистрыСведений.бестВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();
		НаборПоследовательности.Отбор.Организация.установить(Организация);
		НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборПоследовательности.Отбор.Район.установить(Район);
		НаборПоследовательности.Отбор.СостояниеПроведения.установить(ПроведенСНарушением);
		Если Договор <> Неопределено тогда
			НаборПоследовательности.Отбор.Договор.установить(Договор);
		КонецЕсли;
		НаборПоследовательности.Прочитать();
		ТаблицаНабора  								= НаборПоследовательности.Выгрузить();
		НаборПоследовательности.Очистить();
		НаборПоследовательности.Записать();
		
		ТаблицаНабора.ЗаполнитьЗначения(ПроведенВПоследовательности,"СостояниеПроведения");
		
		НаборПоследовательности  					= РегистрыСведений.бестВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();
		НаборПоследовательности.Загрузить(ТаблицаНабора);
		НаборПоследовательности.Записать(Ложь);
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ОписаниеЗадолженности()
	Возврат Новый ФиксированнаяСтруктура("СуммаЗадолженности,Расшифровка");	
КонецФункции

Функция ПровестиВзаиморасчеты(ПараметрыПроведения,МассивДокументовНачисления)

	Организация 								= ПараметрыПроведения.Организация;
	ПериодНачисления							= ПараметрыПроведения.ПериодНачисления;
	Район										= ПараметрыПроведения.Район;
	МассивДокументов							= ПараметрыПроведения.МассивДокументов;
	ДанныеЗадолженности							= ПараметрыПроведения.ДанныеЗадолженности;
	СпособРаспределенияОплаты 					= ПараметрыПроведения.СпособРаспределенияОплаты;
	Исключен  									= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
	ПроведенВПоследоватености  					= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	Начисления									= ПараметрыПроведения.ДанныеНачислений;
	Оплата										= ПараметрыПроведения.ДанныеОплаты;
	текДокРегистратор 							= Неопределено;
		
	Параметры 									= Новый Структура("
	|Организация, ПериодНачисления,Район,
	|Авансы,СуммаАванса,ДанныеЗадолженности,
	|СпособРаспределенияОплаты, НастройкиПорядкаПогашения",
	Организация, ПериодНачисления,район,
	ПараметрыПроведения.Авансы,ПараметрыПроведения.СуммаАванса,ДанныеЗадолженности,
	СпособРаспределенияОплаты,ПараметрыПроведения.НастройкиПорядкаПогашения);
		
	для Каждого Документ из МассивДокументов цикл  		
		ОчищатьСтроки 							= Истина;
		Если текДокРегистратор = Документ.ДокРегистратор Тогда
			ОчищатьСтроки 						= Ложь;
		КонецЕсли;
		
		Если Документ.состояниепроведения  = Исключен тогда 			
			// Очищаем данные.
			НаборПоследовательности 			= РегистрыСведений.бестВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.ДокРегистратор.установить(Документ.ДокРегистратор);
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.СостояниеПроведения.установить(Документ.СостояниеПроведения);
			НаборПоследовательности.Отбор.Договор.установить(Документ.Договор);
			НаборПоследовательности.Записать();		
			Продолжить;
		КонецЕсли;
		
		текДокРегистратор 						= Документ.ДокРегистратор;
				
		ДанныеДокумента  						= Новый Структура;
		ДанныеДокумента.Вставить("Договор", 				Документ.Договор);				
		ДанныеДокумента.Вставить("Период",					Документ.ДатаРегистратора);
		ДанныеДокумента.Вставить("ИсточникПоступления",		Документ.ИсточникПоступления);		
		ДанныеДокумента.Вставить("Регистратор",				текДокРегистратор);
		ДанныеДокумента.Вставить("ЭтоОплата",				Документ.ЭтоОплата);
		//ДанныеДокумента.Вставить("ЭтоКорректировкаОплаты",	Документ.ЭтоКорректировкаОплаты);
		
		СтруктураТаблицНаборов 					= СтруктураТаблицНаборов(МассивДокументовНачисления, ОчищатьСтроки, ДанныеДокумента, ПараметрыПроведения, текДокРегистратор);
		
		ДанныеДокумента.Вставить("НаборТаблиц",							СтруктураТаблицНаборов.НаборТаблиц);
		ДанныеДокумента.Вставить("НаборыЗаписей",						СтруктураТаблицНаборов.НаборыЗаписей);
				
		//Если ТипЗнч(Документ.ДокРегистратор) = Тип("ДокументСсылка.энргПерерасчет") и НЕ Документ.ЭтоОплата Тогда
		//	ДанныеНачисления					= Начисления[текДокРегистратор];
		//	Если НЕ ДанныеНачисления = Неопределено Тогда
		//		УвеличитьЗадолженность(Параметры, ДанныеДокумента, ДанныеНачисления);			
		//	КонецЕсли;
		//ИначеЕсли ТипЗнч(Документ.ДокРегистратор) = Тип("ДокументСсылка.энргПерерасчет") и Документ.ЭтоОплата Тогда
		//	Если ДанныеДокумента.ЭтоКорректировкаОплаты Тогда
		//		ДанныеНачисления					= Начисления[текДокРегистратор];
		//		Если НЕ ДанныеНачисления = Неопределено Тогда
		//			УвеличитьЗадолженность(Параметры, ДанныеДокумента, ДанныеНачисления);			
		//		КонецЕсли;
		//	КонецЕсли;
		//	ДанныеОплаты						= Оплата[текДокРегистратор];
		//	РасшифровкаОплаты 					= ДанныеОплаты.Расшифровка;
		//	Для Каждого СтрокаОплаты Из РасшифровкаОплаты Цикл
		//		СписатьЗадолженность(Параметры, ДанныеДокумента, СтрокаОплаты.Сумма,СтрокаОплаты.Услуга,СтрокаОплаты.Поставщик,СтрокаОплаты.ПериодВзаиморасчетов);
		//		СписатьЗадолженность(Параметры, ДанныеДокумента, СтрокаОплаты.Сумма,Неопределено,Неопределено,Неопределено); 				
		//		Если СтрокаОплаты.Сумма > 0 Тогда
		//			УвеличитьАванс(Параметры,ДанныеДокумента,СтрокаОплаты.Сумма);
		//		КонецЕсли;				
		//	КонецЦикла;
		//ИначеЕсли Не Документ.ЭтоОплата тогда	
		Если Не Документ.ЭтоОплата тогда
			ДанныеНачисления					= Начисления[текДокРегистратор];									
			Если ДанныеНачисления <> Неопределено тогда				
				УвеличитьЗадолженность(Параметры, ДанныеДокумента, ДанныеНачисления);
			КонецЕсли;		
		Иначе	
			ДанныеОплаты						= Оплата[текДокРегистратор];
			РасшифровкаОплаты 					= ДанныеОплаты.Расшифровка;
			Для Каждого СтрокаОплаты Из РасшифровкаОплаты Цикл
				СписатьЗадолженность(Параметры, ДанныеДокумента, СтрокаОплаты.Сумма,СтрокаОплаты.Услуга,СтрокаОплаты.Поставщик,СтрокаОплаты.ПериодВзаиморасчетов,СтрокаОплаты.Реализация);
				СписатьЗадолженность(Параметры, ДанныеДокумента, СтрокаОплаты.Сумма,Неопределено,Неопределено,Неопределено); 				
				Если СтрокаОплаты.Сумма > 0 Тогда
					УвеличитьАванс(Параметры,ДанныеДокумента,СтрокаОплаты.Сумма);
				КонецЕсли;				
			КонецЦикла;			 
		КонецЕсли;
		
		// Удаляем не нужные параметры.
		МассивПараметров  						= ПараметрыВзаиморасчетов();
		для Каждого УдаляемыйПараметр из МассивПараметров цикл
			Если Параметры.Свойство(УдаляемыйПараметр) тогда
				Параметры.Удалить(УдаляемыйПараметр);
			КонецЕсли;			
		КонецЦикла;
				
		// Не будем выполнять запись сразу, сначало пройдем все договоры.
		//Если ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.бестРеализацияЮрЛица")
		//	или ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.бестПлатежноеПоручениеВходящееЮрЛица") тогда
		//	
		//	НаборыЗаписей 				= Новый Структура("бестВзаиморасчётыПоУслугамЮрЛица,бестАвансы,бестАвансыИспользованные");			
		//	НаборТаблиц 				= Новый Структура("бестАвансы,бестАвансыИспользованные,бестВзаиморасчётыПоУслугамЮрЛица"); 			
		//	 									
		//	Если ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.бестПлатежноеПоручениеВходящееЮрЛица") Тогда				
		//		НаборыЗаписей.Вставить("бестОплатаУслуг",		 	Неопределено);
		//		НаборыЗаписей.Вставить("бестАвансыПоступившие",	Неопределено);				
		//		НаборТаблиц.Вставить("бестОплатаУслуг",				Неопределено);
		//		НаборТаблиц.Вставить("бестАвансыПоступившие",		Неопределено);
		//	КонецЕсли;  	
		//	ЗаполнитьЗначенияСвойств(НаборыЗаписей,ДанныеДокумента.НаборыЗаписей);
		//	ЗаполнитьЗначенияСвойств(НаборТаблиц,ДанныеДокумента.НаборТаблиц);
		//	
		//	НаборыОтложеннаяЗапись		= Новый Структура("НаборыЗаписей, НаборТаблиц", НаборыЗаписей, НаборТаблиц);
		//				
		//	Если МассивДокументовНачисления.получить(текДокРегистратор) = Неопределено тогда				
		//		МассивДокументовНачисления.вставить(текДокРегистратор,НаборыОтложеннаяЗапись);
		//	иначе
		//		МассивДокументовНачисления[текДокРегистратор] = НаборыОтложеннаяЗапись;
		//	КонецЕсли;
		//	ПараметрыПроведения.вставить("ЕстьДокументыНачисления",Истина); 
		//	Продолжить;
		//иначе
			НаборыЗаписей 				= ДанныеДокумента.НаборыЗаписей;
			НаборТаблиц 				= ДанныеДокумента.НаборТаблиц;
			для Каждого  СтрокаНабора из НаборыЗаписей цикл
				СтрокаНабора.Значение.загрузить(НаборТаблиц[СтрокаНабора.ключ]);
			КонецЦикла;			 			
		//КонецЕсли;   	
		
		Попытка
			для Каждого СтрокаНаборов из НаборыЗаписей цикл
				СтрокаНаборов.Значение.записать();
			КонецЦикла;		
		Исключение                      
			Представление 				= "Не восстановлена последоватеность по договору: " + Документ.Договор;
			Представление  				= Представление +Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Представление);
			Возврат Истина;
		КонецПопытки;
	КонецЦикла; 
	
	Возврат Ложь;
КонецФункции

Процедура УвеличитьЗадолженность(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений)
	
	//Если ДанныеДокумента.ЭтоКорректировкаОплаты Тогда
	//	СторнироватьАвансыИОплату(ПараметрыОперации, ДанныеДокумента,ДанныеНачислений);
	//ИначеЕсли ПараметрыОперации.СуммаАванса > 0 тогда
	Если ПараметрыОперации.СуммаАванса > 0 тогда
		УменьшитьАванс(ПараметрыОперации, ДанныеДокумента,ДанныеНачислений);
	КонецЕсли;
	
	Район  												= ПараметрыОперации.Район;
	Договор  											= ДанныеДокумента.Договор;	
	ДанныеЗадолженности 								= ПараметрыОперации.ДанныеЗадолженности;
	ТаблицаВзаиморасчетыПоМесяцам 						= ДанныеДокумента.НаборТаблиц.бестВзаиморасчётыПоУслугамЮрЛица;
		
	ТаблицаЗадолженности  								= ДанныеЗадолженности.Расшифровка;
	РасшифровкаНачислений 								= ДанныеНачислений.Расшифровка;
	
	РасшифровкаНачислений.Сортировать("СуммаНачислений,ПериодРасчета");
	// сначала отрицательные строки записываем в аванс
	для Каждого СтрокаНачисления из РасшифровкаНачислений цикл
		
		Если СтрокаНачисления.СуммаНачислений = 0 тогда
			//ИЛИ (ДанныеДокумента.ЭтоКорректировкаОплаты И СтрокаНачисления.ПериодРасчета > ПараметрыОперации.ПериодНачисления) тогда
			Продолжить;
		ИначеЕсли  СтрокаНачисления.СуммаНачислений < 0 тогда
			ОтрицательнаяСуммаНачислений(ПараметрыОперации,ДанныеДокумента,-СтрокаНачисления.СуммаНачислений,СтрокаНачисления.Услуга,СтрокаНачисления.Поставщик,СтрокаНачисления.ПериодРасчета);
			СтрокаНачисления.СуммаНачислений = 0;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	// если отрицательные строки дали аванс, то закрываем им положительнве строки из этого же документа
	Если ПараметрыОперации.СуммаАванса > 0 тогда
		УменьшитьАванс(ПараметрыОперации, ДанныеДокумента,ДанныеНачислений);
	КонецЕсли;
	
	РасшифровкаНачислений 								= ДанныеНачислений.Расшифровка;
	БылиИзменения 										= Ложь;
	
	для Каждого СтрокаНачисления из РасшифровкаНачислений цикл
		
		Если СтрокаНачисления.СуммаНачислений = 0 тогда
			//ИЛИ (ДанныеДокумента.ЭтоКорректировкаОплаты И СтрокаНачисления.ПериодРасчета > ПараметрыОперации.ПериодНачисления) тогда
			Продолжить;
		ИначеЕсли  СтрокаНачисления.СуммаНачислений < 0 тогда
			ОтрицательнаяСуммаНачислений(ПараметрыОперации,ДанныеДокумента,-СтрокаНачисления.СуммаНачислений,СтрокаНачисления.Услуга,СтрокаНачисления.Поставщик,СтрокаНачисления.ПериодРасчета);
			Продолжить;
		КонецЕсли;
		
		БылиИзменения 									= Истина;
		
		СтрокаЗадолженности  							= ТаблицаЗадолженности.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗадолженности, СтрокаНачисления);
		СтрокаЗадолженности.СуммаЗадолженности			= СтрокаНачисления.СуммаНачислений;
				
		СтрокаВзаиморасчеты 							= ТаблицаВзаиморасчетыПоМесяцам.Добавить();
		СтрокаВзаиморасчеты.Организация					= ПараметрыОперации.Организация;
		СтрокаВзаиморасчеты.ПериодРегистрации			= ПараметрыОперации.ПериодНачисления;		
		СтрокаВзаиморасчеты.Район 						= ПараметрыОперации.Район;
		СтрокаВзаиморасчеты.ВидДвижения					= ВидДвиженияНакопления.Приход;
		СтрокаВзаиморасчеты.Активность					= Истина;
		СтрокаВзаиморасчеты.Период 						= ДанныеДокумента.Период;
		СтрокаВзаиморасчеты.Договор 					= ДанныеДокумента.Договор; 		
		СтрокаВзаиморасчеты.Услуга 						= СтрокаНачисления.Услуга;
		СтрокаВзаиморасчеты.Поставщик 					= СтрокаНачисления.Поставщик;
		СтрокаВзаиморасчеты.Сумма 						= СтрокаНачисления.СуммаНачислений;
		СтрокаВзаиморасчеты.СтавкаНДС 					= СтрокаНачисления.СтавкаНДС;
		СтрокаВзаиморасчеты.НДСВнутри 					= СтрокаНачисления.НДСВнутри;
		СтрокаВзаиморасчеты.ДокументРеализации 			= СтрокаНачисления.ДокументРеализации;
		СтрокаВзаиморасчеты.ПериодНачисления			= СтрокаНачисления.ПериодРасчета;		
	КонецЦикла; 
	
	Если БылиИзменения Тогда
		ТаблицаЗадолженности.Свернуть("ПериодРасчета,ПорядокПериодРасчета,ПорядокПогашенияУслуги,Поставщик,Услуга","СуммаЗадолженности");
		ТаблицаЗадолженности.Сортировать("ПорядокПериодРасчета,ПериодРасчета,ПорядокПогашенияУслуги,Услуга");
		ДанныеЗадолженности.СуммаЗадолженности 			= ТаблицаЗадолженности.Итог("СуммаЗадолженности");
	КонецЕсли;
	
КонецПроцедуры

Процедура УменьшитьАванс(ПараметрыОперации, ДанныеДокумента,ДанныеНачислений)	
			
	Если ПараметрыОперации.СпособРаспределенияОплаты = Перечисления.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения тогда
		УменьшитьАвансСогласноНастройкиРаспределения(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений);
	иначе
		УменьшитьАвансПропорциональноЗадолженности(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений);
	КонецЕсли;
	
КонецПроцедуры

Процедура УменьшитьАвансСогласноНастройкиРаспределения(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений)
	
	Договор  													= ДанныеДокумента.Договор;
	Район  														= ПараметрыОперации.Район;
	ТаблицаАвансы 												= ДанныеДокумента.НаборТаблиц.бестАвансы;
	ТаблицаАвансыИспользованные 								= ДанныеДокумента.НаборТаблиц.бестАвансыИспользованные;
		
	ОстатокАванса		 										= ПараметрыОперации.СуммаАванса;
	ОписаниеСтрокиначислений  									= Новый ФиксированнаяСтруктура("Период,Услуга,Организация, ПериодНачисления,Сумма");
	НастройкиПорядкаПогашения 									= ПараметрыОперации.НастройкиПорядкаПогашения;
	ВыборкаПорядок  											= НастройкиПорядкаПогашения.выбрать();
	Пока ВыборкаПорядок.следующий() и ОстатокАванса > 0 цикл			
		
		НачисленияПоУслуге  									= ДанныеНачислений.получить(ВыборкаПорядок.услуга);
		
		Если НачисленияПоУслуге <> Неопределено тогда 
			
			ПериодыНачислений  									= НачисленияПоУслуге.ПериодыНачислений;
			
			МассивУдаляемых 									= Новый Массив;
			
			для Каждого ПериодНачисления из ПериодыНачислений цикл 								
				
				Списываем  										= Мин(ОстатокАванса,ПериодНачисления.СуммаНачислений);
				Если  Списываем = 0 тогда
					Продолжить;
				КонецЕсли;			
				
				Если ПериодНачисления.СуммаНачислений < 0 тогда
					ПараметрыОперации.Сумма 					= -ПериодНачисления.СуммаНачислений;
					ОтрицательнаяСуммаНачислений(ПараметрыОперации,ДанныеДокумента,-ПериодНачисления.СуммаНачислений, ВыборкаПорядок.услуга,ПериодНачисления.Поставщик,ПериодНачисления.ПериодРасчета);
					ОстатокАванса 								= ОстатокАванса -ПериодНачисления.СуммаНачислений;
					МассивУдаляемых.Добавить(ПериодНачисления);
				иначе
					ВызватьИсключение "Зовите Кирилла";
					ДобавитьРасходАванса(ПараметрыОперации,ДанныеДокумента,Списываем, Неопределено);					
					ОстатокАванса  								= ОстатокАванса - Списываем;			
					ПериодНачисления.СуммаНачислений 			= ПериодНачисления.СуммаНачислений -Списываем;
				КонецЕсли;
				
				Если ПериодНачисления.СуммаНачислений = 0 тогда
					МассивУдаляемых.Добавить(ПериодНачисления);
				КонецЕсли;				
			КонецЦикла;
			
			// Удаляем нулевые строки.
			для Каждого УдаляемаяСтрока из МассивУдаляемых цикл
				ПериодыНачислений.удалить(УдаляемаяСтрока);
			КонецЦикла;
			// Если не осталось строк начисления удаляем все по ключу.
			Если НачисленияПоУслуге.ПериодыНачислений.количество() = 0 тогда
				ДанныеНачислений.Удалить(ВыборкаПорядок.услуга)
			КонецЕсли;  			
		КонецЕсли;
	КонецЦикла;
	ПараметрыОперации.СуммаАванса 								= ОстатокАванса;
	
КонецПроцедуры

Процедура УменьшитьАвансПропорциональноЗадолженности(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений)
	
	яДанныеНачислений	 									= ДанныеНачислений.Расшифровка;
	ОсталосьСписать											= ПараметрыОперации.СуммаАванса;
	ПериодыЗадолженности 									= яДанныеНачислений.Скопировать();
	// {Авансом закрываем только положительное начисление (в перерасчете могут быть строки как +, так и - суммы)
	Для Каждого ТекСтрока Из ПериодыЗадолженности Цикл
		ТекСтрока.СуммаНачислений = Макс(0, ТекСтрока.СуммаНачислений);	
	КонецЦикла;
	// }
	ПериодыЗадолженности.Свернуть("ПериодРасчета","СуммаНачислений");
	ПериодыЗадолженности.Сортировать("ПериодРасчета");	
	
	ТаблицаАвансыИспользованные								= ДанныеДокумента.НаборТаблиц.бестАвансыИспользованные;
	
	Для Сч = 0 По ПериодыЗадолженности.Количество() - 1 Цикл
		
		СтрокиВПериоде 										= яДанныеНачислений.НайтиСтроки(Новый Структура("ПериодРасчета", ПериодыЗадолженности[Сч].ПериодРасчета));
		
		Для ИндексСтроки = 0 По СтрокиВПериоде.ВГраница() Цикл			
			ОбщаяСуммаЗаПериод								= ПериодыЗадолженности[Сч].СуммаНачислений;
			
			Если ОбщаяСуммаЗаПериод = 0 Тогда 
				Продолжить;
			КонецЕсли;			
			
			Если СтрокиВПериоде[ИндексСтроки].СуммаНачислений < 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ДоляВПериоде	 								= СтрокиВПериоде[ИндексСтроки].СуммаНачислений / ОбщаяСуммаЗаПериод;
			СписываемПоДоле 								= ?(ИндексСтроки = СтрокиВПериоде.ВГраница(), ОсталосьСписать, ДоляВПериоде * ПараметрыОперации.СуммаАванса);
			Списываем 										= Окр(Мин(СписываемПоДоле, СтрокиВПериоде[ИндексСтроки].СуммаНачислений),2);
			ОсталосьСписать 								= ОсталосьСписать - Списываем;
			СтрокиВПериоде[ИндексСтроки].СуммаНачислений	= СтрокиВПериоде[ИндексСтроки].СуммаНачислений - Списываем;
			ПараметрыИспользованияАванса  					= Новый Структура("Услуга,Поставщик,ПериодРасчета", СтрокиВПериоде[ИндексСтроки].Услуга, СтрокиВПериоде[ИндексСтроки].Поставщик,СтрокиВПериоде[ИндексСтроки].ПериодРасчета);
			ДобавитьРасходАванса(ПараметрыОперации, ДанныеДокумента, Списываем,ПараметрыИспользованияАванса);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыОперации.СуммаАванса 							= ОсталосьСписать;
	
КонецПроцедуры

Процедура ОтрицательнаяСуммаНачислений(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга,Поставщик,ПериодРасчета)

	ПараметрыОперации.вставить("СнятьТекущие",Истина);
	ПараметрыОперации.вставить("ВозвратАванса",Новый Структура("Услуга,Поставщик,ПериодРасчета",Услуга,Поставщик,ПериодРасчета));
	
	// Списываем задолженность по услуге за текущий период.
	СписатьЗадолженность(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга,Поставщик,ПериодРасчета);
	// Списываем задолженность по услуге за предыдущие периоды.
	СписатьЗадолженность(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга,Поставщик,Неопределено);	
	// Списываем пропорционально и записываем в аванс если что то останется.
	СписатьЗадолженность(ПараметрыОперации,ДанныеДокумента,Сумма);
	
	Если Сумма > 0 Тогда
		УвеличитьАванс(ПараметрыОперации,ДанныеДокумента,Сумма);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписатьЗадолженность(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга = Неопределено, Поставщик = Неопределено, ПериодНачисления  = Неопределено, Реализация = Неопределено)
	
	Если Сумма <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Услуга = Неопределено И ЗначениеЗаполнено(Услуга) Тогда
		яУслуга 								= Услуга;
	КонецЕсли;
	
	Если НЕ ПериодНачисления = Неопределено И ЗначениеЗаполнено(ПериодНачисления) Тогда
		яПериодРасчета 							= ПериодНачисления;
	КонецЕсли;
	
	Если НЕ Поставщик = Неопределено И ЗначениеЗаполнено(Поставщик) Тогда
		яПоставщик 								= Поставщик;
	КонецЕсли;
	
	Если НЕ Реализация = Неопределено И ЗначениеЗаполнено(Реализация) Тогда
		яРеализация 							= Реализация;
	КонецЕсли;

	Если НЕ яУслуга = Неопределено ИЛИ НЕ яПериодРасчета = Неопределено ИЛИ НЕ яПоставщик = Неопределено ИЛИ НЕ яРеализация = Неопределено Тогда
		СписатьЗадолженностьПоУслуге(ПараметрыОперации,ДанныеДокумента,Сумма,яУслуга,яПоставщик,яПериодРасчета,яРеализация);	
	иначеЕсли ПараметрыОперации.СпособРаспределенияОплаты = Перечисления.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения тогда
		СписатьЗадолженностьСогласноНастройкиРаспределения(ПараметрыОперации,ДанныеДокумента,Сумма);
	иначе
		СписатьЗадолженностьПропорциональноЗадолженности(ПараметрыОперации, ДанныеДокумента, Сумма);
	КонецЕсли;
	
КонецПроцедуры 

Процедура СписатьЗадолженностьСогласноНастройкиРаспределения(ПараметрыОперации,ДанныеДокумента,НадоСписать)
	
	ТаблицаВзаиморасчетыПоМесяцам 						= ДанныеДокумента.НаборТаблиц.бестВзаиморасчетыПоМесяцам;
	
	Если ДанныеДокумента.ЭтоОплата тогда
		ТаблицаОплатаУслуг			 					= ДанныеДокумента.НаборТаблиц.бестОплатаУслуг;
	иначе
		ТаблицаАвансыИспользованные 					= ДанныеДокумента.НаборТаблиц.бестАвансыИспользованные
	КонецЕсли;
	
	ДанныеЗадолженности 								= ПараметрыОперации.ДанныеЗадолженности;
	Расшифровка 										= ДанныеЗадолженности.Расшифровка;
	
	МассивУдаляемых										= Новый Массив;
	
	для Каждого СтрокаЗадолженности из Расшифровка цикл
		
		Списываем 										= Мин(СтрокаЗадолженности.СуммаЗадолженности,НадоСписать);
		
		СтрокаЗадолженности.СуммаЗадолженности 			= СтрокаЗадолженности.СуммаЗадолженности - Списываем;
		
		Если СтрокаЗадолженности.СуммаЗадолженности = 0 тогда
			МассивУдаляемых.Добавить(СтрокаЗадолженности);
		КонецЕсли;
				
		СтрокаВзаиморасчеты 							= ТаблицаВзаиморасчетыПоМесяцам.Добавить();
		СтрокаВзаиморасчеты.Организация		 			= ПараметрыОперации.Организация;
		СтрокаВзаиморасчеты.Район 						= ПараметрыОперации.Район;
		СтрокаВзаиморасчеты.ПериодНачисления 			= СтрокаЗадолженности.ПериодРасчета;
		СтрокаВзаиморасчеты.ВидДвижения					= ВидДвиженияНакопления.Расход;
		СтрокаВзаиморасчеты.Активность					= Истина;
		СтрокаВзаиморасчеты.Период 						= ДанныеДокумента.Период;		
		СтрокаВзаиморасчеты.Договор 					= ДанныеДокумента.Договор;
		СтрокаВзаиморасчеты.Услуга 						= СтрокаЗадолженности.услуга;
		СтрокаВзаиморасчеты.Сумма 						= Списываем;
		СтрокаВзаиморасчеты.Поставщик					= СтрокаЗадолженности.Поставщик;
		СтрокаВзаиморасчеты.ПериодРегистрации			= ПараметрыОперации.ПериодНачисления;
		
		Если ДанныеДокумента.ЭтоОплата тогда 
			СтрокаОплатаУслуг 							= ТаблицаОплатаУслуг.добавить();
			СтрокаОплатаУслуг.Активность				= истина;
			СтрокаОплатаУслуг.Период 					= ДанныеДокумента.Период;
			СтрокаОплатаУслуг.Организация				= ПараметрыОперации.Организация;
			СтрокаОплатаУслуг.Район 					= ПараметрыОперации.Район;
			СтрокаОплатаУслуг.Договор 					= ДанныеДокумента.Договор;
			СтрокаОплатаУслуг.Услуга 					= СтрокаЗадолженности.Услуга;
			СтрокаОплатаУслуг.Поставщик					= СтрокаЗадолженности.Поставщик;
			СтрокаОплатаУслуг.Сумма 					= Списываем;
			СтрокаОплатаУслуг.ПериодНачисления			= СтрокаЗадолженности.ПериодРасчета;
			СтрокаОплатаУслуг.ПериодРасчета				= ПараметрыОперации.ПериодНачисления;
			СтрокаОплатаУслуг.ИсточникПоступления		= ДанныеДокумента.ИсточникПоступления;
		иначе
			ТаблицаАвансыИспользованные					= ДанныеДокумента.НаборТаблиц.бестАвансыИспользованные;
			ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.добавить();
			ЗаписьАвансыИспользованные.Активность  		= истина;
			ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.Период;
			ЗаписьАвансыИспользованные.Организация		= ПараметрыОперации.Организация;
			ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;
			ЗаписьАвансыИспользованные.Договор  		= ДанныеДокумента.Договор;
			ЗаписьАвансыИспользованные.Сумма 			= Списываем;
			ЗаписьАвансыИспользованные.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
			ЗаписьАвансыИспользованные.Поставщик		= СтрокаЗадолженности.Поставщик;
			ЗаписьАвансыИспользованные.Услуга			= СтрокаЗадолженности.услуга;
			ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ПериодНачисления;
			// Возвращаем использованный аванс на услугу с которой снимаем начисления.					
			ТаблицаАвансыИспользованные					= ДанныеДокумента.НаборТаблиц.энргАвансыИспользованные;
			ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.добавить();
			ЗаписьАвансыИспользованные.Активность  		= истина;
			ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.Период;
			ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;
			ЗаписьАвансыИспользованные.Договор  		= ДанныеДокумента.Договор;
			ЗаписьАвансыИспользованные.Сумма 			= -Списываем;
			ЗаписьАвансыИспользованные.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
			ЗаписьАвансыИспользованные.Поставщик		= ПараметрыОперации.ВозвратАванса.Поставщик;
			ЗаписьАвансыИспользованные.Услуга			= ПараметрыОперации.ВозвратАванса.услуга;
			ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ПериодНачисления;					
		КонецЕсли;
												
		НадоСписать										= НадоСписать - Списываем;
	КонецЦикла; 
	
	для Каждого УдаляемаяСтрока из МассивУдаляемых цикл
		Расшифровка.удалить(УдаляемаяСтрока);
	КонецЦикла;
		
	Если НадоСписать > 0 тогда
		УвеличитьАванс(ПараметрыОперации,ДанныеДокумента,НадоСписать);
	КонецЕсли;

КонецПроцедуры

Процедура СписатьЗадолженностьПропорциональноЗадолженности(ПараметрыОперации, ДанныеДокумента, НадоСписать)
	
	ДанныеЗадолженности 									= ПараметрыОперации.ДанныеЗадолженности.Расшифровка;
	
	ПериодыЗадолженности 									= ДанныеЗадолженности.Скопировать();
	ПериодыЗадолженности.Свернуть("ПериодРасчета","СуммаЗадолженности");
	ПериодыЗадолженности.Сортировать("ПериодРасчета"); 	
	
	ТаблицаВзаиморасчетыПоМесяцам 							= ДанныеДокумента.НаборТаблиц.бестВзаиморасчётыПоУслугамЮрЛица;
		
	СтрокиУдалить 											= Новый Массив;
	
	Для Сч = 0 По ПериодыЗадолженности.Количество() - 1 Цикл
		СтрокиВПериоде 										= ДанныеЗадолженности.НайтиСтроки(Новый Структура("ПериодРасчета", ПериодыЗадолженности[Сч].ПериодРасчета));
		ОстатокСуммы 										= НадоСписать;
		
		Для ИндексСтроки = 0 По СтрокиВПериоде.ВГраница() Цикл			
			ОбщаяСуммаЗаПериод								= ПериодыЗадолженности[Сч].СуммаЗадолженности;
			Если ОбщаяСуммаЗаПериод = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДоляВПериоде	 								= СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности / ОбщаяСуммаЗаПериод;
			СписываемПоДоле 								= ?(ИндексСтроки = СтрокиВПериоде.ВГраница(), НадоСписать, ДоляВПериоде * ОстатокСуммы);
			Списываем 										= Окр(Мин(СписываемПоДоле, СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности),2);
			НадоСписать 									= НадоСписать - Списываем;
						
			СтрокаВзаиморасчеты 							= ТаблицаВзаиморасчетыПоМесяцам.Добавить();
			СтрокаВзаиморасчеты.Организация		 			= ПараметрыОперации.Организация;
			СтрокаВзаиморасчеты.ПериодНачисления 			= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;
			СтрокаВзаиморасчеты.Район 						= ПараметрыОперации.Район;
			СтрокаВзаиморасчеты.ПериодРегистрации			= ПараметрыОперации.ПериодНачисления;
			СтрокаВзаиморасчеты.ВидДвижения					= ВидДвиженияНакопления.Расход;
			СтрокаВзаиморасчеты.Активность					= Истина;
			СтрокаВзаиморасчеты.Период 						= ДанныеДокумента.Период;			
			СтрокаВзаиморасчеты.Договор 					= ДанныеДокумента.Договор;
			СтрокаВзаиморасчеты.Услуга 						= СтрокиВПериоде[ИндексСтроки].Услуга;
			СтрокаВзаиморасчеты.Сумма 						= Списываем;
			СтрокаВзаиморасчеты.Поставщик					= СтрокиВПериоде[ИндексСтроки].Поставщик;		
			
			СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности = СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности - Списываем;
			Если СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности = 0 Тогда
				СтрокиУдалить.Добавить(СтрокиВПериоде[ИндексСтроки]);
			КонецЕсли;
						
			Если ДанныеДокумента.ЭтоОплата тогда          
				ТаблицаОплатаУслуг 							= ДанныеДокумента.НаборТаблиц.бестОплатаУслуг;
				
				СтрокаОплатаУслуг 							= ТаблицаОплатаУслуг.добавить();
				СтрокаОплатаУслуг.Активность				= истина;  				
				СтрокаОплатаУслуг.Организация				= ПараметрыОперации.Организация;
				СтрокаОплатаУслуг.Район 					= ПараметрыОперации.Район;
				СтрокаОплатаУслуг.ПериодРасчета				= ПараметрыОперации.ПериодНачисления;
				СтрокаОплатаУслуг.Период 					= ДанныеДокумента.Период;
				СтрокаОплатаУслуг.Договор 					= ДанныеДокумента.Договор;
				СтрокаОплатаУслуг.ИсточникПоступления		= ДанныеДокумента.ИсточникПоступления;
				СтрокаОплатаУслуг.Услуга 					= СтрокиВПериоде[ИндексСтроки].услуга;
				СтрокаОплатаУслуг.Поставщик					= СтрокиВПериоде[ИндексСтроки].Поставщик;
				СтрокаОплатаУслуг.Сумма 					= Списываем;
				СтрокаОплатаУслуг.ПериодНачисления			= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;				
			иначе
				ТаблицаАвансыИспользованные 				= ДанныеДокумента.НаборТаблиц.бестАвансыИспользованные; 
				
				ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.Добавить();
				ЗаписьАвансыИспользованные.Активность  		= истина;
				ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ПериодНачисления;
				ЗаписьАвансыИспользованные.Организация		= ПараметрыОперации.Организация;
				ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;
				ЗаписьАвансыИспользованные.Договор  		= ДанныеДокумента.Договор;
				ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.Период;
				ЗаписьАвансыИспользованные.Сумма 			= Списываем;
				ЗаписьАвансыИспользованные.ПериодНачисления	= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;
				ЗаписьАвансыИспользованные.Поставщик		= СтрокиВПериоде[ИндексСтроки].Поставщик;
				ЗаписьАвансыИспользованные.Услуга			= СтрокиВПериоде[ИндексСтроки].услуга;				
				
				// Возвращаем использованный аванс на услугу с которой снимаем начисления.					
				ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.Добавить();
				ЗаписьАвансыИспользованные.Активность  		= истина;
				ЗаписьАвансыИспользованные.Организация		= ПараметрыОперации.Организация;
				ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;				
				ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.Период;
				ЗаписьАвансыИспользованные.Договор  		= ДанныеДокумента.Договор;
				ЗаписьАвансыИспользованные.Сумма 			= -Списываем;
				ЗаписьАвансыИспользованные.ПериодНачисления	= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;
				ЗаписьАвансыИспользованные.Поставщик		= ПараметрыОперации.ВозвратАванса.Поставщик;
				ЗаписьАвансыИспользованные.Услуга			= ПараметрыОперации.ВозвратАванса.услуга;
				ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ПериодНачисления;					
			КонецЕсли;
			
			Если НадоСписать = 0 тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НадоСписать = 0 тогда
			Прервать;
		КонецЕсли; 		
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		ДанныеЗадолженности.Удалить(СтрокаУдалить);
	КонецЦикла;
		
	Если НадоСписать > 0 Тогда		
		ПараметрыОперации.СуммаАванса  					= ПараметрыОперации.СуммаАванса + НадоСписать;
		УвеличитьАванс(ПараметрыОперации, ДанныеДокумента, НадоСписать);
		НадоСписать	 									= 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписатьЗадолженностьПоУслуге(ПараметрыОперации,ДанныеДокумента,НадоСписать,Услуга,Поставщик,ПериодРасчета,Реализация)
	перем яПериодРасчета, яУслуга, яПоставщик, яРеализация;
	ДанныеЗадолженности 						= ПараметрыОперации.ДанныеЗадолженности.Расшифровка;		
	
	ТаблицаВзаиморасчетыПоМесяцам 				= ДанныеДокумента.НаборТаблиц.бестВзаиморасчётыПоУслугамЮрЛица;
	ЭтоОплата 									= Истина;
	Если ПараметрыОперации.Свойство("СнятьТекущие") И ПараметрыОперации.СнятьТекущие Тогда
		ЭтоОплата 								= Ложь;
	КонецЕсли;
	
	ТаблицаОплатаУслуг 							= Неопределено;
	Если ЭтоОплата Тогда
		ТаблицаОплатаУслуг 						= ДанныеДокумента.НаборТаблиц.бестОплатаУслуг;
	КонецЕсли;
	
	Если НЕ ПериодРасчета = Неопределено И НЕ Услуга = Неопределено И НЕ Поставщик = Неопределено И Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("Услуга,ПериодРасчета,Поставщик");
		СтруктураПоиска.Услуга 					= Услуга;
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		СтруктураПоиска.Поставщик 				= Поставщик;
		
	ИначеЕсли НЕ ПериодРасчета = Неопределено И НЕ Услуга = Неопределено И Поставщик = Неопределено И Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("ПериодРасчета,Услуга");
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		СтруктураПоиска.Услуга 					= Услуга;
		
	ИначеЕсли НЕ ПериодРасчета = Неопределено И Услуга = Неопределено И НЕ Поставщик = Неопределено И Реализация = Неопределено Тогда 
		
		СтруктураПоиска  						= Новый Структура("ПериодРасчета,Поставщик");
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		СтруктураПоиска.Поставщик 				= Поставщик;
		
	ИначеЕсли ПериодРасчета = Неопределено И НЕ Услуга = Неопределено И НЕ Поставщик = Неопределено И Реализация = Неопределено Тогда 
		
		СтруктураПоиска  						= Новый Структура("Услуга,Поставщик");
		СтруктураПоиска.Услуга 					= Услуга;
		СтруктураПоиска.Поставщик 				= Поставщик;
		
	ИначеЕсли НЕ ПериодРасчета = Неопределено И Услуга = Неопределено И Поставщик = Неопределено И Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("ПериодРасчета");
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		
	ИначеЕсли ПериодРасчета = Неопределено И Услуга = Неопределено И НЕ Поставщик = Неопределено И Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("Поставщик");
		СтруктураПоиска.Поставщик 				= Поставщик;
		
	ИначеЕсли ПериодРасчета = Неопределено И НЕ Услуга = Неопределено И Поставщик = Неопределено И Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("Услуга");
		СтруктураПоиска.Услуга 					= Услуга;	
		
		/////////////
	ИначеЕсли НЕ ПериодРасчета = Неопределено И НЕ Услуга = Неопределено И НЕ Поставщик = Неопределено И НЕ Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("Услуга,ПериодРасчета,Поставщик,Реализация");
		СтруктураПоиска.Услуга 					= Услуга;
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		СтруктураПоиска.Поставщик 				= Поставщик;
		СтруктураПоиска.Реализация 				= Реализация;
		
	ИначеЕсли НЕ ПериодРасчета = Неопределено И НЕ Услуга = Неопределено И Поставщик = Неопределено И НЕ Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("ПериодРасчета,Услуга,Реализация");
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		СтруктураПоиска.Услуга 					= Услуга;
		СтруктураПоиска.Реализация 				= Реализация;
		
	ИначеЕсли НЕ ПериодРасчета = Неопределено И Услуга = Неопределено И НЕ Поставщик = Неопределено И НЕ Реализация = Неопределено Тогда 
		
		СтруктураПоиска  						= Новый Структура("ПериодРасчета,Поставщик,Реализация");
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		СтруктураПоиска.Поставщик 				= Поставщик;
		СтруктураПоиска.Реализация 				= Реализация;
		
	ИначеЕсли ПериодРасчета = Неопределено И НЕ Услуга = Неопределено И НЕ Поставщик = Неопределено И НЕ Реализация = Неопределено Тогда 
		
		СтруктураПоиска  						= Новый Структура("Услуга,Поставщик,Реализация");
		СтруктураПоиска.Услуга 					= Услуга;
		СтруктураПоиска.Поставщик 				= Поставщик;
		СтруктураПоиска.Реализация 				= Реализация;
		
	ИначеЕсли НЕ ПериодРасчета = Неопределено И Услуга = Неопределено И Поставщик = Неопределено И НЕ Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("ПериодРасчета,Реализация");
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		СтруктураПоиска.Реализация 				= Реализация;
		
	ИначеЕсли ПериодРасчета = Неопределено И Услуга = Неопределено И НЕ Поставщик = Неопределено И НЕ Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("Поставщик,Реализация");
		СтруктураПоиска.Поставщик 				= Поставщик;
		СтруктураПоиска.Реализация 				= Реализация;
		
	ИначеЕсли ПериодРасчета = Неопределено И НЕ Услуга = Неопределено И Поставщик = Неопределено И НЕ Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("Услуга,Реализация");
		СтруктураПоиска.Услуга 					= Услуга;
		СтруктураПоиска.Реализация 				= Реализация;
		
	ИначеЕсли ПериодРасчета = Неопределено И Услуга = Неопределено И  Поставщик = Неопределено И НЕ Реализация = Неопределено Тогда
		
		СтруктураПоиска  						= Новый Структура("Реализация");
		СтруктураПоиска.Реализация 				= Реализация;

		////////////
	Иначе
		ВызватьИсключение "Что-то пошло не так";		
	КонецЕсли;
	
	СтрокиЗадолженности 						= ДанныеЗадолженности.НайтиСтроки(СтруктураПоиска);
	ОбщаяСуммаЗаПериод = 0;
	
	Для каждого стр из СтрокиЗадолженности Цикл
		ОбщаяСуммаЗаПериод = ОбщаяСуммаЗаПериод + стр.СуммаЗадолженности;
	КонецЦикла;	
	
	МассивУдаляемых 							= Новый Массив;
	
	НадоСписатьВсего 							= НадоСписать;
	для Каждого СтрокаЗадолженности из СтрокиЗадолженности цикл
		
		ДоляВПериоде	 						= СтрокаЗадолженности.СуммаЗадолженности / ОбщаяСуммаЗаПериод;
		СписываемПоДоле 						= ДоляВПериоде * НадоСписатьВсего;
		
		Списываем 								= Окр(Мин(СписываемПоДоле,СтрокаЗадолженности.СуммаЗадолженности),2);
		
		// Уменьшаем задолженность по месяцам.
		СтрокаВзаиморасчеты 					= ТаблицаВзаиморасчетыПоМесяцам.Добавить();		
		СтрокаВзаиморасчеты.Активность	 		= Истина;
		СтрокаВзаиморасчеты.ВидДвижения 		= ВидДвиженияНакопления.Расход;
		СтрокаВзаиморасчеты.Организация 		= ПараметрыОперации.Организация;
		СтрокаВзаиморасчеты.Район		 		= ПараметрыОперации.Район;
		СтрокаВзаиморасчеты.ПериодРегистрации	= ПараметрыОперации.ПериодНачисления;
		СтрокаВзаиморасчеты.Договор				= ДанныеДокумента.Договор;
		СтрокаВзаиморасчеты.Период	 			= ДанныеДокумента.период;
		СтрокаВзаиморасчеты.Услуга				= СтрокаЗадолженности.Услуга;
		СтрокаВзаиморасчеты.Поставщик			= СтрокаЗадолженности.Поставщик;
		СтрокаВзаиморасчеты.ПериодНачисления	= СтрокаЗадолженности.ПериодРасчета;
		СтрокаВзаиморасчеты.СтавкаНДС 			= СтрокаЗадолженности.СтавкаНДС;
		СтрокаВзаиморасчеты.НДСВнутри 			= СтрокаЗадолженности.НДСВнутри;
		СтрокаВзаиморасчеты.Сумма				= Списываем;
		СтрокаВзаиморасчеты.ДокументРеализации  = СтрокаЗадолженности.Реализация;
		
		Если ЭтоОплата Тогда
			СтрокаОплатаУслуг 						= ТаблицаОплатаУслуг.Добавить();
			СтрокаОплатаУслуг.Активность	 		= Истина;
			СтрокаОплатаУслуг.Организация 			= ПараметрыОперации.Организация;
			СтрокаОплатаУслуг.Район		 			= ПараметрыОперации.Район;
			СтрокаОплатаУслуг.Договор				= ДанныеДокумента.Договор;
			СтрокаОплатаУслуг.Период	 			= ДанныеДокумента.период;
			СтрокаОплатаУслуг.ИсточникПоступления	= ДанныеДокумента.ИсточникПоступления;
			СтрокаОплатаУслуг.Услуга				= СтрокаЗадолженности.Услуга;
			СтрокаОплатаУслуг.Поставщик				= СтрокаЗадолженности.Поставщик;
			СтрокаОплатаУслуг.ПериодНачисления		= ПараметрыОперации.ПериодНачисления;
			СтрокаОплатаУслуг.ПериодРасчета			= СтрокаЗадолженности.ПериодРасчета;
			СтрокаОплатаУслуг.Сумма					= Списываем;
		КонецЕсли;		
		
		СтрокаЗадолженности.СуммаЗадолженности 	= СтрокаЗадолженности.СуммаЗадолженности - Списываем; 		
		НадоСписать 							= НадоСписать - Списываем;
		
		Если СтрокаЗадолженности.СуммаЗадолженности = 0 тогда
			МассивУдаляемых.Добавить(СтрокаЗадолженности);
		КонецЕсли;  		
		
		Если НадоСписать = 0 Тогда
			Прервать;
		КонецЕсли; 		
		
	КонецЦикла;
	
	для Каждого УдаляемаяСтрока из МассивУдаляемых цикл
		ДанныеЗадолженности.Удалить(УдаляемаяСтрока);				
	КонецЦикла;
		
КонецПроцедуры

Процедура УвеличитьАванс(ПараметрыОперации,ДанныеДокумента,Сумма)
		
	ТаблицаАвансы 									= ДанныеДокумента.НаборТаблиц.бестАвансы;
	
	ЗаписьАвансы  									= ТаблицаАвансы.добавить();
	ЗаписьАвансы.ВидДвижения 						= ВидДвиженияНакопления.Приход;
	ЗаписьАвансы.Активность  						= истина;
	ЗаписьАвансы.Период  							= ДанныеДокумента.Период;	
	ЗаписьАвансы.Договор  							= ДанныеДокумента.Договор;
	ЗаписьАвансы.ДокументОплаты						= ДанныеДокумента.Регистратор;
	ЗаписьАвансы.Сумма 								= Сумма;
	ЗаписьАвансы.Район  							= ПараметрыОперации.Район;
	ЗаписьАвансы.ПериодНачисления					= ПараметрыОперации.ПериодНачисления;
	ЗаписьАвансы.Организация						= ПараметрыОперации.Организация;
	
	ОписаниеАванса 									= ОписаниеАванса();
	ОписаниеАванса.СуммаАванса 						= Сумма;
	ОписаниеАванса.ДокументОплаты 					= ДанныеДокумента.Регистратор;
	мАвансы 										= ПараметрыОперации.Авансы;
	мАвансы.Добавить(ОписаниеАванса);
	
	Если ПараметрыОперации.свойство("СнятьТекущие") тогда
		ТаблицаАвансыИспользованные					= ДанныеДокумента.НаборТаблиц.бестАвансыИспользованные;
		ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.добавить();
		ЗаписьАвансыИспользованные.Активность  		= истина;
		ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.период;		
		ЗаписьАвансыИспользованные.Договор  		= ДанныеДокумента.Договор;
		ЗаписьАвансыИспользованные.Сумма 			= -Сумма;
		ЗаписьАвансыИспользованные.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
		ЗаписьАвансыИспользованные.Организация		= ПараметрыОперации.Организация;
		ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;
		ЗаписьАвансыИспользованные.Поставщик		= ПараметрыОперации.ВозвратАванса.Поставщик;
		ЗаписьАвансыИспользованные.Услуга			= ПараметрыОперации.ВозвратАванса.Услуга;
		ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ВозвратАванса.ПериодРасчета;
	Иначе			
		ТаблицаАвансыПоступившие  					= ДанныеДокумента.НаборТаблиц.бестАвансыПоступившие;
		ЗаписьАвансыПоступившие						= ТаблицаАвансыПоступившие.добавить();
		ЗаписьАвансыПоступившие.Активность  		= истина;
		ЗаписьАвансыПоступившие.Период  			= ДанныеДокумента.период;		
		ЗаписьАвансыПоступившие.Договор  			= ДанныеДокумента.Договор;
		ЗаписьАвансыПоступившие.ИсточникПоступления	= ДанныеДокумента.ИсточникПоступления;
		ЗаписьАвансыПоступившие.Сумма 				= Сумма;
		ЗаписьАвансыПоступившие.Район  				= ПараметрыОперации.Район;
		ЗаписьАвансыПоступившие.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
		ЗаписьАвансыПоступившие.Организация			= ПараметрыОперации.Организация;		
	КонецЕсли;  	 
	
КонецПроцедуры

Функция СтруктураТаблицНаборов(МассивДокументовНачисления, ОчищатьСтроки, ДанныеДокумента, ПараметрыПроведения, ДокРегистратор)
	
	НаборТаблиц  					= Новый Структура;
	НаборыЗаписей 					= Новый Структура;		
	//Если (ТипЗнч(ДокРегистратор) = Тип("ДокументСсылка.бестРеализацияЮрЛица")
	//	или ТипЗнч(ДокРегистратор) = Тип("ДокументСсылка.бестПлатежноеПоручениеВходящееЮрЛица"))
	//	и  МассивДокументовНачисления.Получить(ДокРегистратор) <> Неопределено тогда
	//	
	//	НаборыЗаписей  				= МассивДокументовНачисления[ДокРегистратор].НаборыЗаписей;
	//	НаборТаблиц 				= МассивДокументовНачисления[ДокРегистратор].НаборТаблиц;
	//иначе 			
		МассивИмен  					= ПараметрыПроведения.НаборыПоТипам.получить(ТипЗнч(ДокРегистратор));
		для Каждого ИмяРегистра из МассивИмен цикл
			Набор  						= РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			Набор.Отбор.регистратор.установить(ДокРегистратор);
			Набор.Прочитать();
			
			Таблица 					= Набор.выгрузить();
			Набор.Очистить();
			НаборыЗаписей.Вставить(ИмяРегистра,Набор);
			НаборТаблиц.Вставить(ИмяРегистра,Таблица);
		КонецЦикла;							
	//КонецЕсли;
	
	Если ОчищатьСтроки  Тогда
		для Каждого СтрокаТаблиц из НаборТаблиц цикл
			Строки 						= СтрокаТаблиц.Значение.НайтиСтроки(Новый Структура("Договор",ДанныеДокумента.Договор));
			для Каждого Строка из Строки цикл
				СтрокаТаблиц.Значение.Удалить(Строка);
			КонецЦикла;  			
		КонецЦикла; 		
	КонецЕсли;

	Возврат Новый Структура("НаборТаблиц,НаборыЗаписей",НаборТаблиц,НаборыЗаписей);
	
КонецФункции

Функция ПараметрыВзаиморасчетов()
	
	МассивКлючей  = Новый Массив;
	МассивКлючей.Добавить("СнятьТекущие");
	МассивКлючей.Добавить("ВозвратАванса");
	МассивКлючей.Добавить("ДанныеНачисления");
	МассивКлючей.Добавить("ИсточникПоступления");
	Возврат МассивКлючей;	
КонецФункции

Процедура ДобавитьРасходАванса(ПараметрыОперации, ДанныеДокумента, Сумма, ПараметрыИспользованияАванса)
	
	ТаблицаАвансы 										= ДанныеДокумента.НаборТаблиц.бестАвансы;
	ТаблицаАвансыИспользованные 						= ДанныеДокумента.НаборТаблиц.бестАвансыИспользованные;
	
	Авансы 												= ПараметрыОперации.Авансы;
	ОсталосьСписать 									= Сумма;
	УдаляемыеСтроки 									= Новый Массив;
	
	Для Сч = 0 По Авансы.ВГраница() Цикл	
		
		Списываем 										= Мин(Авансы[Сч].СуммаАванса,ОсталосьСписать);
		ОсталосьСписать 								= ОсталосьСписать - Списываем;
		Авансы[Сч].СуммаАванса 							= Авансы[Сч].СуммаАванса - Списываем;
		
		Если Авансы[Сч].СуммаАванса = 0 Тогда
			УдаляемыеСтроки.Добавить(Сч);
		КонецЕсли;
		
		ЗаписьАвансы  									= ТаблицаАвансы.добавить();
		ЗаписьАвансы.ВидДвижения 						= ВидДвиженияНакопления.Расход;
		ЗаписьАвансы.Активность  						= истина;
		ЗаписьАвансы.Период  							= ДанныеДокумента.Период;			
		ЗаписьАвансы.Договор  							= ДанныеДокумента.Договор;
		ЗаписьАвансы.Сумма 								= Списываем;
		ЗаписьАвансы.ПериодНачисления 					= ПараметрыОперации.ПериодНачисления;
		ЗаписьАвансы.Организация 						= ПараметрыОперации.Организация;
		ЗаписьАвансы.Район  							= ПараметрыОперации.Район;
		ЗаписьАвансы.ДокументОплаты 					= Авансы[Сч].ДокументОплаты;
		
		Если НЕ ПараметрыИспользованияАванса = Неопределено Тогда
			ЗаписьАвансыИспользованые					= ТаблицаАвансыИспользованные.добавить();
			ЗаписьАвансыИспользованые.Активность		= Истина;
			ЗаписьАвансыИспользованые.Период  			= ДанныеДокумента.Период;		
			ЗаписьАвансыИспользованые.Договор			= ДанныеДокумента.Договор;
			ЗаписьАвансыИспользованые.Услуга			= ПараметрыИспользованияАванса.Услуга;
			ЗаписьАвансыИспользованые.Поставщик			= ПараметрыИспользованияАванса.Поставщик;
			ЗаписьАвансыИспользованые.ПериодРасчета		= ПараметрыИспользованияАванса.ПериодРасчета;
			ЗаписьАвансыИспользованые.Сумма 			= Списываем;		
			ЗаписьАвансыИспользованые.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
			ЗаписьАвансыИспользованые.Организация		= ПараметрыОперации.Организация;
			ЗаписьАвансыИспользованые.Район  			= ПараметрыОперации.Район;
			ЗаписьАвансыИспользованые.ДокументОплаты	= Авансы[Сч].ДокументОплаты;
		КонецЕсли;
	
		Если ОсталосьСписать = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Смещение 											= 0;
	
	Для Индекс = 0 По УдаляемыеСтроки.ВГраница() Цикл
		Авансы.Удалить(УдаляемыеСтроки[Индекс - Смещение]);
		Смещение 										= Смещение + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти