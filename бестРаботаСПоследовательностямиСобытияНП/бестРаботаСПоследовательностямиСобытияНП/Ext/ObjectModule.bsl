#Область ОбработчикиСобытий

Процедура ЗарегестрироватьВПоследовательности(Источник, Отказ,ИмяПоследовательности)
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.свойство("ВосстановлениеПоследовательности") тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриЧтении  	= Новый Структура;
	ПараметрыПриЧтении.вставить("ДокРегистратор",Источник.ссылка);
	
	ПометкаУдаления 		= Источник.ПометкаУдаления;
		
	НаборЗаписей = РегистрыСведений[ИмяПоследовательности].СоздатьНаборЗаписей();
	для Каждого ЭлементОтбора из ПараметрыПриЧтении цикл
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") тогда
			Продолжить;
		КонецЕсли; 			
		НаборЗаписей.Отбор[ЭлементОтбора.ключ].установить(ЭлементОтбора.Значение);
	КонецЦикла;		
	НаборЗаписей.Прочитать();
	
	ДокументПроведен = Источник.Проведен;
	
	// очищаем данные данные резултата проведения
	Если ИмяПоследовательности = "бестСтабильныеПериодыПоследовательностьНП" тогда
		РезультатПроведения  = РегистрыСведений.бестСтабильныеПериодыНП.СоздатьНаборЗаписей();
		РезультатПроведения.Отбор.ДокРегистратор.установить(Источник.ссылка);
		РезультатПроведения.Записать();	
		
		НаборНомераСтрок 		= РегистрыСведений.бестНомераСтрокСтабильногоПериодаНП.СоздатьНаборЗаписей();
		НаборНомераСтрок.Отбор.ДокРегистратор.установить(Источник.ссылка);
		НаборНомераСтрок.Записать();
		
		НаборШкалы 		= РегистрыСведений.бестСтабильныеПериодыШкалыНП.СоздатьНаборЗаписей();
		НаборШкалы.Отбор.ДокРегистратор.установить(Источник.ссылка);
		НаборШкалы.Записать();
		
		НаборПриборыУзловУчета 		= РегистрыСведений.бестСтабильныеПериодыПриборыУзловУчета.СоздатьНаборЗаписей();
		НаборПриборыУзловУчета.Отбор.ДокРегистратор.установить(Источник.ссылка);
		НаборПриборыУзловУчета.Записать();
		
		
	ИначеЕсли ИмяПоследовательности = "бестПоказанияПУНППоследовательность" тогда
		РезультатПроведения  = РегистрыСведений.бестПредоставленныеПоказанияНП.СоздатьНаборЗаписей();
		РезультатПроведения.Отбор.ДокРегистратор.установить(Источник.ссылка);
		РезультатПроведения.Записать();	
		
		РезультатПроведения  	= РегистрыСведений.бестРасчетСреднегоОбъемаНП.СоздатьНаборЗаписей();
		РезультатПроведения.Отбор.ДокРегистратор.установить(Источник.ссылка);
		РезультатПроведения.Записать();
		
	КонецЕсли;
	
	
	Если НЕ ДокументПроведен И НаборЗаписей.Количество() = 0 Тогда
		// Документ непроведенный и прошлых записей в последовательности нет, поэтому менять нечего.
		Возврат;
	КонецЕсли;
	
	// Записи последовательности по прошлым организациям отметим, как требующие исключения.	
	ВГраница = НаборЗаписей.Количество() - 1;
	Для Сч = 0 По ВГраница Цикл
		
		Движение = НаборЗаписей[ВГраница - Сч];
		
		Если ПометкаУдаления Тогда
			Движение.СостояниеПроведения = Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
		КонецЕсли;
	
	КонецЦикла;
	
	
	
	Если  ДокументПроведен ИЛИ (Источник.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить И Не Источник.ПометкаУдаления) тогда
		ПредыдущиеДвижения = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		
		Если Источник.ДополнительныеСвойства.свойство("МассивОбъектовРасчета") тогда
			Если  Источник.ДополнительныеСвойства.МассивОбъектовРасчета тогда
				ЗарегестрироватьВПоследовательностиГруппуОбъектов(Источник,НаборЗаписей,ИмяПоследовательности);
			КонецЕсли;

						
		иначе

		
			ПараметрыПроведения  	= Источник.ДополнительныеСвойства.ПараметрыПроведения;	
			Если не ПараметрыПроведения.свойство("ДокРегистратор") тогда 
				ПараметрыПроведения.вставить("ДокРегистратор",Источник.ссылка);
			КонецЕсли;

			СостояниеПроведения 	= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
			
			Если Источник.ДополнительныеСвойства.Свойство("ПроведенВХронологическойПоследовательности") Тогда
				Если Источник.ДополнительныеСвойства.ПроведенВХронологическойПоследовательности Тогда
					СостояниеПроведения = Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
				КонецЕсли;
			КонецЕсли;
			
			ПериодРегистрации = Источник.дата;
			
			Если ПараметрыПроведения.свойство("ПериодРегистрации") тогда
				ПериодРегистрации = ПараметрыПроведения.ПериодРегистрации;
			КонецЕсли;
			
			Если ПараметрыПроведения.свойство("ИсточникПоказаний") тогда
				ИсточникПоказаний = ПараметрыПроведения.ИсточникПоказаний;
			КонецЕсли;
			
			Если  Источник.ДополнительныеСвойства.свойство("МассивПриборов") тогда
				ПараметрыПроведения.вставить("МассивПриборовУчета",Источник.ДополнительныеСвойства.МассивПриборов);
			КонецЕсли;
			
			ЗначенияИзмерений 						= Новый Структура(
			"Дата,Регистратор,ПериодНачисления,ПериодРегистрации,ИсточникПоказаний,
			|Организация, Район, ОбъектРасчета, СостояниеПроведения,ПараметрыПроведения,МКД",
			Источник.Дата,Источник.Ссылка,ПараметрыПроведения.ПериодНачисления,ПериодРегистрации,ИсточникПоказаний,
			ПараметрыПроведения.Организация,ПараметрыПроведения.Район,ПараметрыПроведения.ОбъектРасчета,СостояниеПроведения,ПараметрыПроведения,ПараметрыПроведения.МКД);
			
			ЗаполнитьЗначенияИзмеренийНП(ИмяПоследовательности,НаборЗаписей,ЗначенияИзмерений,ПредыдущиеДвижения);
		КонецЕсли;	
	КонецЕсли; 	
	НаборЗаписей.Записать(); 	
КонецПроцедуры

Процедура ЗаполнитьЗначенияИзмеренийНП(ИмяПоследовательности,НаборЗаписей,ЗначенияИзмерений,ПредыдущиеДвижения)
	
	ПараметрыПроведения 					= ЗначенияИзмерений.ПараметрыПроведения;
	
	ОтборВПредыдущихДвижениях = Новый Структура;
	ОтборВПредыдущихДвижениях.Вставить("ПериодНачисления", ЗначенияИзмерений.ПериодНачисления);
	ОтборВПредыдущихДвижениях.Вставить("Организация", ЗначенияИзмерений.Организация);
	ОтборВПредыдущихДвижениях.Вставить("Район", ЗначенияИзмерений.Район);
	ОтборВПредыдущихДвижениях.Вставить("ПериодРегистрации", ЗначенияИзмерений.ПериодРегистрации);
	ОтборВПредыдущихДвижениях.Вставить("ДокРегистратор", ЗначенияИзмерений.Регистратор);
	ОтборВПредыдущихДвижениях.Вставить("ДатаРегистратора", ЗначенияИзмерений.Дата);
	
	ОтборВПредыдущихДвижениях.Вставить("ОбъектРасчета", ЗначенияИзмерений.ОбъектРасчета);
	ОтборВПредыдущихДвижениях.Вставить("ПриборУчета", Справочники.энргПриборыУчетаАбонента.ПустаяСсылка());
	ОтборВПредыдущихДвижениях.Вставить("Разделитель", 0);
	
	Если ИмяПоследовательности = "бестПоказанияПУНППоследовательность" Тогда 
		
		Если ПараметрыПроведения.Свойство("МассивПриборов") Тогда
			
			Выборка  								= ПараметрыПроведения.МассивПриборов.выбрать();
			
			Пока Выборка.следующий() цикл 
				
				
				ЗаполнитьЗначенияСвойств(ОтборВПредыдущихДвижениях,Выборка); 
				СтрокиПредыдущиеДвижения = ПредыдущиеДвижения.НайтиСтроки(ОтборВПредыдущихДвижениях);
				
				Для каждого стр из СтрокиПредыдущиеДвижения Цикл
					ПредыдущиеДвижения.Удалить(стр);
				КонецЦикла;
				
				Движение 							= НаборЗаписей.Добавить();
				// Измерения
				Движение.ПериодНачисления 			= ЗначенияИзмерений.ПериодНачисления;
				Движение.Организация 	 			= ЗначенияИзмерений.Организация;
				Движение.Район 						= ЗначенияИзмерений.Район;
				Движение.ОбъектРасчета 				= Выборка.ОбъектРасчета;
				Движение.ПриборУчета				= Выборка.ПриборУчета;
				Движение.Разделитель				= Выборка.Разделитель;
				
				Движение.ПериодРегистрации 			= ЗначенияИзмерений.ПериодРегистрации;
				Движение.ДокРегистратор 			= ЗначенияИзмерений.Регистратор;
				Движение.ДатаРегистратора 			= ЗначенияИзмерений.Дата;
				Движение.ВыводПрибораУчета 			= Выборка.ВыводПрибораУчета;
				Движение.ИмяТабЧасти 				= Выборка.ИмяТабЧасти;
				Движение.МКД                   	 	= Выборка.МКД;
				Движение.ИсточникПоказаний 			= ЗначенияИзмерений.ИсточникПоказаний;
				Движение.СостояниеПроведения 		= ЗначенияИзмерений.СостояниеПроведения;
				
			КонецЦикла; 		
		Иначе
			
			Выборка  								= ПараметрыПроведения.МассивПриборовУчета.выбрать();
			
			Пока Выборка.следующий() цикл
				ЗаполнитьЗначенияСвойств(ОтборВПредыдущихДвижениях,Выборка);
				СтрокиПредыдущиеДвижения = ПредыдущиеДвижения.НайтиСтроки(ОтборВПредыдущихДвижениях);
				
				Для каждого стр из СтрокиПредыдущиеДвижения Цикл
					ПредыдущиеДвижения.Удалить(стр);
				КонецЦикла;
				
				
				Движение 							= НаборЗаписей.Добавить();
				// Измерения
				Движение.ПериодНачисления 			= ЗначенияИзмерений.ПериодНачисления;
				Движение.Организация 	 			= ЗначенияИзмерений.Организация;
				Движение.Район 						= ЗначенияИзмерений.Район;
				Движение.ОбъектРасчета 				= Выборка.ОбъектРасчета;
				Движение.ПриборУчета				= Выборка.ПриборУчета;
				Движение.Разделитель				= Выборка.Разделитель;
				Движение.СостояниеПроведения 		= ЗначенияИзмерений.СостояниеПроведения;
				Движение.ПериодРегистрации 			= ЗначенияИзмерений.ПериодРегистрации;
				Движение.ДокРегистратор 			= ЗначенияИзмерений.Регистратор;
				Движение.ДатаРегистратора 			= ЗначенияИзмерений.Дата;
				Движение.ВыводПрибораУчета 			= Выборка.ВыводПрибораУчета;
				Движение.ИмяТабЧасти 				= Выборка.ИмяТабЧасти;
				Движение.МКД                   	 	= Выборка.МКД;
				Движение.ИсточникПоказаний 			= ЗначенияИзмерений.ИсточникПоказаний;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого стр из ПредыдущиеДвижения Цикл
			Движение 						= НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, стр);
			Движение.СостояниеПроведения 	= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
		КонецЦикла;
	ИначеЕсли  ИмяПоследовательности = "бестСтабильныеПериодыПоследовательностьНП" тогда
		
		Движение 							= НаборЗаписей.Добавить();
		Движение.ПериодНачисления 			= ЗначенияИзмерений.ПериодНачисления;
		Движение.Организация 				= ЗначенияИзмерений.Организация;
		Движение.Район 						= ЗначенияИзмерений.Район;
		Движение.ОбъектРасчета              = ЗначенияИзмерений.ОбъектРасчета; 
		Движение.СостояниеПроведения 		= ЗначенияИзмерений.СостояниеПроведения;
		Движение.ПериодРегистрации 			= ЗначенияИзмерений.ПериодРегистрации;
		Движение.ДокРегистратор 			= ЗначенияИзмерений.Регистратор;
		Движение.МКД                   	 	= ЗначенияИзмерений.МКД;
		Движение.ДатаРегистратора 			= ЗначенияИзмерений.Дата;
		
		
	ИначеЕсли  ИмяПоследовательности = "бестВзаиморасчетыПоследовательность" тогда
		
		Движение 								= НаборЗаписей.Добавить();
		Движение.Организация 	 				= ЗначенияИзмерений.Организация;
		Движение.ПериодНачисления 				= ЗначенияИзмерений.ПериодНачисления;
		Движение.Район 							= ЗначенияИзмерений.Район;
		//Движение.Договор 						= ЗначенияИзмерений.Договор;
		Движение.СостояниеПроведения 			= ЗначенияИзмерений.СостояниеПроведения;
		Движение.ДокРегистратор 				= ЗначенияИзмерений.Регистратор;
		Движение.ДатаРегистратора 				= ЗначенияИзмерений.Дата; 
		Движение.ЭтоОплата 						= ПараметрыПроведения.ЭтоОплата;
		//Движение.Кассир 						= ПараметрыПроведения.Кассир;
		Движение.ИсточникПоступления 			= ПараметрыПроведения.ИсточникПоступления;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗарегистрироватьВПоследовательностиНППриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ДополнительныеСвойства.свойство("ВосстановлениеПоследовательности") тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.свойство("РегистрироватьСтабильныеПериоды") тогда
		Если не Источник.ДополнительныеСвойства.РегистрироватьСтабильныеПериоды тогда
			Возврат;
		КонецЕсли;  		
	КонецЕсли;
	
	ЗарегестрироватьВПоследовательности(Источник, Отказ,"бестСтабильныеПериодыПоследовательностьНП");
	
КонецПроцедуры

Процедура ЗарегистрироватьВПоследовательностиПоказанияПУНППриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ДополнительныеСвойства.свойство("ВосстановлениеПоследовательности") тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ДополнительныеСвойства.свойство("РегистрироватьПоказанияПУ") тогда
		Если не Источник.ДополнительныеСвойства.РегистрироватьПоказанияПУ тогда
			Возврат;
		КонецЕсли;  		
	КонецЕсли;
	
	Источник.МассивПриборов();

	Набор = РегистрыСведений.бестПредоставленныеПоказанияНП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокРегистратор.Установить(Источник.ссылка);
	Набор.Записать();
	
	ЗарегестрироватьВПоследовательности(Источник, Отказ,"бестПоказанияПУНППоследовательность");
	
КонецПроцедуры

Процедура ЗарегестрироватьВПоследовательностиГруппуОбъектов(Источник,НаборЗаписей,ИмяПоследовательности)
	
	СостояниеПроведения  									= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	
	Если ИмяПоследовательности = "бестСтабильныеПериодыПоследовательностьНП" тогда
		
		Источник.МассивОбъектовРасчета();

		ДанныеДляПроведения  								= Источник.ДополнительныеСвойства.МассивОбъектов;
		
		Выборка  											= ДанныеДляПроведения.выбрать();
		
		Пока Выборка.следующий() цикл
			СтрокаНабора 									= НаборЗаписей.Добавить();
			СтрокаНабора.Организация 	 					= Выборка.Организация;
			СтрокаНабора.ПериодНачисления 					= Выборка.ПериодНачисления;
			СтрокаНабора.Район 								= Выборка.Район;
			СтрокаНабора.ОбъектРасчета	         	 		= Выборка.ОбъектРасчета;
			СтрокаНабора.МКД	         	 				= Выборка.МКД;
			СтрокаНабора.ПериодРегистрации 					= Выборка.ПериодРегистрации;
			СтрокаНабора.СостояниеПроведения 				= СостояниеПроведения;
			СтрокаНабора.ДокРегистратор 					= Источник.ссылка;
			СтрокаНабора.ДатаРегистратора 					= Источник.Дата; 
			
		КонецЦикла;	
		
	ИначеЕсли ИмяПоследовательности ="бестВзаиморасчетыПоследовательность" тогда
		ДанныеДляПроведения  								= Источник.ДополнительныеСвойства.ДанныеОплаты;
		ИсточникПоступления 								= Источник.ДополнительныеСвойства.ИсточникПоступления;
		Выборка  											= ДанныеДляПроведения.выбрать();
		
		Пока Выборка.следующий() цикл
			СтрокаНабора 									= НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора,Выборка);
			СтрокаНабора.СостояниеПроведения 				= СостояниеПроведения;
			СтрокаНабора.ДокРегистратор 					= Источник.ссылка;
			СтрокаНабора.ДатаРегистратора 					= Выборка.Дата;			
			СтрокаНабора.ИсточникПоступления 				= ИсточникПоступления;			
		КонецЦикла;
		
	ИначеЕсли ИмяПоследовательности = "бестПоказанияПУНППоследовательность" Тогда
		
		ПараметрыПроведения  	= Источник.ДополнительныеСвойства.ПараметрыПроведения;
		ПериодРегистрации = Источник.дата;
		
		Если ПараметрыПроведения.свойство("ПериодРегистрации") тогда
			ПериодРегистрации = ПараметрыПроведения.ПериодРегистрации;
		КонецЕсли;
		
		Если ПараметрыПроведения.свойство("ИсточникПоказаний") тогда
			ИсточникПоказаний = ПараметрыПроведения.ИсточникПоказаний;
		КонецЕсли;
		
		
		Источник.МассивПриборов();
		
		ДанныеДляПроведения  								= Источник.ДополнительныеСвойства.МассивПриборов;
		
		Выборка  											= ДанныеДляПроведения.выбрать();
			
			Пока Выборка.следующий() цикл 
								
				Движение 							= НаборЗаписей.Добавить();
				// Измерения
				Движение.ПериодНачисления 			= Источник.ПериодНачисления;
				Движение.Организация 	 			= Источник.Организация;
				Движение.Район 						= Источник.Район;
				Движение.ОбъектРасчета 				= Выборка.ОбъектРасчета;
				Движение.ПриборУчета				= Выборка.ПриборУчета;
				Движение.Разделитель				= Выборка.Разделитель;
				
				Движение.ПериодРегистрации 			= ПериодРегистрации;
				Движение.ДокРегистратор 			= Источник.Ссылка;
				Движение.ДатаРегистратора 			= Источник.Дата;
				Движение.ВыводПрибораУчета 			= Выборка.ВыводПрибораУчета;
				Движение.ИмяТабЧасти 				= Выборка.ИмяТабЧасти;
				Движение.МКД                   	 	= Выборка.МКД;
				Движение.ИсточникПоказаний 			= ИсточникПоказаний;
				Движение.СостояниеПроведения 		= СостояниеПроведения;
				
			КонецЦикла; 
	КонецЕсли; 	
	
			
КонецПроцедуры

Процедура ЗарегистрироватьВПоследовательностиВзаиморасчеты(Источник, Отказ) Экспорт
		
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.свойство("ВосстановлениеПоследовательности") тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ДополнительныеСвойства.свойство("НеРегестрироватьВзаиморасчеты") тогда
		Если Источник.ДополнительныеСвойства.НеРегестрироватьВзаиморасчеты тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Если Источник.ДополнительныеСвойства.свойство("ГруппаАбонентов") И Источник.ДополнительныеСвойства.ГруппаАбонентов Тогда
	//	Источник.ДанныеОплаты();
	//КонецЕсли;
	
	ЗарегестрироватьВПоследовательности(Источник, Отказ,"бестВзаиморасчетыПоследовательность");
	
КонецПроцедуры

#КонецОбласти
