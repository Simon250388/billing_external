
#Область РегламетныеПроцедуры

// Выполнение регламентных процедур
Процедура РегламетныеПроцедурыБиллинг() Экспорт 
	
	ЗначениеКонстанты  				= Константы.энргДатаНачалаВеденияУчета.Получить();
	
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоВеденияУчета",ЗначениеКонстанты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ПериодНачисления) КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	энргЗоныОтвественности.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		энргЗакрытиеПериодаСрезПоследних.ПериодНачисления КАК ПериодНачисления,
	|		энргЗакрытиеПериодаСрезПоследних.Район КАК Район
	|	ИЗ
	|		РегистрСведений.энргЗакрытиеПериода.СрезПоследних(, Организация =&Организация ) КАК энргЗакрытиеПериодаСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоВеденияУчета, МЕСЯЦ), СЕКУНДА, -1), МЕСЯЦ),
	|		энргЗоныОтвественности.Ссылка
	|	ИЗ
	|		Справочник.энргЗоныОтвественности КАК энргЗоныОтвественности
	|	ГДЕ
	|		НЕ энргЗоныОтвественности.ПометкаУдаления) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.энргЗоныОтвественности КАК энргЗоныОтвественности
	|		ПО ВложенныйЗапрос.Район = энргЗоныОтвественности.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Район,
	|	энргЗоныОтвественности.Организация";
	
	Результат  						= Запрос.Выполнить();
	Выборка  						= Результат.Выбрать();
	Пока Выборка.Следующий() цикл 		
		ПараметрыЗадания  			= Новый Массив;
		ПараметрыЗадания.Добавить(Выборка.Организация);
		ПараметрыЗадания.Добавить(КонецМесяца(Выборка.ПериодНачисления)+1);
		ПараметрыЗадания.Добавить(Выборка.Район);
		ФоновыеЗадания.Выполнить("энргРаботаСПоследовательностями.ВыполнитьРегламетныеОперацииОДН",ПараметрыЗадания);
		ФоновыеЗадания.Выполнить("энргРаботаСПоследовательностями.ВыполнитьРегламетныеОперацииИндивидуальные",ПараметрыЗадания);
	КонецЦикла;	
	
КонецПроцедуры

// Выполнение регламентных процедур
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   СбрасыватьСостояниеПоследовательности				- Сбрасывать состояние последовательности.
//
Процедура ОтложенныеДвиженияДокументовНачисления(Организация, ПериодНачисления, Район, Строение=Неопределено,СбрасыватьСостояниеПоследовательности=Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ПериодНачисления) или Не ЗначениеЗаполнено(Район) тогда
		Возврат;
	КонецЕсли;
	
	ГраницыПериода  											= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления,Ложь);
	
	НачалоПериодаРасчета										= ГраницыПериода.НачалоОП;
	
	МВТ  														= Новый МенеджерВременныхТаблиц;
	
	Результат 													= РезультатНачальныеОстаткиСтабильногоПериода(Организация, ПериодНачисления,Район,Строение,НачалоПериодаРасчета);
	Выборка  													= Результат[0].Выбрать();
	
	ВыборкаПоказания 											= Результат[1].Выбрать();
	ВыборкаШкалы	 											= Результат[2].Выбрать();
	ВыборкаИзмерители 											= Результат[3].Выбрать();
	
	ПериодНачисленияПред 										= НачалоМесяца(НачалоМесяца(ПериодНачисления)-1);
	ТекМКД														= Неопределено;
	НаборСтабильныеПериоды 										= Неопределено;
	НаборСтабильныеПериодыШкалы									= Неопределено;
	НаборСтабильныеПериодыИзмерителиНаправлений 				= Неопределено;
	НаборНомерСтрокСтабПериода 									= Неопределено;
	НаборМаксимальныеПоказания 									= Неопределено;
	НаборОтложенныхДвижений 									= Неопределено;
	
	ПустоеСтроение												= Справочники.энргСтроения.ПустаяСсылка();
	
	Если Выборка.Количество() > 0 тогда		
		НачатьТранзакцию();
	Иначе
		Возврат;	
	КонецЕсли;	
	
	ЕстьСледующийПоказания 										= ВыборкаПоказания.Следующий();
	ЕстьСледующийШКалы	 										= ВыборкаШкалы.Следующий();
	ЕстьСледующийИзмерители										= ВыборкаИзмерители.Следующий();
		
	Пока Выборка.Следующий() цикл		
		МКД		 												= ?(НЕ Выборка.ЧастныйСектор,Выборка.Строение,ПустоеСтроение);
		Если ТекМКД <> МКД тогда  						
			Если ТекМКД <>Неопределено тогда
				
				Пока ЕстьСледующийПоказания И ?(НЕ ВыборкаПоказания.ЧастныйСектор,ВыборкаПоказания.Строение,ПустоеСтроение) = ТекМКД  Цикл
					
					СтрокаНабораПоказаний 						= НаборМаксимальныеПоказания.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНабораПоказаний, ВыборкаПоказания);
					
					Если ВыборкаПоказания.ЭтоВводНачальныхОстатков Тогда
						СтрокаНабораПоказаний 					= НаборМаксимальныеПоказания.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабораПоказаний, ВыборкаПоказания);
						СтрокаНабораПоказаний.ПериодНачисления 	= НачалоМесяца(ВыборкаПоказания.ПериодНачисления - 1);
						
						НаборМаксимальныеПоказания 				= РегистрыСведений.энргМаксимальныеПоказанияСрез.СоздатьНаборЗаписей();
						НаборМаксимальныеПоказания.Отбор.Организация.установить(Организация);
						НаборМаксимальныеПоказания.Отбор.ПериодНачисления.установить(НачалоМесяца(ПериодНачисления-1));
						НаборМаксимальныеПоказания.Отбор.Район.установить(Район);
						НаборМаксимальныеПоказания.Отбор.ЧастныйСектор.установить(НЕ ЗначениеЗаполнено(ТекМКД));
						Если ЗначениеЗаполнено(ТекМКД) Тогда 
							НаборМаксимальныеПоказания.Отбор.Строение.установить(ТекМКД);
						КонецЕсли;
						НаборМаксимальныеПоказания.Записать();						
					КонецЕсли; 					
					
					ЕстьСледующийПоказания 						= ВыборкаПоказания.Следующий();
					Если Не ЕстьСледующийПоказания Тогда
						Прервать;
					КонецЕсли;					
				КонецЦикла;	
				
				Пока ЕстьСледующийШКалы И ?(НЕ ВыборкаШкалы.ЧастныйСектор,ВыборкаШкалы.Строение,ПустоеСтроение) = ТекМКД  Цикл
					
					СтрокаНабораПоказаний 						= НаборСтабильныеПериодыШкалы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНабораПоказаний, ВыборкаШкалы);
					
					ЕстьСледующийШКалы 							= ВыборкаШкалы.Следующий();
					Если Не ЕстьСледующийШКалы Тогда
						Прервать;
					КонецЕсли;					
				КонецЦикла;
				
				
				Пока ЕстьСледующийИзмерители И ?(НЕ ВыборкаИзмерители.ЧастныйСектор,ВыборкаИзмерители.Строение,ПустоеСтроение) = ТекМКД  Цикл
					
					СтрокаНабораИзмерители 						= НаборСтабильныеПериодыИзмерителиНаправлений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНабораИзмерители, ВыборкаИзмерители);
					
					ЕстьСледующийИзмерители 					= ВыборкаИзмерители.Следующий();
					Если Не ЕстьСледующийИзмерители Тогда
						Прервать;
					КонецЕсли;					
				КонецЦикла;
				
				Попытка 										
					Если СбрасыватьСостояниеПоследовательности тогда
						СброситьСостояниеПоследовательности("энргСтабильныеПериодыПоследовательность",	Организация,ПериодНачисления,Район,ТекМКД);
						СброситьСостояниеПоследовательности("энргПоказанияПУПоследовательность", 		Организация,ПериодНачисления,Район,ТекМКД);
						СброситьСостояниеПоследовательности("энргВзаиморасчетыПоследовательность",		Организация,ПериодНачисления,Район,ТекМКД);
					КонецЕсли;
					
					НаборОтложенные 							= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
					НаборОтложенные.отбор.Организация.установить(Организация);
					НаборОтложенные.отбор.ПериодНачисления.установить(ПериодНачисления);
					НаборОтложенные.отбор.Район.установить(Район); 						
					НаборОтложенные.отбор.РазделЗаписи.установить(Перечисления.энргРазделыЗаписи.СтабильныеПериоды);
					НаборОтложенные.Отбор.ЧастныйСектор.установить(НЕ ЗначениеЗаполнено(ТекМКД));
					НаборОтложенные.отбор.Строение.установить(ТекМКД);
					НаборОтложенные.Записать(); 
					
					НаборСтабильныеПериоды.записать(Ложь);
					НаборСтабильныеПериодыШкалы.записать(Ложь);
					НаборСтабильныеПериодыИзмерителиНаправлений.Записать(Ложь);
					НаборНомерСтрокСтабПериода.записать(Ложь); 						
					НаборМаксимальныеПоказания.записать(Ложь);
					ЗафиксироватьТранзакцию();
					НачатьТранзакцию(); 
				Исключение
					ПредставлениеОшибки 						= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПредставлениеОшибки);
					ЗаписьЖурналаРегистрации("Заполнение начальных остатков по району " +Район + " за период:" + ПериодНачисления ,УровеньЖурналаРегистрации.Ошибка,,,ПредставлениеОшибки);
					ОтменитьТранзакцию();
					НачатьТранзакцию(); 					
				КонецПопытки;			
			КонецЕсли;
			// Очищаем набор записей и создаем приемники данных.			
			ОчиститьНаборыЗаписей(Организация, ПериодНачисления,Район,Выборка.ЧастныйСектор,Выборка.Строение,Выборка.ДокРегистратор,Выборка.ЭтоВводНачальныхОстатков);
			
			НаборСтабильныеПериоды								= РегистрыСведений.энргСтабильныеПериоды.СоздатьНаборЗаписей();
			НаборСтабильныеПериодыШкалы							= РегистрыСведений.энргСтабильныеПериодыШкалы.СоздатьНаборЗаписей();
			НаборСтабильныеПериодыИзмерителиНаправлений 		= РегистрыСведений.энргСтабильныеПериодыИзмерителиНаправлений.СоздатьНаборЗаписей();
			НаборНомерСтрокСтабПериода 							= РегистрыСведений.энргНомераСтрокСтабильногоПериода.СоздатьНаборЗаписей();
			НаборМаксимальныеПоказания 							= РегистрыСведений.энргМаксимальныеПоказанияСрез.СоздатьНаборЗаписей();			
		КонецЕсли;     		
			
		СтрокаСтабПериоды  										= НаборСтабильныеПериоды.добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтабПериоды,Выборка);	
		СтрокаСтабПериоды.ПериодНачисления 						= ПериодНачисления;
		
		СтрокаНомеровСтрок 										= НаборНомерСтрокСтабПериода.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНомеровСтрок,Выборка);
		СтрокаНомеровСтрок.ПериодНачисления 					= ПериодНачисления;
		СтрокаНомеровСтрок.период  								= Выборка.ДатаРегистратора;
			
		ТекМКД		 											= ?(НЕ Выборка.ЧастныйСектор,Выборка.Строение,ПустоеСтроение);
	КонецЦикла;  
	
	Если ТекМКД <>Неопределено тогда
		
		Пока ЕстьСледующийПоказания И ?(НЕ ВыборкаПоказания.ЧастныйСектор,ВыборкаПоказания.Строение,ПустоеСтроение) = ТекМКД  Цикл
			
			СтрокаНабораПоказаний 								= НаборМаксимальныеПоказания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабораПоказаний, ВыборкаПоказания);
			
			Если ВыборкаПоказания.ЭтоВводНачальныхОстатков Тогда
				СтрокаНабораПоказаний 							= НаборМаксимальныеПоказания.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабораПоказаний, ВыборкаПоказания);
				СтрокаНабораПоказаний.ПериодНачисления 			= НачалоМесяца(ВыборкаПоказания.ПериодНачисления - 1);
			КонецЕсли;
			
			ЕстьСледующийПоказания 								= ВыборкаПоказания.Следующий();
			Если Не ЕстьСледующийПоказания Тогда
				Прервать;
			КонецЕсли;					
		КонецЦикла;
		
		Пока ЕстьСледующийШКалы И ?(НЕ ВыборкаШкалы.ЧастныйСектор,ВыборкаШкалы.Строение,ПустоеСтроение) = ТекМКД Цикл
			
			СтрокаНабораПоказаний 								= НаборСтабильныеПериодыШкалы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабораПоказаний, ВыборкаШкалы);
			
			ЕстьСледующийШКалы 									= ВыборкаШкалы.Следующий();
			Если Не ЕстьСледующийШКалы Тогда
				Прервать;
			КонецЕсли;					
		КонецЦикла;		
		
		Пока ЕстьСледующийИзмерители И ?(НЕ ВыборкаИзмерители.ЧастныйСектор,ВыборкаИзмерители.Строение,ПустоеСтроение) = ТекМКД  Цикл
			
			СтрокаНабораИзмерители 								= НаборСтабильныеПериодыИзмерителиНаправлений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабораИзмерители, ВыборкаИзмерители);
			
			ЕстьСледующийИзмерители 							= ВыборкаИзмерители.Следующий();
			Если Не ЕстьСледующийИзмерители Тогда
				Прервать;
			КонецЕсли;					
		КонецЦикла;
		
		Попытка 				
			Если СбрасыватьСостояниеПоследовательности тогда 
				СброситьСостояниеПоследовательности("энргСтабильныеПериодыПоследовательность",	Организация,ПериодНачисления,Район,ТекМКД);
				СброситьСостояниеПоследовательности("энргПоказанияПУПоследовательность",		Организация,ПериодНачисления,Район,ТекМКД);
				СброситьСостояниеПоследовательности("энргВзаиморасчетыПоследовательность",		Организация,ПериодНачисления,Район,ТекМКД);
			КонецЕсли;
			НаборОтложенные 									= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
			НаборОтложенные.отбор.Организация.установить(Организация);
			НаборОтложенные.отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборОтложенные.отбор.Район.установить(Район); 						
			НаборОтложенные.отбор.РазделЗаписи.установить(Перечисления.энргРазделыЗаписи.СтабильныеПериоды);
			НаборОтложенные.отбор.ЧастныйСектор.установить(Не ЗначениеЗаполнено(ТекМКД));
			НаборОтложенные.отбор.Строение.установить(ТекМКД);
			НаборОтложенные.Записать();  
			
			НаборСтабильныеПериоды.записать(Ложь);
			НаборСтабильныеПериодыШкалы.записать(Ложь);
			НаборСтабильныеПериодыИзмерителиНаправлений.Записать(Ложь);
			НаборНомерСтрокСтабПериода.записать(Ложь);			
			НаборМаксимальныеПоказания.записать(Ложь);
			ЗафиксироватьТранзакцию(); 			
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("Заполнение начальных остатков по району " +Район + " за период:" + ПериодНачисления ,УровеньЖурналаРегистрации.Ошибка,,,ПредставлениеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПредставлениеОшибки);
			ОтменитьТранзакцию();
		КонецПопытки;	
	КонецЕсли;  	
	
	ПересчитатьСреднийОбъемПотребленияАбонентов(Организация, ПериодНачисления,Район,Строение);	
КонецПроцедуры

// Выполнение регламентных процедур
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   СбрасыватьСостояниеПоследовательности				- Сбрасывать состояние последовательности.
//
Процедура ОтложенныеДвиженияДокументовНачисленияМКД(Организация, ПериодНачисления, Район, МКД=Неопределено,СбрасыватьСостояниеПоследовательности = Истина) Экспорт 
	
	Если Не ЗначениеЗаполнено(ПериодНачисления) или Не ЗначениеЗаполнено(Район) тогда
		Возврат;
	КонецЕсли;
	
	ГраницыПериода  											= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления,Ложь);
	
	НачалоПериодаРасчета										= ГраницыПериода.НачалоОП;
	
	МВТ  														= Новый МенеджерВременныхТаблиц;
	
	Результат 													= РезультатНачальныеОстаткиСтабильногоПериодаМКД(Организация, ПериодНачисления,Район,МКД,НачалоПериодаРасчета);
	Выборка  													= Результат[0].Выбрать();
	
	ВыборкаПоказания 											= Результат[1].Выбрать();
	ВыборкаШкалы	 											= Результат[2].Выбрать();
	ВыборкаСоставУзла											= Результат[3].Выбрать();
	
	ПериодНачисленияПред 										= НачалоМесяца(НачалоМесяца(ПериодНачисления)-1);
	ТекМКД  													= Неопределено;
					
	Если Выборка.Количество() > 0 тогда		
		НачатьТранзакцию();
	Иначе
		Возврат;	
	КонецЕсли;	
	
	ОчиститьНаборыЗаписейМКД(Организация, ПериодНачисления,Район, МКД);
	
	Если СбрасыватьСостояниеПоследовательности тогда 
		СброситьСостояниеПоследовательности("энргСтабильныеПериодыМКДПоследовательность",	Организация,ПериодНачисления,Район);
		СброситьСостояниеПоследовательности("энргПоказанияПУПоследовательностьМКД",			Организация,ПериодНачисления,Район);
	КонецЕсли;

	НаборСтабильныеПериоды										= РегистрыСведений.энргСтабильныеПериодыМКД.СоздатьНаборЗаписей();
	НаборСтабильныеПериодыШкалы									= РегистрыСведений.энргСтабильныеПериодыМКДШкалы.СоздатьНаборЗаписей();
	НаборСтабильныеПериодыСоставУзла							= РегистрыСведений.энргСтабильныеПериодыМКДСоставУзловУчета.СоздатьНаборЗаписей();
	НаборНомерСтрокСтабПериода 									= РегистрыСведений.энргНомераСтрокСтабильногоПериодаМКД.СоздатьНаборЗаписей();
	НаборМаксимальныеПоказания 									= РегистрыСведений.энргМаксимальныеПоказанияСрезМКД.СоздатьНаборЗаписей();			
	НаборМаксимальныеПоказанияПред 								= РегистрыСведений.энргМаксимальныеПоказанияСрезМКД.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() цикл		
		СтрокаСтабПериоды  										= НаборСтабильныеПериоды.добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтабПериоды,Выборка);	
		СтрокаСтабПериоды.ПериодНачисления 						= ПериодНачисления;
		
		СтрокаНомеровСтрок 										= НаборНомерСтрокСтабПериода.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНомеровСтрок,Выборка);
		СтрокаНомеровСтрок.ПериодНачисления 					= ПериодНачисления;
		СтрокаНомеровСтрок.период  								= Выборка.ДатаРегистратора;		
	КонецЦикла;  
	
	Пока ВыборкаПоказания.Следующий() Цикл		
		СтрокаНабораПоказаний 									= НаборМаксимальныеПоказания.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабораПоказаний, ВыборкаПоказания);
	КонецЦикла;	
	
	Пока ВыборкаШкалы.Следующий() Цикл		
		СтрокаНабора 											= НаборСтабильныеПериодыШкалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаШкалы);					
	КонецЦикла;	
	
	Пока ВыборкаСоставУзла.Следующий() Цикл		
		СтрокаНабора 											= НаборСтабильныеПериодыСоставУзла.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаСоставУзла);					
	КонецЦикла;
	
	Попытка 				
		НаборОтложенные 									= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
		НаборОтложенные.отбор.Организация.установить(Организация);
		НаборОтложенные.отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборОтложенные.отбор.Район.установить(Район); 						
		НаборОтложенные.отбор.РазделЗаписи.установить(Перечисления.энргРазделыЗаписи.СтабильныеПериодыМКД);
		НаборОтложенные.Записать();  
		
		НаборСтабильныеПериоды.записать(Ложь);
		НаборСтабильныеПериодыШкалы.записать(Ложь);
		НаборСтабильныеПериодыСоставУзла.записать(Ложь);
		НаборНомерСтрокСтабПериода.записать(Ложь);			
		НаборМаксимальныеПоказания.записать(Ложь);
		//Если ВводНачальныхОстатков тогда
		//	НаборМаксимальныеПоказанияПред.записать(Ложь);
		//КонецЕсли;
		ЗафиксироватьТранзакцию(); 			
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//ЗаписьЖурналаРегистрации("Заполнение начальных остатков МКД по району " +Район + " за период:" + ПериодНачисления ,УровеньЖурналаРегистрации.Ошибка,,,ПредставлениеОшибки);
		ВызватьИсключение ПредставлениеОшибки; 
		ОтменитьТранзакцию();
	КонецПопытки;		 	
	
	ПересчитатьСреднийОбъемПотребленияМКД(Организация, ПериодНачисления,Район,МКД); 	
	
КонецПроцедуры

// Выполнение регламентных процедур
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//
Процедура ПересчитатьСреднийОбъемПотребленияМКД(Организация, ПериодНачисления,Район,МКД) Экспорт 
	
	Результат 						= РезультатаЗапросаСреднегоПотребленияМКД(Организация, ПериодНачисления,Район,МКД);
	Выборка  						= Результат.выбрать();
	Набор  							= РегистрыСведений.энргСреднийОбъемПотребленияМКД.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.установить(Организация);
	Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
	Набор.Отбор.район.установить(Район);	
	Если МКД<>Неопределено тогда
		Набор.Отбор.МКД.Установить(МКД);
	КонецЕсли;		
	Набор.Записать();
	
	Набор  							= РегистрыСведений.энргСреднийОбъемПотребленияМКД.СоздатьНаборЗаписей();				 
	Пока Выборка.следующий() цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);		
	КонецЦикла;
	Набор.Записать(Ложь);
	
	
КонецПроцедуры

// Выполнение регламентных процедур
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   ОтборПоДому			- устанавливать отбор по дому.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   Абонент				- Абонент, по которому происходит восстановление последовательности.
//
Процедура ПересчитатьСреднийОбъемПотребленияАбонентов(Организация, ПериодНачисления,Район,Строение=Неопределено,Помещение=Неопределено) Экспорт 
	Результат 						= РезультатаЗапросаСреднегоПотребленияАбонентов(Организация, ПериодНачисления,Район,Строение,Помещение);
	Выборка  						= Результат.выбрать();
	Набор  							= РегистрыСведений.энргСреднийОбъемПотребленияАбонентов.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.установить(Организация);
	Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
	Набор.Отбор.Район.установить(Район);
	Если НЕ Строение = Неопределено Тогда
		ЧастныйСектор 				= НЕ ЗначениеЗаполнено(Строение);
		Набор.Отбор.ЧастныйСектор.Установить(ЧастныйСектор);
		Если НЕ ЧастныйСектор Тогда
			Набор.Отбор.Строение.установить(Строение);
			Если НЕ Помещение  = Неопределено И ЗначениеЗаполнено(Помещение) Тогда
				Набор.Отбор.Помещение.установить(Помещение);
			КонецЕсли;
		КонецЕсли; 		
	КонецЕсли;  	
	Набор.Записать();
	
	Набор  							= РегистрыСведений.энргСреднийОбъемПотребленияАбонентов.СоздатьНаборЗаписей();				 
	Пока Выборка.следующий() цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);		
	КонецЦикла;
	Набор.Записать(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Восстановить Последовательность По Абоненту.
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   Абонент				- Абонент, по которому происходит восстановление последовательности.
//
Процедура ВосстановитьПоследовательностьПоАбоненту(Организация, ПериодНачисления,Район,Строение,Помещение,Абонент) Экспорт  
	ПараметрыЗадания  			= Новый Массив;
	ПараметрыЗадания.Добавить(Организация);
	ПараметрыЗадания.Добавить(ПериодНачисления);
	ПараметрыЗадания.Добавить(Район);
	ПараметрыЗадания.Добавить(Строение);
	ПараметрыЗадания.Добавить(Помещение);
	
	ФоновыеЗадания.Выполнить("энргРаботаСПоследовательностями.ВосстановитьПоследовательностьСтабильныеПериоды",		ПараметрыЗадания);
	ФоновыеЗадания.Выполнить("энргРаботаСПоследовательностями.ВосстановитьПоследовательностьПоказанияПУ",			ПараметрыЗадания);	
	
	Если Не Абонент = Неопределено И ЗначениеЗаполнено(Абонент) Тогда
		ПараметрыЗадания  			= Новый Массив;
		ПараметрыЗадания.Добавить(Организация);
		ПараметрыЗадания.Добавить(ПериодНачисления);
		ПараметрыЗадания.Добавить(Район);
		ПараметрыЗадания.Добавить(?(НЕ ЗначениеЗаполнено(Помещение), Справочники.энргСтроения.ПустаяСсылка(), Строение));
		ПараметрыЗадания.Добавить(Абонент);
		ФоновыеЗадания.Выполнить("энргРаботаСПоследовательностями.ВосстановитьПоследовательностьВзаиморасчеты",			ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Восстановить Последовательность По Абоненту.
//
Процедура ВосстановитьПоследовательностьПоМКД(Организация, ПериодНачисления,Район,МКД) Экспорт  
	ПараметрыЗадания  			= Новый Массив;
	ПараметрыЗадания.Добавить(Организация);
	ПараметрыЗадания.Добавить(ПериодНачисления);
	ПараметрыЗадания.Добавить(Район);
	ПараметрыЗадания.Добавить(МКД);
		
	ФоновыеЗадания.Выполнить("энргРаботаСПоследовательностями.ВосстановитьПоследовательностьСтабильныеПериодыМКД",		ПараметрыЗадания);
	ФоновыеЗадания.Выполнить("энргРаботаСПоследовательностями.ВосстановитьПоследовательностьПоказанияПУМКД",			ПараметрыЗадания);
КонецПроцедуры

// Выполнить Регламетные Операции ОДН.
//
Процедура ВыполнитьРегламетныеОперацииОДН(Организация, ПериодНачисления,Район) Экспорт 	
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ОтложенныеДвиженияДокументовНачисленияМКД",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	ОтложенныеДвиженияДокументовНачисленияМКД(Организация, ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
	
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ВосстановитьПоследовательностьСтабильныеПериодыМКД",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	ВосстановитьПоследовательностьСтабильныеПериодыМКД(Организация, ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
	
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ВосстановитьПоследовательностьПоказанияПУМКД",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);	
	ВосстановитьПоследовательностьПоказанияПУМКД(Организация, ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
КонецПроцедуры

// Выполнить Регламетные Операции Индивидуальные.
Процедура ВыполнитьРегламетныеОперацииИндивидуальные(Организация, ПериодНачисления,Район) Экспорт  	
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ОтложенныеДвиженияДокументовНачисления",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	ОтложенныеДвиженияДокументовНачисления(Организация, ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
	
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ВосстановитьПоследовательностьСтабильныеПериоды",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	ВосстановитьПоследовательностьСтабильныеПериоды(Организация, ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
	
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ВосстановитьПоследовательностьПоказанияПУ",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	ВосстановитьПоследовательностьПоказанияПУ(Организация, ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
	
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ПерерасчетСреднихНачислений",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	энргНачисления.СнятьСредниеНачисления(Организация, ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
	
	ПараметрыЗаписиЖурнала  = ПараметрыЗаписиЖурнала("ВосстановитьПоследовательностиВзаиморасчетов",ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,ПараметрыЗаписиЖурнала.Уровень,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтарт);
	ВосстановитьПоследовательностьВзаиморасчеты(Организация, ПериодНачисления,Район);
	ЗаписьЖурналаРегистрации(ПараметрыЗаписиЖурнала.ИмяОперации,УровеньЖурналаРегистрации.Информация,ПараметрыЗаписиЖурнала.Метаданные,ПараметрыЗаписиЖурнала.КомментарийСтоп);
	
КонецПроцедуры

// Восстановить Последовательность Стабильные Периоды.
//
Процедура ВосстановитьПоследовательностьСтабильныеПериоды(Организация, ПериодНачисления,Район,Строение=Неопределено,Помещение=Неопределено) Экспорт 
	
	ГраницыПериода  								= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления);
	
	НачалоПериодаРасчета							= ГраницыПериода.НачалоОП;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",		Организация);
	Отбор.Вставить("ПериодНачисления",	ПериодНачисления);
	Отбор.Вставить("Район",				Район);
	Отбор.Вставить("Строение",			Строение);
	Отбор.Вставить("Помещение",			Помещение);
	
	Отказ 										= Ложь; 	
	
	НачатьТранзакцию();
	УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(Отбор, "энргСтабильныеПериоды",Отказ);
	
	Если Отказ тогда			
		Возврат;
	КонецЕсли;
	
	Результат 									= РезультатЗапросаСтабильныеПериоды(Отбор);
	
	Выборка  									= Результат.Выбрать();
	ТекАбонент  								= Неопределено;
	ТекДом 										= Неопределено;
	
	ПроведенВПоследовательности 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	Исключен 									= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности; 
	ЕстьОшибки 									= Ложь;
	Ошибки 										= "";
	
	МассивДокументов 							= Новый Массив;
	
	ТекЧастныйСектор 							= Неопределено;
	ТекПомещение  								= Неопределено;
	ТекСтроение									= Неопределено;	
	
	Пока Выборка.следующий() цикл  		
		
		Если НЕ ТекПомещение = Выборка.Помещение ИЛИ НЕ ТекСтроение = Выборка.Строение Тогда 						
			Если НЕ ТекПомещение = Неопределено тогда // Это не первая строка.				
				Отказ 							= ПровестиПоСтабильнымПериодам(МассивДокументов,НачалоПериодаРасчета, Ошибки);
				Если не Отказ тогда
					// Если все выполнено тогда изменяем состояние в последовательности.
					НаборПоследовательности  	= РегистрыСведений.энргСтабильныеПериодыПоследовательность.СоздатьНаборЗаписей();
					НаборПоследовательности.Отбор.Организация.установить(Организация);
					НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
					НаборПоследовательности.Отбор.Район.установить(Район);
					НаборПоследовательности.Отбор.ЧастныйСектор.установить(ТекЧастныйСектор);
					НаборПоследовательности.Отбор.Строение.установить(ТекСтроение);
					НаборПоследовательности.Отбор.Помещение.установить(ТекПомещение);					
					НаборПоследовательности.Прочитать();
					ТаблицаНабора  				= НаборПоследовательности.Выгрузить();
					НаборПоследовательности.Очистить();
					НаборПоследовательности.Записать();
					для Каждого стр из ТаблицаНабора цикл
						стр.СостояниеПроведения = ПроведенВПоследовательности;
					КонецЦикла;
					НаборПоследовательности  	= РегистрыСведений.энргСтабильныеПериодыПоследовательность.СоздатьНаборЗаписей();
					НаборПоследовательности.Загрузить(ТаблицаНабора);
					НаборПоследовательности.Записать(Ложь); 										
					ЗафиксироватьТранзакцию();
					НачатьТранзакцию();
				иначе
					ЕстьОшибки 					= Истина;
					ОтменитьТранзакцию();
					НачатьТранзакцию();
				КонецЕсли;					
			КонецЕсли;
			МассивДокументов 					= Новый Массив; 			
		КонецЕсли;
		
		ОписаниеСтроки 							= Новый ФиксированнаяСтруктура("Организация, ПериодНачисления,Район,ЧастныйСектор,
		|Строение,Помещение,ПериодРегистрации,Документ,МоментВремени,Дата,ПомещениеСРазделеннымиЛС");
		
		Набор 									= РегистрыСведений.энргСтабильныеПериоды.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.ЧастныйСектор.установить(Выборка.ЧастныйСектор);
		Набор.Отбор.Строение.установить(Выборка.Строение);
		Набор.Отбор.Помещение.установить(Выборка.Помещение);
		Набор.Записать();
		
		Набор 							= РегистрыСведений.энргНомераСтрокСтабильногоПериода.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.ЧастныйСектор.установить(Выборка.ЧастныйСектор);
		Набор.Отбор.Строение.установить(Выборка.Строение);
		Набор.Отбор.Помещение.установить(Выборка.Помещение);
		Набор.Записать();		
		
		Набор 							= РегистрыСведений.энргСтабильныеПериодыШкалы.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.ЧастныйСектор.установить(Выборка.ЧастныйСектор);
		Набор.Отбор.Строение.установить(Выборка.Строение);
		Набор.Отбор.Помещение.установить(Выборка.Помещение);
		Набор.Записать();
		  		
		Набор 							= РегистрыСведений.энргСтабильныеПериодыИзмерителиНаправлений.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.ЧастныйСектор.установить(Выборка.ЧастныйСектор);
		Набор.Отбор.Строение.установить(Выборка.Строение);
		Набор.Отбор.Помещение.установить(Выборка.Помещение);
		Набор.Записать();
		
		Если Выборка.СостояниеПроведения = Исключен тогда
			
			НаборПоследовательности  	= РегистрыСведений.энргСтабильныеПериодыПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.ЧастныйСектор.установить(Выборка.ЧастныйСектор);
			НаборПоследовательности.Отбор.Строение.установить(Выборка.Строение);
			НаборПоследовательности.Отбор.Помещение.установить(Выборка.Помещение);
			НаборПоследовательности.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
			НаборПоследовательности.Записать();
			
			ТекЧастныйСектор  			= Выборка.ЧастныйСектор;
			ТекСтроение					= Выборка.Строение;
			ТекПомещение  				= Выборка.Помещение;
			
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки  					= Новый Структура(ОписаниеСтроки);
		ДанныеСтроки.Организация 		= Организация;
		ДанныеСтроки.ПериодНачисления 	= ПериодНачисления;
		ДанныеСтроки.Район 				= Район;
		ДанныеСтроки.ЧастныйСектор		= Выборка.ЧастныйСектор;
		ДанныеСтроки.Строение			= Выборка.Строение;
		ДанныеСтроки.Помещение			= Выборка.Помещение;
		ДанныеСтроки.Документ			= Выборка.ДокРегистратор;
		ДанныеСтроки.ПериодРегистрации	= Выборка.ПериодРегистрации;
		ДанныеСтроки.МоментВремени  	= Новый МоментВремени(Выборка.ДатаРегистратора,Выборка.ДокРегистратор);
		ДанныеСтроки.Дата			  	= Выборка.ДатаРегистратора;
		ДанныеСтроки.ПомещениеСРазделеннымиЛС	= Выборка.ПомещениеСРазделеннымиЛС;

		
		МассивДокументов.Добавить(ДанныеСтроки);// Добавляем в набор.			
		ТекЧастныйСектор  				= Выборка.ЧастныйСектор;
		ТекСтроение						= Выборка.Строение;
		ТекПомещение  					= Выборка.Помещение;		 		
	КонецЦикла; 	
	
	Если НЕ ТекПомещение = Неопределено тогда
		// Закончили чистку можно проводить документы.
		Отказ 							= ПровестиПоСтабильнымПериодам(МассивДокументов,НачалоПериодаРасчета,Ошибки);
		Если не Отказ тогда
			// Если все выполнено тогда изменяем состояние в последовательности.
			НаборПоследовательности  	= РегистрыСведений.энргСтабильныеПериодыПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.ЧастныйСектор.установить(ТекЧастныйСектор);
			НаборПоследовательности.Отбор.Строение.установить(ТекСтроение);
			НаборПоследовательности.Отбор.Помещение.установить(ТекПомещение);
			НаборПоследовательности.Прочитать();
			ТаблицаНабора  				= НаборПоследовательности.Выгрузить();
			НаборПоследовательности.Очистить();
			НаборПоследовательности.Записать();
			для Каждого стр из ТаблицаНабора цикл
				стр.СостояниеПроведения = ПроведенВПоследовательности;
			КонецЦикла;
			НаборПоследовательности  	= РегистрыСведений.энргСтабильныеПериодыПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Загрузить(ТаблицаНабора);
			НаборПоследовательности.Записать(Ложь);				
			ЗафиксироватьТранзакцию();
		иначе
			ЕстьОшибки 					= Истина;
			ОтменитьТранзакцию();	
		КонецЕсли; 					
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ВызватьИсключение Ошибки;
	КонецЕсли;		
	
КонецПроцедуры

// Восстановить Последовательность Стабильные Периоды МКД.
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//
Процедура ВосстановитьПоследовательностьСтабильныеПериодыМКД(Организация, ПериодНачисления,Район,МКД=Неопределено) Экспорт 
	
	ГраницыПериода  							= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления);
	
	НачалоПериодаРасчета						= ГраницыПериода.НачалоОП;
	
	Отбор 										= Новый Структура;
	Отбор.Вставить("Организация",			Организация);
	Отбор.Вставить("ПериодНачисления",		ПериодНачисления);
	Отбор.Вставить("Район",Район);
	Если МКД<>Неопределено тогда
		Отбор.Вставить("МКД",МКД);
	КонецЕсли;
	
	Отказ 										= Ложь; 	
	
	НачатьТранзакцию();
	УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(Отбор, "энргСтабильныеПериодыМКД",Отказ);
	
	Если Отказ тогда			
		Возврат;
	КонецЕсли;
	
	Результат 									= РезультатЗапросаСтабильныеПериодыМКД(Отбор); 	
	Выборка  									= Результат.Выбрать();
	
	ПроведенВПоследовательности 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	Исключен 									= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности; 
	Ошибки 										= "";
	МассивДокументов 							= Новый Массив;
	ТекМКД  									= Неопределено;
	
	Пока Выборка.следующий() цикл  		
		Если ТекМКД <> Выборка.МКД тогда 						
			Если ТекМКД <> Неопределено тогда // Это не первая строка.				
				врОшибки 						= ПровестиПоСтабильнымПериодамМКД(МассивДокументов,Ошибки,НачалоПериодаРасчета);
				Если ПустаяСтрока(врОшибки) тогда
					// Если все выполнено тогда изменяем состояние в последовательности.
					НаборПоследовательности  	= РегистрыСведений.энргСтабильныеПериодыМКДПоследовательность.СоздатьНаборЗаписей();
					НаборПоследовательности.Отбор.Организация.установить(Организация);
					НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
					НаборПоследовательности.Отбор.Район.установить(Район);
					НаборПоследовательности.Отбор.МКД.установить(ТекМКД);
					НаборПоследовательности.Прочитать();
					ТаблицаНабора  				= НаборПоследовательности.Выгрузить();
					НаборПоследовательности.Очистить();
					НаборПоследовательности.Записать();
					для Каждого стр из ТаблицаНабора цикл
						стр.СостояниеПроведения = ПроведенВПоследовательности;
					КонецЦикла;
					НаборПоследовательности  	= РегистрыСведений.энргСтабильныеПериодыМКДПоследовательность.СоздатьНаборЗаписей();
					НаборПоследовательности.Загрузить(ТаблицаНабора);
					НаборПоследовательности.Записать(Ложь); 										
					ЗафиксироватьТранзакцию();
					НачатьТранзакцию();
				иначе
					Ошибки 						= Ошибки + ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"") + врОшибки; 
					ОтменитьТранзакцию();
					НачатьТранзакцию();
				КонецЕсли;					
			КонецЕсли;
			МассивДокументов 					= Новый Массив; 			
		КонецЕсли;
		
		ОписаниеСтроки 							= Новый ФиксированнаяСтруктура("Организация, ПериодНачисления,Район,МКД,ПериодРегистрации,Документ,МоментВремени,Дата");
		
		Набор 									= РегистрыСведений.энргСтабильныеПериодыМКД.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.МКД.установить(Выборка.МКД);
		Набор.Записать();
		
		Набор 									= РегистрыСведений.энргНомераСтрокСтабильногоПериодаМКД.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.МКД.установить(Выборка.МКД);
		Набор.Записать();		
		
		Набор 									= РегистрыСведений.энргСтабильныеПериодыМКДШкалы.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.МКД.установить(Выборка.МКД);
		Набор.Записать();
		
		Набор 									= РегистрыСведений.энргСтабильныеПериодыМКДСоставУзловУчета.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления); 
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.МКД.установить(Выборка.МКД);
		Набор.Записать();
		
		Если Выборка.СостояниеПроведения = Исключен тогда
			
			НаборПоследовательности  			= РегистрыСведений.энргСтабильныеПериодыМКДПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.МКД.установить(Выборка.МКД);
			НаборПоследовательности.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
			НаборПоследовательности.Записать();
			
			ТекМКД  							= Выборка.МКД;  	
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки  							= Новый Структура(ОписаниеСтроки);
		ДанныеСтроки.Организация 				= Организация;
		ДанныеСтроки.ПериодНачисления 			= ПериодНачисления;
		ДанныеСтроки.Район 						= Район;
		ДанныеСтроки.МКД 						= Выборка.МКД;
		ДанныеСтроки.Документ					= Выборка.ДокРегистратор;
		ДанныеСтроки.ПериодРегистрации			= Выборка.ПериодРегистрации;
		ДанныеСтроки.МоментВремени  			= Новый МоментВремени(Выборка.ДатаРегистратора,Выборка.ДокРегистратор);
		ДанныеСтроки.Дата			  			= Выборка.ДатаРегистратора;
		
		МассивДокументов.Добавить(ДанныеСтроки);// Добавляем в набор.			
		ТекМКД  								= Выборка.МКД; 		
	КонецЦикла; 	
	
	Если ТекМКД <> Неопределено тогда
		// Закончили чистку можно проводить документы.
		врОшибки 								= ПровестиПоСтабильнымПериодамМКД(МассивДокументов,Ошибки,НачалоПериодаРасчета);
		Если ПустаяСтрока(врОшибки) тогда
			// Если все выполнено тогда изменяем состояние в последовательности.
			НаборПоследовательности  			= РегистрыСведений.энргСтабильныеПериодыМКДПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.МКД.установить(ТекМКД);
			НаборПоследовательности.Прочитать();
			ТаблицаНабора  						= НаборПоследовательности.Выгрузить();
			НаборПоследовательности.Очистить();
			НаборПоследовательности.Записать();
			для Каждого стр из ТаблицаНабора цикл
				стр.СостояниеПроведения 		= ПроведенВПоследовательности;
			КонецЦикла;
			НаборПоследовательности  			= РегистрыСведений.энргСтабильныеПериодыМКДПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Загрузить(ТаблицаНабора);
			НаборПоследовательности.Записать(Ложь);				
			ЗафиксироватьТранзакцию();
		иначе
			Ошибки 						= Ошибки + ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"") + врОшибки;
			ОтменитьТранзакцию();	
		КонецЕсли; 					
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Ошибки) Тогда
		ВызватьИсключение Ошибки;
	КонецЕсли;
	
КонецПроцедуры

// Восстановить Последовательность Показания ПУ.
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//
Процедура ВосстановитьПоследовательностьПоказанияПУ(Организация, ПериодНачисления,Район,Строение=Неопределено,Помещение=Неопределено) Экспорт 
	ГраницыПериода  							= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления);
	
	НачалоПериодаРасчета						= ГраницыПериода.НачалоОП;
	
	Отбор 										= Новый Структура;
	Отбор.Вставить("Организация",		Организация);
	Отбор.Вставить("ПериодНачисления",	ПериодНачисления);
	Отбор.Вставить("Район",				Район);	
	Отбор.Вставить("Строение",			Строение);
	Отбор.Вставить("Помещение",			Помещение);
	Отбор.Вставить("ПриборУчета",		Неопределено);
	 
	Отказ 										= Ложь;
	
	МВТ  										= Новый МенеджерВременныхТаблиц;
	Результат  									= РезультатЗапросаПоказанияПУ(МВТ,Отбор,НачалоПериодаРасчета);
	
	ДанныеМаксимальногоПотребления 				= ДанныеМаксимальногоПотребления(НачалоПериодаРасчета);
	
	РезультатСреднийОбъем 						= РезультатСреднийОбъемПотребления(МВТ,Отбор);
	ВыборкаСреднийОбъем 						= РезультатСреднийОбъем.выбрать();
	
	ПроведенСНарушением 						= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	ПроведенВПоследовательности 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	ПредыдущиеМакс 								= 0;
	Выборка  									= Результат.выбрать();
	ТекЧастныйСектор							= Неопределено;
	ТекСтроение									= Неопределено;
	ТекПомещение								= Неопределено;
	ТекКлючПомещения							= Неопределено;
	ТекПрибор 									= Неопределено;
	ТекШкала		 							= Неопределено;
	ТекТарифнаяЗона 							= Неопределено;
	ТекРегистрируетОбъем 						= Неопределено;
	МассивДокументов							= Неопределено;
	НомерПозиции 								= Неопределено;
	ДанныеСреднегоОбъема 						= Неопределено;
	ОписаниеСтроки 								= Новый ФиксированнаяСтруктура("
	|ДокРегистратор,СостояниеПроведения,ПериодРегистрации,ДатаРегистратора,
	|СостояниеПоказаний,Показание,Переворот,МаксПоказания,ПериодМаксПоказаний,	 
	|РегистраторМаксПоказаний,ДатаРегистратораМаксимальных,БылПереворот,Разделитель,НомерСтрокиТЧ,
	|КоэффициентПУ,МаксимальноВозможныеПоказания,ВыводПрибораУчета,ИмяТабЧасти,КС,ТочкаУчета");
	
	Если Выборка.количество() > 0 тогда
		ВыборкаСреднийОбъем.Следующий();
		НачатьТранзакцию();
	КонецЕсли;
	
	СтруктураСреза  							= РегистрыСведений.энргПериодыПриемаПоказаний.ПолучитьПоследнее(ПериодНачисления, Новый Структура("Организация", Организация));
	ПоказанияС									= ?(не ЗначениеЗаполнено(СтруктураСреза.ДатаС),1,СтруктураСреза.ДатаС);
	ПоказанияПО 								= ?(не ЗначениеЗаполнено(СтруктураСреза.ДатаПо),31,СтруктураСреза.ДатаПо);
	
	Пока Выборка.следующий() цикл
		Если НЕ ТекЧастныйСектор = Выборка.ЧастныйСектор
			ИЛИ НЕ ТекСтроение = Выборка.Строение 
			ИЛИ ТекПомещение<> Выборка.Помещение
			ИЛИ ТекПрибор <> Выборка.ПриборУчета
			ИЛИ ТекШкала <> Выборка.Шкала
			ИЛИ ТекТарифнаяЗона <> Выборка.ТарифнаяЗона тогда 			  			
			Если ТекПомещение <> Неопределено тогда
				
				Если Не Отказ Тогда
					ПараметрыПроведений  		= Новый Структура("
					|Организация, ПериодНачисления,Район,ЧастныйСектор,Строение,Помещение,КлючПомещения,ПриборУчета,Шкала, ТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета,РегистрируетОбъем",
					Организация, ПериодНачисления,район,ТекЧастныйСектор,ТекСтроение,ТекПомещение,ТекКлючПомещения,ТекПрибор,Текшкала,ТекТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета,ТекРегистрируетОбъем);
					ОтказПоТарифнойЗоне			= Ложь;
					ОтказПоТарифнойЗоне			= ПровестиПоказанияПриборовУчета(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления);
					
					Если ОтказПоТарифнойЗоне Тогда
						Отказ 					= Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если  ТекПомещение<> Выборка.Помещение или ТекПрибор <> Выборка.ПриборУчета тогда
					Если не Отказ Тогда
						// Если все выполнено тогда изменяем состояние в последовательности.
						НаборПоследовательности  = РегистрыСведений.энргПоказанияПУПоследовательность.СоздатьНаборЗаписей();
						НаборПоследовательности.Отбор.Организация.установить(Организация);
						НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
						НаборПоследовательности.Отбор.Район.установить(Район);
						НаборПоследовательности.Отбор.СостояниеПроведения.установить(ПроведенСНарушением);
						НаборПоследовательности.Отбор.ЧастныйСектор.установить(ТекЧастныйСектор);
						НаборПоследовательности.Отбор.Строение.установить(ТекСтроение);
						НаборПоследовательности.Отбор.Помещение.установить(ТекПомещение);
						НаборПоследовательности.Отбор.ПриборУчета.установить(ТекПрибор);
						НаборПоследовательности.Прочитать();
						ТаблицаНабора  			= НаборПоследовательности.Выгрузить();
						НаборПоследовательности.Очистить();
						НаборПоследовательности.Записать();
						
						ТаблицаНабора.ЗаполнитьЗначения(ПроведенВПоследовательности,"СостояниеПроведения");
						
						НаборПоследовательности  = РегистрыСведений.энргПоказанияПУПоследовательность.СоздатьНаборЗаписей();
						НаборПоследовательности.Загрузить(ТаблицаНабора);
						НаборПоследовательности.Записать(Ложь); 										
						ЗафиксироватьТранзакцию();
						НачатьТранзакцию();
						Отказ					= Ложь;
					иначе
						ОтменитьТранзакцию();
						НачатьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
				МассивДокументов.очистить();
			КонецЕсли;
			
			Если ТекПомещение <> Выборка.Помещение Тогда
				ДанныеСреднегоОбъема 			= ДанныеСреднегоОбъемаАбонента(ВыборкаСреднийОбъем, Выборка.ЧастныйСектор, Выборка.Строение, Выборка.Помещение);
			КонецЕсли;
			
			МассивДокументов					= Новый Массив;
			НомерПозиции 						= Выборка.НомерПозици+1;
		КонецЕсли; 	
		
		ДанныеСтроки 							= Новый Структура(ОписаниеСтроки);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки,Выборка);
		МассивДокументов.Добавить(ДанныеСтроки); 	
		
		// Очищаем данные
		Набор 									= РегистрыСведений.энргПредоставленныеПоказания.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.периодНачисления.установить(ПериодНачисления);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.ЧастныйСектор.установить(Выборка.ЧастныйСектор);
		Набор.Отбор.Строение.установить(Выборка.Строение);
		Набор.Отбор.Помещение.установить(Выборка.Помещение);
		Набор.Отбор.ПриборУчета.установить(Выборка.ПриборУчета);
		Набор.Отбор.Шкала.установить(Выборка.Шкала);
		Набор.Отбор.ТарифнаяЗона.установить(Выборка.ТарифнаяЗона);
		Набор.Записать();
		
		Если не Выборка.РегистрируетОбъем Тогда
			Набор 										= РегистрыСведений.энргРасчетСреднегоОбъема.СоздатьНаборЗаписей();
			Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
			Набор.Отбор.Организация.установить(Организация);
			Набор.Отбор.Район.установить(Район);
			Набор.Отбор.ЧастныйСектор.установить(Выборка.ЧастныйСектор);
			Набор.Отбор.Строение.установить(Выборка.Строение);
			Набор.Отбор.Помещение.установить(Выборка.Помещение);
			Набор.Отбор.ТочкаУчета.установить(Выборка.ТочкаУчета);
			Набор.Отбор.Шкала.установить(Выборка.Шкала);
			Набор.Отбор.ТарифнаяЗона.установить(Выборка.ТарифнаяЗона);
			Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
			Набор.Записать();
		КонецЕсли;
		
		ТекЧастныйСектор 						= Выборка.ЧастныйСектор;
		ТекСтроение								= Выборка.Строение;
		ТекПомещение  							= Выборка.Помещение;
		ТекКлючПомещения						= Выборка.КлючПомещения;
		ТекПрибор 								= Выборка.ПриборУчета;
		ТекШкала 								= Выборка.Шкала;
		ТекТарифнаяЗона 						= Выборка.ТарифнаяЗона;
		ТекРегистрируетОбъем					= Выборка.РегистрируетОбъем;
	КонецЦикла;
	
	Если НЕ ТекПомещение = Неопределено  тогда
		
		Если Не Отказ Тогда
			ПараметрыПроведений  		= Новый Структура("
			|Организация, ПериодНачисления,Район,ЧастныйСектор,Строение,Помещение,КлючПомещения,ПриборУчета,Шкала, ТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета,РегистрируетОбъем",
			Организация, ПериодНачисления,район,ТекЧастныйСектор,ТекСтроение,ТекПомещение,ТекКлючПомещения,ТекПрибор,ТекШкала,ТекТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета,ТекРегистрируетОбъем);
			ОтказПоТарифнойЗоне			= Ложь;
			ОтказПоТарифнойЗоне			= ПровестиПоказанияПриборовУчета(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления);
			
			Если ОтказПоТарифнойЗоне Тогда
				Отказ 					= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если не Отказ тогда
			// Если все выполнено тогда изменяем состояние в последовательности.
			НаборПоследовательности  			= РегистрыСведений.энргПоказанияПУПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.СостояниеПроведения.установить(ПроведенСНарушением);
			НаборПоследовательности.Отбор.ЧастныйСектор.установить(ТекЧастныйСектор);
			НаборПоследовательности.Отбор.Строение.установить(ТекСтроение);
			НаборПоследовательности.Отбор.Помещение.установить(ТекПомещение);
			НаборПоследовательности.Отбор.ПриборУчета.установить(ТекПрибор);
			НаборПоследовательности.Прочитать();
			ТаблицаНабора  						= НаборПоследовательности.Выгрузить();
			НаборПоследовательности.Очистить();
			НаборПоследовательности.Записать();
			
			ТаблицаНабора.ЗаполнитьЗначения(ПроведенВПоследовательности,"СостояниеПроведения");
			
			НаборПоследовательности  			= РегистрыСведений.энргПоказанияПУПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Загрузить(ТаблицаНабора);
			НаборПоследовательности.Записать(Ложь); 										
			ЗафиксироватьТранзакцию();
		иначе
			ОтменитьТранзакцию(); 			 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Восстановить Последовательность Показания ПУ МКД.
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//
Процедура ВосстановитьПоследовательностьПоказанияПУМКД(Организация, ПериодНачисления,Район,Строение=Неопределено) Экспорт 
		
	ГраницыПериода  							= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления);
	
	НачалоПериодаРасчета						= ГраницыПериода.НачалоОП;
	
	Отбор 										= Новый Структура;
	Отбор.Вставить("Организация",		Организация);
	Отбор.Вставить("ПериодНачисления",	ПериодНачисления);
	Отбор.Вставить("Район",				Район);	
	Отбор.Вставить("Строение",			Строение);
			
	Отказ 										= Ложь;
	
	МВТ  										= Новый МенеджерВременныхТаблиц;
	Результат  									= РезультатЗапросаПоказанияПУМКД(МВТ,Отбор,НачалоПериодаРасчета);
	
	ДанныеМаксимальногоПотребления 				= ДанныеМаксимальногоПотребления(НачалоПериодаРасчета);
	
	РезультатСреднийОбъем 						= РезультатСреднийОбъемПотребленияМКД(МВТ,Отбор);
	ВыборкаСреднийОбъем 						= РезультатСреднийОбъем.выбрать();
	
	ПроведенСНарушением 						= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	ПроведенВПоследовательности 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	ПредыдущиеМакс 								= 0;
	Выборка  									= Результат.выбрать();
	ТекМКД 										= Неопределено;
	ТекПрибор 									= Неопределено;
	ТекШкала		 							= Неопределено;
	ТекТарифнаяЗона 							= Неопределено;
	МассивДокументов							= Неопределено;
	НомерПозиции 								= Неопределено;
	ДанныеСреднегоОбъема 						= Неопределено;
	ОписаниеСтроки 								= Новый ФиксированнаяСтруктура("
	|ДокРегистратор,СостояниеПроведения,ПериодРегистрации,ДатаРегистратора,
	|СостояниеПоказаний,Показание,Переворот,МаксПоказания,ПериодМаксПоказаний,	 
	|РегистраторМаксПоказаний,ДатаРегистратораМаксимальных,БылПереворот,Разделитель,НомерСтрокиТЧ,
	|КоэффициентПУ,МаксимальноВозможныеПоказания,ВыводПрибораУчета,ИмяТабЧасти,КС,ТочкаУчета");
	
	Если Выборка.количество() > 0 тогда
		ВыборкаСреднийОбъем.Следующий();
		НачатьТранзакцию();
	КонецЕсли;
	
	СтруктураСреза  								= РегистрыСведений.энргПериодыПриемаПоказаний.ПолучитьПоследнее(ПериодНачисления, Новый Структура("Организация", Организация));
	ПоказанияС										= ?(не ЗначениеЗаполнено(СтруктураСреза.ДатаС),1,СтруктураСреза.ДатаС);
	ПоказанияПО 									= ?(не ЗначениеЗаполнено(СтруктураСреза.ДатаПо),31,СтруктураСреза.ДатаПо);
	
	Пока Выборка.следующий() цикл
		Если ТекМКД<> Выборка.МКД или ТекПрибор <> Выборка.ПриборУчета Или ТекШкала <> Выборка.Шкала или ТекТарифнаяЗона <> Выборка.ТарифнаяЗона тогда 			  			
			Если ТекМКД <> Неопределено тогда
				
				Если Не Отказ Тогда
					ПараметрыПроведений  			= Новый Структура("
					|Организация, ПериодНачисления,Район,МКД,ПриборУчета,Шкала, ТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета",
					Организация, ПериодНачисления,Район,ТекМКД,ТекПрибор,Текшкала,ТекТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета);
					ОтказПоТарифнойЗоне				= Ложь;
					ОтказПоТарифнойЗоне				= ПровестиПоказанияПриборовУчетаМКД(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления);
					
					Если ОтказПоТарифнойЗоне Тогда
						Отказ 						= Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если  ТекМКД<> Выборка.МКД или ТекПрибор <> Выборка.ПриборУчета тогда
					Если не Отказ Тогда
						// Если все выполнено тогда изменяем состояние в последовательности.
						НаборПоследовательности  	= РегистрыСведений.энргПоказанияПУПоследовательностьМКД.СоздатьНаборЗаписей();
						НаборПоследовательности.Отбор.Организация.установить(Организация);
						НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
						НаборПоследовательности.Отбор.Район.установить(Район);
						НаборПоследовательности.Отбор.СостояниеПроведения.установить(ПроведенСНарушением);
						НаборПоследовательности.Отбор.МКД.установить(ТекМКД);
						НаборПоследовательности.Отбор.ПриборУчета.установить(ТекПрибор);
						НаборПоследовательности.Прочитать();
						ТаблицаНабора  				= НаборПоследовательности.Выгрузить();
						НаборПоследовательности.Очистить();
						НаборПоследовательности.Записать();
						
						ТаблицаНабора.ЗаполнитьЗначения(ПроведенВПоследовательности,"СостояниеПроведения");
						
						НаборПоследовательности  	= РегистрыСведений.энргПоказанияПУПоследовательностьМКД.СоздатьНаборЗаписей();
						НаборПоследовательности.Загрузить(ТаблицаНабора);
						НаборПоследовательности.Записать(Ложь); 										
						ЗафиксироватьТранзакцию();
						НачатьТранзакцию();
						Отказ						= Ложь;
					иначе
						ОтменитьТранзакцию();
						НачатьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
				МассивДокументов.очистить();
			КонецЕсли;
			
			Если ТекМКД<> Выборка.МКД Тогда
				ДанныеСреднегоОбъема 				= ДанныеСреднегоОбъемаМКД(ВыборкаСреднийОбъем, Выборка.МКД);
			КонецЕсли;
			
			МассивДокументов						= Новый Массив;
			НомерПозиции 							= Выборка.НомерПозици+1;
		КонецЕсли; 	
		
		ДанныеСтроки 								= Новый Структура(ОписаниеСтроки);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки,Выборка);
		МассивДокументов.Добавить(ДанныеСтроки); 	
		
		// Очищаем данные
		Набор 										= РегистрыСведений.энргПредоставленныеПоказанияМКД.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.периодНачисления.установить(ПериодНачисления);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.МКД.установить(Выборка.МКД);
		Набор.Отбор.ПриборУчета.установить(Выборка.ПриборУчета);
		Набор.Отбор.Шкала.установить(Выборка.Шкала);
		Набор.Отбор.ТарифнаяЗона.установить(Выборка.ТарифнаяЗона);
		Набор.Записать();
		
		Набор 										= РегистрыСведений.энргРасчетСреднегоОбъемаМКД.СоздатьНаборЗаписей();
		Набор.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.МКД.установить(Выборка.МКД);
		Набор.Отбор.ТочкаУчета.установить(Выборка.ТочкаУчета);
		Набор.Отбор.Шкала.установить(Выборка.Шкала);
		Набор.Отбор.ТарифнаяЗона.установить(Выборка.ТарифнаяЗона);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
		Набор.Записать();
		
		ТекМКД  									= Выборка.МКД;
		ТекПрибор 									= Выборка.ПриборУчета;
		ТекШкала 									= Выборка.Шкала;
		ТекТарифнаяЗона 							= Выборка.ТарифнаяЗона;
	КонецЦикла;
	
	Если ТекМКД<> Неопределено  тогда
		
		Если Не Отказ Тогда
			ПараметрыПроведений  		= Новый Структура("
			|Организация, ПериодНачисления,Район,МКД,ПриборУчета,Шкала,ТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета",
			Организация, ПериодНачисления,Район,ТекМКД,ТекПрибор,ТекШкала,ТекТарифнаяЗона,НомерПозиции,ПоказанияС,ПоказанияПО,НачалоПериодаРасчета);
			ОтказПоТарифнойЗоне			= Ложь;
			ОтказПоТарифнойЗоне			= ПровестиПоказанияПриборовУчетаМКД(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления);
			
			Если ОтказПоТарифнойЗоне Тогда
				Отказ 					= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если не Отказ тогда
			// Если все выполнено тогда изменяем состояние в последовательности.
			НаборПоследовательности  			= РегистрыСведений.энргПоказанияПУПоследовательностьМКД.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.СостояниеПроведения.установить(ПроведенСНарушением);
			НаборПоследовательности.Отбор.МКД.установить(ТекМКД);
			НаборПоследовательности.Отбор.ПриборУчета.установить(ТекПрибор);
			НаборПоследовательности.Прочитать();
			ТаблицаНабора  						= НаборПоследовательности.Выгрузить();
			НаборПоследовательности.Очистить();
			НаборПоследовательности.Записать();
			
			ТаблицаНабора.ЗаполнитьЗначения(ПроведенВПоследовательности,"СостояниеПроведения");
			
			НаборПоследовательности  			= РегистрыСведений.энргПоказанияПУПоследовательностьМКД.СоздатьНаборЗаписей();
			НаборПоследовательности.Загрузить(ТаблицаНабора);
			НаборПоследовательности.Записать(Ложь); 										
			ЗафиксироватьТранзакцию();
		иначе
			ОтменитьТранзакцию(); 			 
		КонецЕсли; 
	КонецЕсли;
	
	
	
КонецПроцедуры

// Восстановить Последовательность Взаиморасчетов.
//
// Параметры:
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   Абонент				- Абонент, по которому происходит восстановление последовательности.
//
Процедура ВосстановитьПоследовательностьВзаиморасчеты(Организация, ПериодНачисления,район,МКД=Неопределено,Абонент=Неопределено) Экспорт 
	перем ТекАбонент,ТекМКД,Авансы,МассивДокументов,ДанныеЗадолженности;
	
	
	ДанныеСреза 												= РегистрыСведений.энргСпособыРаспределенияОплаты.ПолучитьПоследнее(ПериодНачисления);
	СпособРаспределенияОплаты 									= ДанныеСреза.СпособРаспределения;
	
	Если не ЗначениеЗаполнено(СпособРаспределенияОплаты) тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены настройки распределения оплаты, операция не может быть выполнена");
		Возврат;
	КонецЕсли;
	
	ВыполнитьОтложененоеПроведение(Организация, ПериодНачисления,район,МКД,Абонент);
	
	ГраницыПериода  									= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления);
	НачалоПериодаРасчета								= ГраницыПериода.НачалоОП;
	КонецПериодаРасчета  								= ГраницыПериода.ЗавершениеОП-1;
	
	ПроведенВПоследовательности 						= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	ПроведенСНарушением 								= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	
	МВТ 												= ЗаполнитьМВТВзаиморасчеты(Организация, ПериодНачисления,район,МКД,Абонент);
	
	РезультатЗадолженность  							= РезультатЗадолженность(Организация, ПериодНачисления,район,МКД,Абонент,МВТ,НачалоПериодаРасчета,КонецПериодаРасчета);
	
	РезультатДокументыДляПроведения  					= РезультатДокументыДляПроведения(Организация, ПериодНачисления,район,МКД,Абонент,МВТ);
	
	РезультатДанныеНачислений 							= РезультатДанныеНачислений(МВТ);
	ВыборкаДанныеНачислений 							= РезультатДанныеНачислений.выбрать();
	
	РезультатАванс										= РезультатАвансыНаГраницу(Организация, ПериодНачисления,район,МКД,Абонент,МВТ,НачалоПериодаРасчета,КонецПериодаРасчета);
	ВыборкаАвансы  										= РезультатАванс.выбрать();
	
	ВыборкаДокументы  									= РезультатДокументыДляПроведения.выбрать();
	ВыборкаЗадолженность  								= РезультатЗадолженность.выбрать();
	
	НастройкиПорядкаПогашения 							= НастройкиПорядкаПогашения();
	
	ПустойРезультатНачисления 							= Истина;
	Если ВыборкаДокументы.количество() > 0 тогда
		НачатьТранзакцию();
		ПустойРезультатЗадолженность 					= ВыборкаЗадолженность.следующий();
		ПустойРезультатАвансы 							= ВыборкаАвансы.следующий();
		ПустойРезультатНачисления 						= ВыборкаДанныеНачислений.следующий();
	КонецЕсли;	
	СуммаАванса 										= 0;
	
	ОписаниеСтроки  									= Новый ФиксированнаяСтруктура("
	|МКД,Абонент,СостояниеПроведения,ДатаРегистратора,ДокРегистратор,Сумма,ЭтоОплата,ПериодОплатыНачало,ПериодОплатыКонец,Услуга,Кассир,ИсточникПоступления,ПериодВзаиморасчетов,Поставщик");
	НаборыПоТипам 										= НаборыПоТипам();	
	
	ПараметрыПроведения 								= Новый Структура;
	ПараметрыПроведения.Вставить("Организация",					Организация);
	ПараметрыПроведения.Вставить("ПериодНачисления",			ПериодНачисления);
	ПараметрыПроведения.Вставить("район",						Район);
	ПараметрыПроведения.Вставить("МассивДокументов",			МассивДокументов);
	ПараметрыПроведения.Вставить("Авансы",						Авансы);
	ПараметрыПроведения.Вставить("СуммаАванса",					СуммаАванса);
	ПараметрыПроведения.Вставить("ДанныеЗадолженности",			ДанныеЗадолженности);
	ПараметрыПроведения.Вставить("СпособРаспределенияОплаты",	СпособРаспределенияОплаты);
	ПараметрыПроведения.Вставить("ДанныеНачислений",			Новый Соответствие);
	ПараметрыПроведения.Вставить("НаборыПоТипам",				НаборыПоТипам);
	ПараметрыПроведения.Вставить("Сортировка", 					"ПорядокПериодРасчета,ПериодРасчета,ПорядокПогашенияУслуги,Услуга");
	ПараметрыПроведения.Вставить("НастройкиПорядкаПогашения", 	НастройкиПорядкаПогашения);
	
	МассивДокументовНачисления 							= Новый Соответствие;
	
	Пока ВыборкаДокументы.следующий() цикл 					
		
		Если ТекАбонент <> ВыборкаДокументы.Абонент тогда	
			
			Если ТекАбонент <> Неопределено тогда
				
				ДанныеНачислений 						= ДанныеНачислений(ТекАбонент,ВыборкаДанныеНачислений);
				ДанныеАвансы 							= АвансНаГраницу(ТекАбонент,ВыборкаАвансы);			
				ДанныеЗадолженности  					= ЗадолженностьНаГраницу(ТекАбонент,ВыборкаЗадолженность);				
				
				ПараметрыПроведения.МассивДокументов	= МассивДокументов;
				ПараметрыПроведения.Авансы				= ДанныеАвансы.Авансы;
				ПараметрыПроведения.СуммаАванса			= ДанныеАвансы.СуммаАванса;
				ПараметрыПроведения.ДанныеЗадолженности	= ДанныеЗадолженности;
				ПараметрыПроведения.ДанныеНачислений 	= ДанныеНачислений;
				
				Отказ  									= ПровестиВзаиморасчеты(ПараметрыПроведения,МассивДокументовНачисления);
				
				Если не Отказ и не ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") 
					и ИзменитьСостояниеПоследовательности(Организация, ПериодНачисления,район,ПроведенСНарушением,ПроведенВПоследовательности,ТекМКД,ТекАбонент) тогда	
					ЗафиксироватьТранзакцию();
					НачатьТранзакцию();
				ИначеЕсли не ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") тогда
					ОтменитьТранзакцию();
					НачатьТранзакцию();
				КонецЕсли;
				
				Если ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") Тогда
					ПараметрыПроведения.Удалить("ЕстьДокументыНачисления");
				КонецЕсли;				
			КонецЕсли;
			
			Если ТекМКД <> ВыборкаДокументы.МКД и МассивДокументовНачисления.Количество() > 0 тогда
				Если ЗаписатьНаборыДокументовНачисления(Организация, ПериодНачисления,район,ТекМКД,ПроведенСНарушением,ПроведенВПоследовательности,МассивДокументовНачисления,Абонент) тогда
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				НачатьТранзакцию();
				МассивДокументовНачисления 				= Новый Соответствие;				
			КонецЕсли; 	
			
			МассивДокументов  							= Новый Массив;			
		КонецЕсли;  		
		ДанныеСтроки  									= Новый Структура(ОписаниеСтроки);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки,ВыборкаДокументы);
		МассивДокументов.Добавить(ДанныеСтроки);		
		ТекАбонент 										= ВыборкаДокументы.Абонент;
		ТекМКД 											= ВыборкаДокументы.МКД; 		
	КонецЦикла;
	
	Если ТекАбонент <> Неопределено тогда
		
		ДанныеНачислений 								= ДанныеНачислений(ТекАбонент,ВыборкаДанныеНачислений);
		ДанныеАвансы 									= АвансНаГраницу(ТекАбонент,ВыборкаАвансы);				
		ДанныеЗадолженности  							= ЗадолженностьНаГраницу(ТекАбонент,ВыборкаЗадолженность);
		
		ПараметрыПроведения.МассивДокументов			= МассивДокументов;
		ПараметрыПроведения.Авансы						= ДанныеАвансы.Авансы;
		ПараметрыПроведения.СуммаАванса 				= ДанныеАвансы.СуммаАванса;
		ПараметрыПроведения.ДанныеЗадолженности			= ДанныеЗадолженности;
		ПараметрыПроведения.ДанныеНачислений 			= ДанныеНачислений;
		
		Отказ  											= ПровестиВзаиморасчеты(ПараметрыПроведения,МассивДокументовНачисления);
		
		Если не Отказ и не ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") 
			и ИзменитьСостояниеПоследовательности(Организация, ПериодНачисления,район,ПроведенСНарушением,ПроведенВПоследовательности,ТекМКД,ТекАбонент) тогда	
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		ИначеЕсли не ПараметрыПроведения.Свойство("ЕстьДокументыНачисления") тогда  
			ОтменитьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли; 		
		
		Если МассивДокументовНачисления.Количество() > 0 тогда
			Если ЗаписатьНаборыДокументовНачисления(Организация, ПериодНачисления,район,ТекМКД,ПроведенСНарушением,ПроведенВПоследовательности,МассивДокументовНачисления,Абонент) тогда
				ЗафиксироватьТранзакцию();
			иначе
				ОтменитьТранзакцию();
			КонецЕсли;							
		КонецЕсли; 		 		
	КонецЕсли;      
	
КонецПроцедуры

// Сбросить Состояние Последовательности.
//
// Параметры:
//   ИмяПоследовательности	- Имя последовательности, по которой происходит сброс состояния.
//   ПериодНачисления 		- Период начисления, по которому происходит восстановление последовательности.
//   Район					- район, по которому происходит восстановление последовательности.
//   МКД					- МКД, по которому происходит восстановление последовательности.
//   Абонент				- Абонент, по которому происходит восстановление последовательности.
//
Процедура СброситьСостояниеПоследовательности(ИмяПоследовательности,Организация,ПериодНачисления,Район,Строение=Неопределено,Помещение=Неопределено) Экспорт 
	
	ПроведенСНарушением 				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности;
	ПроведенВПоследовательности  		= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	
	Набор 								= РегистрыСведений[ИмяПоследовательности].СоздатьНаборЗаписей();
	Набор.Отбор.Организация.установить(Организация);
	Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
	Набор.Отбор.Район.установить(Район);
	Набор.Отбор.СостояниеПроведения.установить(ПроведенВПоследовательности);
	
	Если ИмяПоследовательности = "энргВзаиморасчетыПоследовательность" Тогда
		Набор.Отбор.МКД.установить(Строение);
		Если НЕ Помещение = Неопределено тогда
			Набор.Отбор.Абонент.установить(Помещение);
		КонецЕсли;
	ИначеЕсли НЕ Строение = Неопределено Тогда
		ЧастныйСектор 					= НЕ ЗначениеЗаполнено(Строение); 
		Набор.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
		Если Не ЧастныйСектор Тогда
			Набор.Отбор.Строение.установить(Строение); 
			Если НЕ Помещение = Неопределено тогда
				Набор.Отбор.Помещение.установить(Помещение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	 
	
	Набор.Прочитать();
	ТаблицаНабора 						= Набор.Выгрузить();
	Набор.Очистить();
	Набор.Записать();
	ТаблицаНабора.ЗаполнитьЗначения(ПроведенСНарушением,"СостояниеПроведения");
	Набор 								= РегистрыСведений[ИмяПоследовательности].СоздатьНаборЗаписей();
	Набор.Загрузить(ТаблицаНабора);
	Набор.Записать(Ложь); 
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановитьПоследовательностьСтабильныеПериоды

Функция ПровестиПоСтабильнымПериодам(Документы,НачалоПериодаРасчета, Ошибки)
	
	для Каждого ОписаниеДокумента из Документы цикл
		Район  										= ОписаниеДокумента.район;
		ЧастныйСектор								= ОписаниеДокумента.ЧастныйСектор;
		Строение  									= ОписаниеДокумента.Строение;
		Помещение  									= ОписаниеДокумента.Помещение;
		МоментВремени  								= ОписаниеДокумента.МоментВремени;
		Документ 									= ОписаниеДокумента.Документ;		
		Дата 										= ОписаниеДокумента.Дата;
		ПериодРегистрации							= ОписаниеДокумента.ПериодРегистрации;
		Организация 								= ОписаниеДокумента.Организация;
		ПомещениеСРазделеннымиЛС					= ОписаниеДокумента.ПомещениеСРазделеннымиЛС;

		НаборСтабильныеПериоды  					= РегистрыСведений.энргСтабильныеПериоды.СоздатьНаборЗаписей();
		НаборСтабильныеПериодыШкалы					= РегистрыСведений.энргСтабильныеПериодыШкалы.СоздатьНаборЗаписей();
		НаборСтабильныеПериодыИзмерителиНаправлений = РегистрыСведений.энргСтабильныеПериодыИзмерителиНаправлений.СоздатьНаборЗаписей();
		НаборПоследнихНомеров           			= РегистрыСведений.энргНомераСтрокСтабильногоПериода.СоздатьНаборЗаписей();
		

		ПараметрыЗапроса							= Новый Структура("
		|Организация,Район,ЧастныйСектор,Строение,Помещение,ПериодРегистрации",
		Организация,Район,ЧастныйСектор,Строение,Помещение,Макс(ПериодРегистрации,НачалоПериодаРасчета));
		Параметры 									= Новый Структура("ПараметрыЗапроса,Отказ,МоментВремени,РазрешенПустойНабор,
		|ссылка,ДатаДок,Организация, ПериодНачисления, ПомещениеСРазделеннымиЛС,
		|НаборСтабильныеПериоды,НаборСтабильныеПериодыШкалы,НаборСтабильныеПериодыИзмерителиНаправлений,НаборПоследнихНомеров",
		ПараметрыЗапроса,Ложь,МоментВремени,Ложь,
		Документ,Дата,ОписаниеДокумента.Организация, ОписаниеДокумента.ПериодНачисления, ПомещениеСРазделеннымиЛС,
		НаборСтабильныеПериоды,НаборСтабильныеПериодыШкалы,НаборСтабильныеПериодыИзмерителиНаправлений,НаборПоследнихНомеров);
		
		Попытка
			энргРаботаСПериодомДействия.ПровестиПоСтабильнымПериодам(Документ,Параметры);
		Исключение
			ИнформацияОбОшибке  	= ИнформацияОбОшибке();
			Ошибки 					= ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"");
			ТекстСообщения 			= НСтр("ru = 'Не удалось восстановить последовательности документов по помещению %1 - %2: %3'");
			Ошибки 					= Ошибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Строение,Помещение,Документ);
			Ошибки 					= Ошибки + Символы.ПС + "По причине: " + ИнформацияОбОшибке.Причина.Описание;			
			Возврат истина;
		КонецПопытки;
		
		Если не Параметры.РазрешенПустойНабор и НаборСтабильныеПериоды.Количество() =0 тогда
			Ошибки 					= ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"");
			ТекстСообщения 			= НСтр("ru = 'Не удалось восстановить последовательности документов по помещению %1 - %2: %3 - причина: Обнаружен пустой набор записей'");
			Ошибки 					= Ошибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Строение,Помещение,Документ);
			Возврат истина;
		КонецЕсли; 		
		
		Попытка		
			НаборПоследнихНомеров.Записать(Ложь);
			НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
			НаборСтабильныеПериоды.Записать(Ложь);
			
			НаборСтабильныеПериодыШкалы.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
			НаборСтабильныеПериодыШкалы.Записать(Ложь);
			
			НаборСтабильныеПериодыИзмерителиНаправлений.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
			НаборСтабильныеПериодыИзмерителиНаправлений.Записать(Ложь);			
		Исключение
			ИнформацияОбОшибке  	= ИнформацияОбОшибке();
			Ошибки 					= ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"");
			ТекстСообщения 			= НСтр("ru = 'Не удалось восстановить последовательности документов по помещению %1 - %2: %3'");
			Ошибки 					= Ошибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Строение,Помещение,Документ);
			Ошибки 					= Ошибки + Символы.ПС + "По причине: " + ИнформацияОбОшибке.Причина.Описание; 			
			Возврат истина;
		КонецПопытки;				
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция РезультатЗапросаСтабильныеПериоды(Отбор) 
	Запрос  = Новый Запрос;
	Текст =
	"ВЫБРАТЬ
	|	энргСтабильныеПериодыПоследовательность.Организация КАК Организация,
	|	энргСтабильныеПериодыПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргСтабильныеПериодыПоследовательность.Район КАК Район,
	|	энргСтабильныеПериодыПоследовательность.ЧастныйСектор КАК ЧастныйСектор,
	|	энргСтабильныеПериодыПоследовательность.Строение КАК Строение,
	|	энргСтабильныеПериодыПоследовательность.Помещение КАК Помещение,
	|	МИНИМУМ(энргСтабильныеПериодыПоследовательность.ПериодРегистрации) КАК ПериодРегистрации
	|ПОМЕСТИТЬ МинПериодРегистрации
	|ИЗ
	|	РегистрСведений.энргСтабильныеПериодыПоследовательность КАК энргСтабильныеПериодыПоследовательность
	|ГДЕ
	|	энргСтабильныеПериодыПоследовательность.Организация = &Организация
	|	И энргСтабильныеПериодыПоследовательность.ПериодНачисления = &ПериодНачисления
	|	И энргСтабильныеПериодыПоследовательность.Район = &Район
	|	И энргСтабильныеПериодыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	|	И энргСтабильныеПериодыПоследовательность.ЧастныйСектор = &ЧастныйСектор
	|	И энргСтабильныеПериодыПоследовательность.Строение = &Строение
	|	И энргСтабильныеПериодыПоследовательность.Помещение = &Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	энргСтабильныеПериодыПоследовательность.Организация,
	|	энргСтабильныеПериодыПоследовательность.ПериодНачисления,
	|	энргСтабильныеПериодыПоследовательность.Район,
	|	энргСтабильныеПериодыПоследовательность.ЧастныйСектор,
	|	энргСтабильныеПериодыПоследовательность.Строение,
	|	энргСтабильныеПериодыПоследовательность.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргСтабильныеПериодыПоследовательность.Организация КАК Организация,
	|	энргСтабильныеПериодыПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргСтабильныеПериодыПоследовательность.Район КАК Район,
	|	энргСтабильныеПериодыПоследовательность.ЧастныйСектор КАК ЧастныйСектор,
	|	энргСтабильныеПериодыПоследовательность.Строение КАК Строение,
	|	энргСтабильныеПериодыПоследовательность.Помещение КАК Помещение,
	|	энргСтабильныеПериодыПоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	|	МИНИМУМ(энргСтабильныеПериодыПоследовательность.ДатаРегистратора) КАК ДатаРегистратора
	|ПОМЕСТИТЬ МинимальныйПериод
	|ИЗ
	|	МинПериодРегистрации КАК МинПериодРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыПоследовательность КАК энргСтабильныеПериодыПоследовательность
	|		ПО МинПериодРегистрации.Организация = энргСтабильныеПериодыПоследовательность.Организация
	|			И МинПериодРегистрации.ПериодНачисления = энргСтабильныеПериодыПоследовательность.ПериодНачисления
	|			И МинПериодРегистрации.Район = энргСтабильныеПериодыПоследовательность.Район
	|			И МинПериодРегистрации.ЧастныйСектор = энргСтабильныеПериодыПоследовательность.ЧастныйСектор
	|			И МинПериодРегистрации.Строение = энргСтабильныеПериодыПоследовательность.Строение
	|			И МинПериодРегистрации.Помещение = энргСтабильныеПериодыПоследовательность.Помещение
	|			И МинПериодРегистрации.ПериодРегистрации = энргСтабильныеПериодыПоследовательность.ПериодРегистрации
	|			И (энргСтабильныеПериодыПоследовательность.Организация = &Организация)
	|			И (энргСтабильныеПериодыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргСтабильныеПериодыПоследовательность.Район = &Район)
	|			И (энргСтабильныеПериодыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И (энргСтабильныеПериодыПоследовательность.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргСтабильныеПериодыПоследовательность.Строение = &Строение)
	|			И (энргСтабильныеПериодыПоследовательность.Помещение = &Помещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргСтабильныеПериодыПоследовательность.Организация,
	|	энргСтабильныеПериодыПоследовательность.ПериодНачисления,
	|	энргСтабильныеПериодыПоследовательность.Район,
	|	энргСтабильныеПериодыПоследовательность.ЧастныйСектор,
	|	энргСтабильныеПериодыПоследовательность.Строение,
	|	энргСтабильныеПериодыПоследовательность.Помещение,
	|	энргСтабильныеПериодыПоследовательность.ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныйПериод.Организация КАК Организация,
	|	МинимальныйПериод.ПериодНачисления КАК ПериодНачисления,
	|	МинимальныйПериод.Район КАК Район,
	|	МинимальныйПериод.ЧастныйСектор КАК ЧастныйСектор,
	|	МинимальныйПериод.Строение КАК Строение,
	|	МинимальныйПериод.Помещение КАК Помещение,
	|	МинимальныйПериод.ПериодРегистрации КАК ПериодРегистрации,
	|	МинимальныйПериод.ДатаРегистратора КАК ДатаРегистратора,
	|	МИНИМУМ(энргСтабильныеПериодыПоследовательность.ДокРегистратор) КАК ДокРегистратор
	|ПОМЕСТИТЬ МинимальныйРегистратор
	|ИЗ
	|	МинимальныйПериод КАК МинимальныйПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыПоследовательность КАК энргСтабильныеПериодыПоследовательность
	|		ПО МинимальныйПериод.Организация = энргСтабильныеПериодыПоследовательность.Организация
	|			И МинимальныйПериод.ПериодНачисления = энргСтабильныеПериодыПоследовательность.ПериодНачисления
	|			И МинимальныйПериод.Район = энргСтабильныеПериодыПоследовательность.Район
	|			И МинимальныйПериод.ЧастныйСектор = энргСтабильныеПериодыПоследовательность.ЧастныйСектор
	|			И МинимальныйПериод.Строение = энргСтабильныеПериодыПоследовательность.Строение
	|			И МинимальныйПериод.Помещение = энргСтабильныеПериодыПоследовательность.Помещение
	|			И МинимальныйПериод.ПериодРегистрации = энргСтабильныеПериодыПоследовательность.ПериодРегистрации
	|			И (энргСтабильныеПериодыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимальныйПериод.ДатаРегистратора = энргСтабильныеПериодыПоследовательность.ДатаРегистратора
	|			И (энргСтабильныеПериодыПоследовательность.Организация = &Организация)
	|			И (энргСтабильныеПериодыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргСтабильныеПериодыПоследовательность.Район = &Район)
	|			И (энргСтабильныеПериодыПоследовательность.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргСтабильныеПериодыПоследовательность.Строение = &Строение)
	|			И (энргСтабильныеПериодыПоследовательность.Помещение = &Помещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимальныйПериод.Организация,
	|	МинимальныйПериод.ПериодНачисления,
	|	МинимальныйПериод.Район,
	|	МинимальныйПериод.ЧастныйСектор,
	|	МинимальныйПериод.Строение,
	|	МинимальныйПериод.Помещение,
	|	МинимальныйПериод.ПериодРегистрации,
	|	МинимальныйПериод.ДатаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныйРегистратор.Организация КАК Организация,
	|	МинимальныйРегистратор.ПериодНачисления КАК ПериодНачисления,
	|	МинимальныйРегистратор.Район КАК Район,
	|	МинимальныйРегистратор.ЧастныйСектор КАК ЧастныйСектор,
	|	МинимальныйРегистратор.Строение КАК Строение,
	|	МинимальныйРегистратор.Помещение КАК Помещение,
	|	энргСтабильныеПериодыПоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	|	энргСтабильныеПериодыПоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	|	энргСтабильныеПериодыПоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	|	энргСтабильныеПериодыПоследовательность.ДокРегистратор КАК ДокРегистратор
	|ПОМЕСТИТЬ СтабильныеПериоды
	|ИЗ
	|	МинимальныйРегистратор КАК МинимальныйРегистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыПоследовательность КАК энргСтабильныеПериодыПоследовательность
	|		ПО МинимальныйРегистратор.Организация = энргСтабильныеПериодыПоследовательность.Организация
	|			И МинимальныйРегистратор.ПериодНачисления = энргСтабильныеПериодыПоследовательность.ПериодНачисления
	|			И МинимальныйРегистратор.Район = энргСтабильныеПериодыПоследовательность.Район
	|			И МинимальныйРегистратор.ЧастныйСектор = энргСтабильныеПериодыПоследовательность.ЧастныйСектор
	|			И МинимальныйРегистратор.Строение = энргСтабильныеПериодыПоследовательность.Строение
	|			И МинимальныйРегистратор.Помещение = энргСтабильныеПериодыПоследовательность.Помещение
	|			И (ВЫБОР
	|				КОГДА МинимальныйРегистратор.ПериодРегистрации < энргСтабильныеПериодыПоследовательность.ПериодРегистрации
	|					ТОГДА ИСТИНА
	|				КОГДА МинимальныйРегистратор.ПериодРегистрации = энргСтабильныеПериодыПоследовательность.ПериодРегистрации
	|					ТОГДА ВЫБОР
	|							КОГДА МинимальныйРегистратор.ДатаРегистратора < энргСтабильныеПериодыПоследовательность.ДатаРегистратора
	|								ТОГДА ИСТИНА
	|							КОГДА МинимальныйРегистратор.ДатаРегистратора = энргСтабильныеПериодыПоследовательность.ДатаРегистратора
	|								ТОГДА МинимальныйРегистратор.ДокРегистратор <= энргСтабильныеПериодыПоследовательность.ДокРегистратор
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (энргСтабильныеПериодыПоследовательность.Организация = &Организация)
	|			И (энргСтабильныеПериодыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргСтабильныеПериодыПоследовательность.Район = &Район)
	|			И (энргСтабильныеПериодыПоследовательность.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргСтабильныеПериодыПоследовательность.Строение = &Строение)
	|			И (энргСтабильныеПериодыПоследовательность.Помещение = &Помещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтабильныеПериоды.Организация КАК Организация,
	|	СтабильныеПериоды.ПериодНачисления КАК ПериодНачисления,
	|	СтабильныеПериоды.Район КАК Район,
	|	СтабильныеПериоды.ЧастныйСектор КАК ЧастныйСектор,
	|	СтабильныеПериоды.Строение КАК Строение,
	|	СтабильныеПериоды.Помещение КАК Помещение
	|ПОМЕСТИТЬ ПомещенияСРазделеннымиЛС
	|ИЗ
	|	СтабильныеПериоды КАК СтабильныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.энргПомещения КАК энргПомещения
	|		ПО СтабильныеПериоды.Помещение = энргПомещения.Родитель
	|			И (энргПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.энргТипыПомещений.Комната))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтабильныеПериоды.Организация КАК Организация,
	|	СтабильныеПериоды.ПериодНачисления КАК ПериодНачисления,
	|	СтабильныеПериоды.Район КАК Район,
	|	СтабильныеПериоды.ЧастныйСектор КАК ЧастныйСектор,
	|	СтабильныеПериоды.Строение КАК Строение,
	|	СтабильныеПериоды.Помещение КАК Помещение,
	|	СтабильныеПериоды.ПериодРегистрации КАК ПериодРегистрации,
	|	СтабильныеПериоды.СостояниеПроведения КАК СостояниеПроведения,
	|	СтабильныеПериоды.ДатаРегистратора КАК ДатаРегистратора,
	|	СтабильныеПериоды.ДокРегистратор КАК ДокРегистратор,
	|	ВЫБОР
	|		КОГДА ПомещенияСРазделеннымиЛС.Помещение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПомещениеСРазделеннымиЛС
	|ИЗ
	|	СтабильныеПериоды КАК СтабильныеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПомещенияСРазделеннымиЛС КАК ПомещенияСРазделеннымиЛС
	|		ПО СтабильныеПериоды.Организация = ПомещенияСРазделеннымиЛС.Организация
	|			И СтабильныеПериоды.ПериодНачисления = ПомещенияСРазделеннымиЛС.ПериодНачисления
	|			И СтабильныеПериоды.Район = ПомещенияСРазделеннымиЛС.Район
	|			И СтабильныеПериоды.ЧастныйСектор = ПомещенияСРазделеннымиЛС.ЧастныйСектор
	|			И СтабильныеПериоды.Строение = ПомещенияСРазделеннымиЛС.Строение
	|			И СтабильныеПериоды.Помещение = ПомещенияСРазделеннымиЛС.Помещение";   	       
	
	Если Отбор.Строение = Неопределено тогда
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыПоследовательность.ЧастныйСектор = &ЧастныйСектор)","");
		Текст 		= СтрЗаменить(Текст,"И энргСтабильныеПериодыПоследовательность.ЧастныйСектор = &ЧастныйСектор","");
		
		Текст 		= СтрЗаменить(Текст,"И энргСтабильныеПериодыПоследовательность.Строение = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыПоследовательность.Строение = &Строение)","");		
		
		Текст		= СтрЗаменить(Текст,"И энргСтабильныеПериодыПоследовательность.Помещение = &Помещение","");
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыПоследовательность.Помещение = &Помещение)","");
	ИначеЕсли НЕ ЗначениеЗаполнено(Отбор.Строение) Тогда 
		Текст 		= СтрЗаменить(Текст,"И энргСтабильныеПериодыПоследовательность.Строение = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыПоследовательность.Строение = &Строение)","");		
		
		Текст		= СтрЗаменить(Текст,"И энргСтабильныеПериодыПоследовательность.Помещение = &Помещение","");
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыПоследовательность.Помещение = &Помещение)","");
	ИначеЕсли Отбор.Помещение = Неопределено Тогда
		Текст		= СтрЗаменить(Текст,"И энргСтабильныеПериодыПоследовательность.Помещение = &Помещение","");
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыПоследовательность.Помещение = &Помещение)","");
	КонецЕсли;

	Запрос.Текст 	= Текст;
	Запрос.УстановитьПараметр("Район",						Отбор.район);
	Запрос.УстановитьПараметр("Организация",				Отбор.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",			Отбор.ПериодНачисления);
	ЕСли НЕ Отбор.Строение = Неопределено и НЕ ЗначениеЗаполнено(Отбор.Строение) Тогда
		Запрос.УстановитьПараметр("ЧастныйСектор",	Истина);		
	ИначеЕсли НЕ Отбор.Строение = Неопределено Тогда 
		Запрос.УстановитьПараметр("ЧастныйСектор",	Ложь);
		Если ЗначениеЗаполнено(Отбор.Строение) Тогда
			Запрос.УстановитьПараметр("Строение",			Отбор.Строение);
			Если НЕ Отбор.Помещение = Неопределено Тогда
				Запрос.УстановитьПараметр("Помещение",		Отбор.Помещение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ВосстановитьПоследовательностьСтабильныеПериодыМКД

Функция ПровестиПоСтабильнымПериодамМКД(Документы,Ошибки,НачалоПериодаРасчета)
	
	Ошибки  									= "";
	
	для Каждого ОписаниеДокумента из Документы цикл
		Район  									= ОписаниеДокумента.район;
		МКД 									= ОписаниеДокумента.МКД;
		Организация 							= ОписаниеДокумента.Организация;
		МоментВремени  							= ОписаниеДокумента.МоментВремени;
		Документ 								= ОписаниеДокумента.Документ;		
		Дата 									= ОписаниеДокумента.Дата;
		ПериодРегистрации						= ОписаниеДокумента.ПериодРегистрации;
		
		НаборСтабильныеПериоды  				= РегистрыСведений.энргСтабильныеПериодыМКД.СоздатьНаборЗаписей();
		НаборСтабильныеПериодыШкалы    			= РегистрыСведений.энргСтабильныеПериодыМКДШкалы.СоздатьНаборЗаписей();
		НаборСтабильныеПериодыСоставУзла    	= РегистрыСведений.энргСтабильныеПериодыМКДСоставУзловУчета.СоздатьНаборЗаписей();
		
		НаборПоследнихНомеров           		= РегистрыСведений.энргНомераСтрокСтабильногоПериодаМКД.СоздатьНаборЗаписей();
				
		ПараметрыЗапроса						= Новый Структура("Организация,Район,МКД,ПериодРегистрации",Организация, Район,МКД,Макс(ПериодРегистрации,НачалоПериодаРасчета));
		Параметры 								= Новый Структура("ПараметрыЗапроса,Отказ,МоментВремени,РазрешенПустойНабор,
		|ссылка,ДатаДок,ПериодНачисления,
		|НаборСтабильныеПериоды,НаборСтабильныеПериодыШкалы,НаборСтабильныеПериодыСоставУзла,НаборПоследнихНомеров",
		ПараметрыЗапроса,Ложь,МоментВремени,Ложь,
		Документ,Дата, ОписаниеДокумента.ПериодНачисления,
		НаборСтабильныеПериоды,НаборСтабильныеПериодыШкалы,НаборСтабильныеПериодыСоставУзла,НаборПоследнихНомеров);
		
		энргРаботаСПериодомДействия.ПровестиПоСтабильнымПериодамМКД(Документ,Параметры);
		
		Если не Параметры.РазрешенПустойНабор и НаборСтабильныеПериоды.Количество() =0 тогда
			Ошибки  							= Ошибки + ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"") + "Не удалось восставновить последовательности документов по мкд " + МКД +": " + Документ;
			Прервать;
		КонецЕсли; 		
		
		Попытка		
			НаборПоследнихНомеров.Записать(Ложь);
			НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
			НаборСтабильныеПериодыШкалы.Записать(Ложь);
			НаборСтабильныеПериодыСоставУзла.Записать(Ложь);
			НаборСтабильныеПериоды.Записать(Ложь);			
		Исключение
			Представление  						= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Ошибки  							= Ошибки + ?(НЕ ПустаяСтрока(Ошибки),Символы.ПС,"") + Представление;
			Прервать;
		КонецПопытки;				
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

Функция РезультатЗапросаСтабильныеПериодыМКД(Отбор) 
	
	Текст 	=
	"ВЫБРАТЬ
	|	энргСтабильныеПериодыМКДПоследовательность.Организация,
	|	энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления,
	|	энргСтабильныеПериодыМКДПоследовательность.Район,
	|	энргСтабильныеПериодыМКДПоследовательность.МКД КАК МКД,
	|	МИНИМУМ(энргСтабильныеПериодыМКДПоследовательность.ПериодРегистрации) КАК ПериодРегистрации
	|ПОМЕСТИТЬ МинПериодРегистрации
	|ИЗ
	|	РегистрСведений.энргСтабильныеПериодыМКДПоследовательность КАК энргСтабильныеПериодыМКДПоследовательность
	|ГДЕ
	|	энргСтабильныеПериодыМКДПоследовательность.Организация = &Организация
	|	И энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления = &ПериодНачисления
	|	И энргСтабильныеПериодыМКДПоследовательность.Район = &Район
	|	И энргСтабильныеПериодыМКДПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	|	И энргСтабильныеПериодыМКДПоследовательность.МКД = &МКД
	|
	|СГРУППИРОВАТЬ ПО
	|	энргСтабильныеПериодыМКДПоследовательность.Организация,
	|	энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления,
	|	энргСтабильныеПериодыМКДПоследовательность.Район,
	|	энргСтабильныеПериодыМКДПоследовательность.МКД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргСтабильныеПериодыМКДПоследовательность.Организация,
	|	энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления,
	|	энргСтабильныеПериодыМКДПоследовательность.Район,
	|	энргСтабильныеПериодыМКДПоследовательность.МКД КАК МКД,
	|	энргСтабильныеПериодыМКДПоследовательность.ПериодРегистрации,
	|	МИНИМУМ(энргСтабильныеПериодыМКДПоследовательность.ДатаРегистратора) КАК ДатаРегистратора
	|ПОМЕСТИТЬ МинимальныйПериод
	|ИЗ
	|	МинПериодРегистрации КАК МинПериодРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыМКДПоследовательность КАК энргСтабильныеПериодыМКДПоследовательность
	|		ПО МинПериодРегистрации.Организация = энргСтабильныеПериодыМКДПоследовательность.Организация И МинПериодРегистрации.ПериодНачисления = энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления
	|			И МинПериодРегистрации.Район = энргСтабильныеПериодыМКДПоследовательность.Район
	|			И МинПериодРегистрации.МКД = энргСтабильныеПериодыМКДПоследовательность.МКД
	|			И МинПериодРегистрации.ПериодРегистрации = энргСтабильныеПериодыМКДПоследовательность.ПериодРегистрации
	|			И (энргСтабильныеПериодыМКДПоследовательность.Организация = &Организация)
	|			И (энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргСтабильныеПериодыМКДПоследовательность.Район = &Район)
	|			И (энргСтабильныеПериодыМКДПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И (энргСтабильныеПериодыМКДПоследовательность.МКД = &МКД)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргСтабильныеПериодыМКДПоследовательность.Организация,
	|	энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления,
	|	энргСтабильныеПериодыМКДПоследовательность.Район,
	|	энргСтабильныеПериодыМКДПоследовательность.МКД,
	|	энргСтабильныеПериодыМКДПоследовательность.ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныйПериод.Организация,
	|	МинимальныйПериод.ПериодНачисления,
	|	МинимальныйПериод.Район,
	|	МинимальныйПериод.МКД,
	|	МинимальныйПериод.ПериодРегистрации,
	|	МинимальныйПериод.ДатаРегистратора,
	|	МИНИМУМ(энргСтабильныеПериодыМКДПоследовательность.ДокРегистратор) КАК ДокРегистратор
	|ПОМЕСТИТЬ МинимальныйРегистратор
	|ИЗ
	|	МинимальныйПериод КАК МинимальныйПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыМКДПоследовательность КАК энргСтабильныеПериодыМКДПоследовательность
	|		ПО МинимальныйПериод.Организация = энргСтабильныеПериодыМКДПоследовательность.Организация И МинимальныйПериод.ПериодНачисления = энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления
	|			И МинимальныйПериод.Район = энргСтабильныеПериодыМКДПоследовательность.Район
	|			И МинимальныйПериод.МКД = энргСтабильныеПериодыМКДПоследовательность.МКД
	|			И МинимальныйПериод.ПериодРегистрации = энргСтабильныеПериодыМКДПоследовательность.ПериодРегистрации
	|			И (энргСтабильныеПериодыМКДПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимальныйПериод.ДатаРегистратора = энргСтабильныеПериодыМКДПоследовательность.ДатаРегистратора
	|			И (энргСтабильныеПериодыМКДПоследовательность.Организация = &Организация)
	|			И (энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргСтабильныеПериодыМКДПоследовательность.Район = &Район)
	|			И (энргСтабильныеПериодыМКДПоследовательность.МКД = &МКД)
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимальныйПериод.Организация,
	|	МинимальныйПериод.ПериодНачисления,
	|	МинимальныйПериод.Район,
	|	МинимальныйПериод.МКД,
	|	МинимальныйПериод.ПериодРегистрации,
	|	МинимальныйПериод.ДатаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныйРегистратор.Организация КАК Организация,
	|	МинимальныйРегистратор.ПериодНачисления КАК ПериодНачисления,
	|	МинимальныйРегистратор.Район КАК Район,
	|	МинимальныйРегистратор.МКД КАК МКД,
	|	энргСтабильныеПериодыМКДПоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	|	энргСтабильныеПериодыМКДПоследовательность.СостояниеПроведения,
	|	энргСтабильныеПериодыМКДПоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	|	энргСтабильныеПериодыМКДПоследовательность.ДокРегистратор КАК ДокРегистратор
	|ИЗ
	|	МинимальныйРегистратор КАК МинимальныйРегистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыМКДПоследовательность КАК энргСтабильныеПериодыМКДПоследовательность
	|		ПО МинимальныйРегистратор.Организация = энргСтабильныеПериодыМКДПоследовательность.Организация И  МинимальныйРегистратор.ПериодНачисления = энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления
	|			И МинимальныйРегистратор.Район = энргСтабильныеПериодыМКДПоследовательность.Район
	|			И МинимальныйРегистратор.МКД = энргСтабильныеПериодыМКДПоследовательность.МКД
	|			И (ВЫБОР
	|				КОГДА МинимальныйРегистратор.ПериодРегистрации < энргСтабильныеПериодыМКДПоследовательность.ПериодРегистрации
	|					ТОГДА ИСТИНА
	|				КОГДА МинимальныйРегистратор.ПериодРегистрации = энргСтабильныеПериодыМКДПоследовательность.ПериодРегистрации
	|					ТОГДА ВЫБОР
	|							КОГДА МинимальныйРегистратор.ДатаРегистратора < энргСтабильныеПериодыМКДПоследовательность.ДатаРегистратора
	|								ТОГДА ИСТИНА
	|							КОГДА МинимальныйРегистратор.ДатаРегистратора = энргСтабильныеПериодыМКДПоследовательность.ДатаРегистратора
	|								ТОГДА МинимальныйРегистратор.ДокРегистратор <= энргСтабильныеПериодыМКДПоследовательность.ДокРегистратор
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (энргСтабильныеПериодыМКДПоследовательность.Организация = &Организация)
	|			И (энргСтабильныеПериодыМКДПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргСтабильныеПериодыМКДПоследовательность.Район = &Район)
	|			И (энргСтабильныеПериодыМКДПоследовательность.МКД = &МКД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	МКД,
	|	ПериодРегистрации,
	|	ДатаРегистратора,
	|	ДокРегистратор";   	       
	
	Если не Отбор.свойство("МКД") тогда
		Текст 		= СтрЗаменить(Текст,"И энргСтабильныеПериодыМКДПоследовательность.МКД = &МКД","");
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыМКДПоследовательность.МКД = &МКД)","");		
	КонецЕсли;
	
	Запрос 		 	= Новый Запрос;
	Запрос.Текст 	= Текст;
	Запрос.УстановитьПараметр("Район",				Отбор.район);
	Запрос.УстановитьПараметр("Организация",		Отбор.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",	Отбор.ПериодНачисления);
	
	Если Отбор.свойство("МКД") тогда
		Запрос.УстановитьПараметр("МКД",			Отбор.МКД);
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ВосстановитьПоследовательностьПоказанияПУ

Процедура ОбновитьДанныеВДокументе(ПериодНачисления,ДокРегистратор,ПараметрыОперации)
	
	ПоказанияПриняты 									= Перечисления.энргСостояниеПоказаний.Приняты;
	ЭтоОперацияСПрибором								= ТипЗнч(ДокРегистратор) = Тип("ДокументСсылка.энргОперацияСПриборомУчета");
	ДокОбъект  											= ДокРегистратор.получитьОбъект();
	ДокОбъект.ДополнительныеСвойства.вставить("ВосстановлениеПоследовательности",Истина);
	
	Если ЗначениеЗаполнено(ПараметрыОперации.ИмяТабЧасти) тогда
		ИмяТЧ 											= ПараметрыОперации.ИмяТабЧасти;
	иначе
		ИмяТЧ 											= ИмяТабличнойЧастиПоказаний(ДокРегистратор);
	КонецЕсли;
	
	тчТочкиУчета 										= ДокОбъект["ТочкиУчета"];
	тчШкалыПриборов 									= ДокОбъект["ШкалыПриборовУчета"];
	тчПоказания 										= ДокОбъект["ПоказанияПриборовУчета"];
	
	Если ПараметрыОперации.НомерСтрокиТЧ > 0 тогда
		СтрокаПоказаний									= тчПоказания[ПараметрыОперации.НомерСтрокиТЧ-1];
		СтрокиШкал										= тчШкалыПриборов.НайтиСтроки(Новый Структура("IDСтроки", СтрокаПоказаний.IDСтроки));
		Если СтрокиШкал.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
		КонецЕсли;		
		СтрокаШкалы 									= СтрокиШкал[0];
		СтрокиТочки										= тчТочкиУчета.НайтиСтроки(Новый Структура("IDСтроки", 		СтрокаШкалы.IDСтрокиТочкиУчета));
		Если ЭтоОперацияСПрибором и СтрокиТочки.Количество() = 0 Тогда
			СтрокиТочки									= тчТочкиУчета.НайтиСтроки(Новый Структура("IDСтрокиВывод", СтрокаШкалы.IDСтрокиТочкиУчета));
		КонецЕсли; 				
		Если СтрокиТочки.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
		КонецЕсли;
		СтрокаТочки 									= СтрокиТочки[0];
	иначе		
		СтрокиТочки		 								= тчТочкиУчета.найтиСтроки(Новый Структура("ПриборУчета",ПараметрыОперации.ПриборУчета));
		Если СтрокиТочки.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для прибора учета "   +  ПараметрыОперации.ПриборУчета + " найдено более одной строки");
		КонецЕсли;		
		СтрокаТочки  									= СтрокиТочки[0];
		
		СтрокиШкал 										= тчШкалыПриборов.найтиСтроки(Новый Структура("IDСтрокиТочкиУчета, Шкала",СтрокаТочки.IDСтроки, ПараметрыОперации.Шкала));
		Если СтрокиШкал.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для шкалы - " + ПараметрыОперации.Шкала + " прибора учета "   +  ПараметрыОперации.ПриборУчета + " найдено более одной строки");
		КонецЕсли;
		
		СтрокаШкалы                                    	= СтрокиШкал[0];
		СтрокиПоказаний 								= тчПоказания.НайтиСтроки(Новый Структура("IDСтроки, ТарифнаяЗона", СтрокаШкалы.IDСтроки, ПараметрыОперации.ТарифнаяЗона));
		Если СтрокиПоказаний.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для шкалы - " + ПараметрыОперации.Шкала + " прибора учета " +  ПараметрыОперации.ПриборУчета + " и тарифной зоны " +  ПараметрыОперации.ТарифнаяЗона  + " найдено более одной строки");
		КонецЕсли;
		
		СтрокаПоказаний 								= СтрокиПоказаний[0];
		
	КонецЕсли;  
	
	ДанныеСреднегоОбъема 								= ПараметрыОперации.ДанныеСреднегоОбъема; 	
	
	Если СтрокаТочки = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета] = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли  ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала] = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала][ПараметрыОперации.ТарифнаяЗона] = Неопределено тогда
		СреднийОбъема 									= 0;
	иначе
		СреднийОбъема 									= ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала][ПараметрыОперации.ТарифнаяЗона];
	КонецЕсли;
	
	ДанныеМаксимальногоПотребления 						= ПараметрыОперации.ДанныеМаксимальногоПотребления;
	Если ДанныеМаксимальногоПотребления[СтрокаТочки.Услуга] = Неопределено тогда
		МаксимальноВозможныйОбъемПотребления 			= 1000;
	иначе 
		СтрокаСоотвествия 								= ДанныеМаксимальногоПотребления[СтрокаТочки.Услуга];
		МаксимальноВозможныйОбъемПотребления 			= СтрокаСоотвествия.ПовышающийКоэффициент * СтрокаСоотвествия.МаксимальноеПотребления;	
	КонецЕсли;
	
	ДанныеСтроки 										= энргРаботаСПоказаниямиПриборовУчетаКлиентСервер.ДанныеСтрокиПоказаний();
	
	ДанныеСтроки.ТекущиеПоказания	 					= СтрокаПоказаний.ТекущиеПоказания;
	ДанныеСтроки.Разница 								= СтрокаПоказаний.Разница;
	ДанныеСтроки.ПереворотИзмененПользователем 			= СтрокаПоказаний.ПереворотИзмененПользователем;
	ДанныеСтроки.СтатусИзмененПользователем 			= СтрокаПоказаний.СтатусИзмененПользователем;
	ДанныеСтроки.Сумма				 					= СтрокаПоказаний.Сумма;
	ДанныеСтроки.ЗначениеТарифа				 			= СтрокаПоказаний.ЗначениеТарифа;
	
	ДанныеСтроки.ПредыдущиеПоказания 					= ПараметрыОперации.ПредыдущиеМакс;
	ДанныеСтроки.ДатаПоследнихПоказаний 				= НачалоДня(ПараметрыОперации.ПериодПредыдущихМаксПок);
	ДанныеСтроки.СостояниеПоказаний 					= ПараметрыОперации.СостояниеПоказаний; 	
	ДанныеСтроки.СреднийОбъемПотребления 				= СреднийОбъема;
	ДанныеСтроки.МаксимальноВозможныеПоказания			= ПараметрыОперации.МаксимальноВозможныеПоказания;
	ДанныеСтроки.МаксимальноВозможныйОбъемПотребления	= МаксимальноВозможныйОбъемПотребления; 
	ДанныеСтроки.КоэффициентПУ							= ПараметрыОперации.КоэффициентПУ; 	
	ДанныеСтроки.Переворот 								= ПараметрыОперации.Переворот;			
	КонтрольныйСъем 									= ПараметрыОперации.КС;
	
	энргРаботаСПоказаниямиПриборовУчетаКлиентСервер.ПересчитатьСтрокуПриборовУчета(ДанныеСтроки, ПериодНачисления,КонтрольныйСъем);
	
	Если ДанныеСтрокиИзменены(ДанныеСтроки,СтрокаПоказаний) тогда
		// Если что то изменилось в документе.
		ЗаполнитьЗначенияСвойств(СтрокаПоказаний,ДанныеСтроки);				
		ДокОбъект.ДополнительныеСвойства.вставить("ВосстановлениеПоследовательности",Истина);
		ДокОбъект.записать();
	КонецЕсли;
	
	Если ДанныеСтроки.СостояниеПоказаний <> ПараметрыОперации.СостояниеПоказаний или ДанныеСтроки.Переворот <> ПараметрыОперации.Переворот тогда
		// Если данные изменились записываем их.
		НаборПоказаний 								= РегистрыСведений.энргПоказанияПриборовУчета.СоздатьНаборЗаписей();
		НаборПоказаний.Отбор.регистратор.установить(ДокРегистратор);
		НаборПоказаний.Прочитать();
		ТаблицаПоказаний  							= НаборПоказаний.Выгрузить();
		для Каждого стр из ТаблицаПоказаний цикл
			стр.активность 							= истина;
		КонецЦикла;   			
		НаборПоказаний.Очистить();
		НаборПоказаний.Записать();
		СтрокиПоказаний  							= ТаблицаПоказаний.НайтиСтроки(Новый Структура("КлючПомещения,ПриборУчета,ТарифнаяЗона,Разделитель",ПараметрыОперации.КлючПомещения,ПараметрыОперации.ПриборУчета,ПараметрыОперации.ТарифнаяЗона,ПараметрыОперации.Разделитель)); 
		Если СтрокиПоказаний.Количество() = 0 тогда 	
			// Движений по данному пу нету.	
			Если СтрокаПоказаний.ТекущиеПоказания > 0 тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не восстановлена последовательность в документе " + ДокРегистратор + " по прибору " + ПараметрыОперации.ПриборУчета);
			КонецЕсли;				
		иначеЕсли СтрокиПоказаний.Количество() > 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не восстановлена последовательность в документе " + ДокРегистратор + " по прибору " + ПараметрыОперации.ПриборУчета);
		иначе
			СтрокаПоказаний  						= СтрокиПоказаний[0];
			СтрокаПоказаний.Показание 				= ДанныеСтроки.ТекущиеПоказания;
			СтрокаПоказаний.Переворот 				= ДанныеСтроки.Переворот;
			СтрокаПоказаний.СостояниеПоказаний 		= ДанныеСтроки.СостояниеПоказаний;
		КонецЕсли;			
		
		// Записываем новый набор показаний.
		НаборПоказаний 								= РегистрыСведений.энргПоказанияПриборовУчета.СоздатьНаборЗаписей();
		НаборПоказаний.Отбор.регистратор.установить(ДокРегистратор);
		НаборПоказаний.Загрузить(ТаблицаПоказаний);
		НаборПоказаний.Записать(Ложь);			
		ПараметрыОперации.СостояниеПоказаний 		= ДанныеСтроки.СостояниеПоказаний;
		ПараметрыОперации.Переворот 				= ДанныеСтроки.Переворот;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеСреднегоОбъемаАбонента(ВыборкаСреднийОбъем,ЧастныйСектор, Строение,Помещение) 
	
	ТекТочкаУчета					= Неопределено;
	ТекШкала 						= Неопределено;
	СоотвествиеТочек 				= Новый Соответствие;
	СоответствиеЗоны 				= Неопределено;
	СоотвествиеШкал 				= Неопределено;
	Пока ВыборкаСреднийОбъем.ЧастныйСектор  = ЧастныйСектор и ВыборкаСреднийОбъем.Строение = Строение и ВыборкаСреднийОбъем.Помещение = Помещение цикл		
		Если ЗначениеЗаполнено(ВыборкаСреднийОбъем.Шкала) и ЗначениеЗаполнено(ВыборкаСреднийОбъем.ТарифнаяЗона) Тогда
			Если ТекШкала <> ВыборкаСреднийОбъем.Шкала Тогда
				Если ТекШкала <> Неопределено тогда
					СоотвествиеШкал.Вставить(ТекШкала,СоответствиеЗоны);
				КонецЕсли;
				СоотвествиеШкал		= Новый Соответствие;
				СоответствиеЗоны	= Новый Соответствие;
			КонецЕсли;
			
			Если ТекТочкаУчета <> ВыборкаСреднийОбъем.ТочкаУчета тогда
				Если ТекТочкаУчета <> Неопределено тогда
					СоотвествиеТочек.Вставить(ТекТочкаУчета,СоотвествиеШкал);
				КонецЕсли;
				СоотвествиеШкал		= Новый Соответствие;
				СоответствиеЗоны	= Новый Соответствие;
			КонецЕсли; 	
			
			СоответствиеЗоны.Вставить(ВыборкаСреднийОбъем.ТарифнаяЗона,ВыборкаСреднийОбъем.СреднееПотребление);
		КонецЕсли;
	
		Если не ВыборкаСреднийОбъем.следующий() тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	 	
	Если ТекШкала <> Неопределено тогда
		СоотвествиеШкал.Вставить(ТекШкала,СоответствиеЗоны);
	КонецЕсли;		
		
	Если ТекТочкаУчета <> Неопределено тогда
		СоотвествиеТочек.Вставить(ТекТочкаУчета,СоотвествиеШкал);
	КонецЕсли;	  
	
	Возврат СоотвествиеТочек;
КонецФункции

Функция РезультатСреднийОбъемПотребления(МВТ,Отбор)
	
	Текст 	=
	"ВЫБРАТЬ
	|	энргСреднийОбъемПотребленияАбонентов.Организация КАК Организация,
	|	энргСреднийОбъемПотребленияАбонентов.ПериодНачисления КАК ПериодНачисления,
	|	энргСреднийОбъемПотребленияАбонентов.Район КАК Район,
	|	энргСреднийОбъемПотребленияАбонентов.ЧастныйСектор КАК ЧастныйСектор,
	|	энргСреднийОбъемПотребленияАбонентов.Строение КАК Строение,
	|	энргСреднийОбъемПотребленияАбонентов.Помещение КАК Помещение,
	|	энргСреднийОбъемПотребленияАбонентов.ТочкаУчета КАК ТочкаУчета,
	|	энргСреднийОбъемПотребленияАбонентов.Шкала КАК Шкала,
	|	энргСреднийОбъемПотребленияАбонентов.ТарифнаяЗона КАК ТарифнаяЗона,
	|	энргСреднийОбъемПотребленияАбонентов.Объем КАК Объем
	|ПОМЕСТИТЬ СреднийОбъем
	|ИЗ
	|	РегистрСведений.энргСреднийОбъемПотребленияАбонентов КАК энргСреднийОбъемПотребленияАбонентов
	|ГДЕ
	|	энргСреднийОбъемПотребленияАбонентов.Организация = &Организация
	|	И энргСреднийОбъемПотребленияАбонентов.ПериодНачисления = &ПериодНачисления
	|	И энргСреднийОбъемПотребленияАбонентов.Район = &Район
	|	И энргСреднийОбъемПотребленияАбонентов.ЧастныйСектор = &ЧастныйСектор
	|	И энргСреднийОбъемПотребленияАбонентов.Строение = &Строение
	|	И энргСреднийОбъемПотребленияАбонентов.Помещение = &Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Граница.Организация КАК Организация,
	|	Граница.ПериодНачисления КАК ПериодНачисления,
	|	Граница.Район КАК Район,
	|	Граница.ЧастныйСектор КАК ЧастныйСектор,
	|	Граница.Строение КАК Строение,
	|	Граница.Помещение КАК Помещение,
	|	ЕСТЬNULL(СреднийОбъем.ТочкаУчета, ЗНАЧЕНИЕ(Справочник.энргТочкиУчета.ПустаяСсылка)) КАК ТочкаУчета,
	|	ЕСТЬNULL(СреднийОбъем.Шкала, ЗНАЧЕНИЕ(Справочник.энргШкалыПриборовУчета.ПустаяСсылка)) КАК Шкала,
	|	ЕСТЬNULL(СреднийОбъем.ТарифнаяЗона, ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка)) КАК ТарифнаяЗона,
	|	ЕСТЬNULL(СреднийОбъем.Объем, 0) КАК СреднееПотребление
	|ИЗ
	|	Граница КАК Граница
	|		ЛЕВОЕ СОЕДИНЕНИЕ СреднийОбъем КАК СреднийОбъем
	|		ПО Граница.Организация = СреднийОбъем.Организация
	|			И Граница.ПериодНачисления = СреднийОбъем.ПериодНачисления
	|			И Граница.Район = СреднийОбъем.Район
	|			И Граница.ЧастныйСектор = СреднийОбъем.ЧастныйСектор
	|			И Граница.Строение = СреднийОбъем.Строение
	|			И Граница.Помещение = СреднийОбъем.Помещение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	ЧастныйСектор,
	|	Строение,
	|	Помещение,
	|	Шкала,
	|	ТарифнаяЗона"; 
	
	Если Отбор.Строение  = Неопределено Тогда
		Текст 						= СтрЗаменить(Текст,"И энргСреднийОбъемПотребленияАбонентов.ЧастныйСектор = &ЧастныйСектор","");
		Текст 						= СтрЗаменить(Текст,"И энргСреднийОбъемПотребленияАбонентов.Строение = &Строение","");
		Текст 						= СтрЗаменить(Текст,"И энргСреднийОбъемПотребленияАбонентов.Помещение = &Помещение","");
	ИначеЕсли Не ЗначениеЗаполнено(Отбор.Строение) Тогда
		Текст 						= СтрЗаменить(Текст,"И энргСреднийОбъемПотребленияАбонентов.Строение = &Строение","");
		Текст 						= СтрЗаменить(Текст,"И энргСреднийОбъемПотребленияАбонентов.Помещение = &Помещение","");
	ИначеЕсли Отбор.Помещение  = Неопределено Тогда
		Текст 						= СтрЗаменить(Текст,"И энргСреднийОбъемПотребленияАбонентов.Помещение = &Помещение","");
	КонецЕсли;
	
	Запрос 							= Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	
	Запрос.УстановитьПараметр("Район",					Отбор.район);
	Запрос.УстановитьПараметр("Организация",			Отбор.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",		Отбор.ПериодНачисления);
	
	Если НЕ Отбор.Строение  = Неопределено И Не ЗначениеЗаполнено(Отбор.Строение) Тогда
		Запрос.УстановитьПараметр("ЧастныйСектор", 		Истина);
	ИначеЕсли  НЕ Отбор.Строение  = Неопределено И ЗначениеЗаполнено(Отбор.Строение) Тогда
		Запрос.УстановитьПараметр("ЧастныйСектор", 		Ложь);
		Запрос.УстановитьПараметр("Строение", 			Отбор.Строение);
		Если НЕ Отбор.Помещение  = Неопределено Тогда
			  Запрос.УстановитьПараметр("Помещение", 	Отбор.Помещение);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция ДанныеМаксимальногоПотребления(НачалоПериодаРасчета)
	МаксПотреб		 = Новый Соответствие;
	Запрос  		= Новый Запрос;
	Запрос.УстановитьПараметр("Период",КонецМесяца(НачалоПериодаРасчета)+1);
	Запрос.Текст 	="ВЫБРАТЬ
	|	энргМаксимальныеПоказателиПотребленияСрезПоследних.Услуга,
	|	энргМаксимальныеПоказателиПотребленияСрезПоследних.ТарифнаяЗона,
	|	энргМаксимальныеПоказателиПотребленияСрезПоследних.ПовышающийКоэффициент,
	|	энргМаксимальныеПоказателиПотребленияСрезПоследних.МаксимальноеПотребления
	|ИЗ
	|	РегистрСведений.энргМаксимальныеПоказателиПотребления.СрезПоследних(&Период, ) КАК энргМаксимальныеПоказателиПотребленияСрезПоследних";
	Результат  		= Запрос.Выполнить();
	Выборка  		= Результат.Выбрать();
	Пока Выборка.Следующий() цикл
		МаксПотреб.Вставить(Выборка.Услуга,Новый Структура("ПовышающийКоэффициент,МаксимальноеПотребления",Выборка.ПовышающийКоэффициент,Выборка.МаксимальноеПотребления));
	КонецЦикла;
	
	Возврат МаксПотреб;
КонецФункции

Функция ДанныеСтрокиИзменены(Источник,Приемник)	
	
	для Каждого КлючЗначение из Источник цикл
		Если Источник[КлючЗначение.ключ] <> Приемник[КлючЗначение.ключ] тогда
			Возврат Истина;
			Прервать;				
		КонецЕсли;  		
	КонецЦикла; 	
	Возврат Ложь;
	
КонецФункции

Функция РезультатЗапросаПоказанияПУ(МВТ,Отбор,НачалоПериодаРасчета) 
	
	Запрос  = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Текст =
	"ВЫБРАТЬ
	|	энргКоэффциентыПриборовУчетаСрезПоследних.КлючПомещения КАК КлючПомещения,
	|	энргКоэффциентыПриборовУчетаСрезПоследних.ПриборУчета КАК ПриборУчета,
	|	энргКоэффциентыПриборовУчетаСрезПоследних.Коэффициент КАК коэффициент
	|ПОМЕСТИТЬ КоэффициентыПриборов
	|ИЗ
	|	РегистрСведений.энргКоэффциентыПриборовУчета.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&НачалоПериодаРасчета, МЕСЯЦ), ДЕНЬ, 1),
	|			Организация = &Организация
	|				И Район = &Район
	|				И КлючПомещения = &КлючПомещения) КАК энргКоэффциентыПриборовУчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПоказанияПУПоследовательность.Организация КАК Организация,
	|	энргПоказанияПУПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргПоказанияПУПоследовательность.Район КАК Район,
	|	энргПоказанияПУПоследовательность.ЧастныйСектор КАК ЧастныйСектор,
	|	энргПоказанияПУПоследовательность.Строение КАК Строение,
	|	энргПоказанияПУПоследовательность.Помещение КАК Помещение,
	|	энргПоказанияПУПоследовательность.ПриборУчета КАК ПриборУчета,
	|	МИНИМУМ(энргПоказанияПУПоследовательность.ПериодРегистрации) КАК ПериодРегистрации
	|ПОМЕСТИТЬ МинимальныйПериод
	|ИЗ
	|	РегистрСведений.энргПоказанияПУПоследовательность КАК энргПоказанияПУПоследовательность
	|ГДЕ
	|	энргПоказанияПУПоследовательность.Организация = &Организация
	|	И энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления
	|	И энргПоказанияПУПоследовательность.Район = &Район
	|	И энргПоказанияПУПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	|	И энргПоказанияПУПоследовательность.ЧастныйСектор = &ЧастныйСектор
	|	И энргПоказанияПУПоследовательность.Строение = &Строение
	|	И энргПоказанияПУПоследовательность.Помещение = &Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	энргПоказанияПУПоследовательность.Организация,
	|	энргПоказанияПУПоследовательность.ПериодНачисления,
	|	энргПоказанияПУПоследовательность.Район,
	|	энргПоказанияПУПоследовательность.ЧастныйСектор,
	|	энргПоказанияПУПоследовательность.Строение,
	|	энргПоказанияПУПоследовательность.Помещение,
	|	энргПоказанияПУПоследовательность.ПриборУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныйПериод.Организация КАК Организация,
	|	МинимальныйПериод.ПериодНачисления КАК ПериодНачисления,
	|	МинимальныйПериод.Район КАК Район,
	|	МинимальныйПериод.ЧастныйСектор КАК ЧастныйСектор,
	|	МинимальныйПериод.Строение КАК Строение,
	|	МинимальныйПериод.Помещение КАК Помещение,
	|	МинимальныйПериод.ПриборУчета КАК ПриборУчета,
	|	МинимальныйПериод.ПериодРегистрации КАК ПериодРегистрации,
	|	МИНИМУМ(энргПоказанияПУПоследовательность.ДатаРегистратора) КАК ДатаРегистратора
	|ПОМЕСТИТЬ МинимальнаяДатаРегистратора
	|ИЗ
	|	МинимальныйПериод КАК МинимальныйПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательность КАК энргПоказанияПУПоследовательность
	|		ПО МинимальныйПериод.Организация = энргПоказанияПУПоследовательность.Организация
	|			И МинимальныйПериод.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|			И МинимальныйПериод.Район = энргПоказанияПУПоследовательность.Район
	|			И (энргПоказанияПУПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимальныйПериод.ЧастныйСектор = энргПоказанияПУПоследовательность.ЧастныйСектор
	|			И МинимальныйПериод.Строение = энргПоказанияПУПоследовательность.Строение
	|			И МинимальныйПериод.Помещение = энргПоказанияПУПоследовательность.Помещение
	|			И МинимальныйПериод.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|			И МинимальныйПериод.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|			И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|			И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргПоказанияПУПоследовательность.Район = &Район)
	|			И (энргПоказанияПУПоследовательность.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргПоказанияПУПоследовательность.Строение = &Строение)
	|			И (энргПоказанияПУПоследовательность.Помещение = &Помещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимальныйПериод.Организация,
	|	МинимальныйПериод.ПериодНачисления,
	|	МинимальныйПериод.Район,
	|	МинимальныйПериод.ЧастныйСектор,
	|	МинимальныйПериод.Строение,
	|	МинимальныйПериод.Помещение,
	|	МинимальныйПериод.ПриборУчета,
	|	МинимальныйПериод.ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальнаяДатаРегистратора.Организация КАК Организация,
	|	МинимальнаяДатаРегистратора.ПериодНачисления КАК ПериодНачисления,
	|	МинимальнаяДатаРегистратора.Район КАК Район,
	|	МинимальнаяДатаРегистратора.ЧастныйСектор КАК ЧастныйСектор,
	|	МинимальнаяДатаРегистратора.Строение КАК Строение,
	|	МинимальнаяДатаРегистратора.Помещение КАК Помещение,
	|	МинимальнаяДатаРегистратора.ПриборУчета КАК ПриборУчета,
	|	МинимальнаяДатаРегистратора.ПериодРегистрации КАК ПериодРегистрации,
	|	МинимальнаяДатаРегистратора.ДатаРегистратора КАК ДатаРегистратора,
	|	МИНИМУМ(энргПоказанияПУПоследовательность.ДокРегистратор) КАК ДокРегистратор
	|ПОМЕСТИТЬ МинимальныйРегистратор
	|ИЗ
	|	МинимальнаяДатаРегистратора КАК МинимальнаяДатаРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательность КАК энргПоказанияПУПоследовательность
	|		ПО МинимальнаяДатаРегистратора.Организация = энргПоказанияПУПоследовательность.Организация
	|			И МинимальнаяДатаРегистратора.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|			И МинимальнаяДатаРегистратора.Район = энргПоказанияПУПоследовательность.Район
	|			И (энргПоказанияПУПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимальнаяДатаРегистратора.ЧастныйСектор = энргПоказанияПУПоследовательность.ЧастныйСектор
	|			И МинимальнаяДатаРегистратора.Строение = энргПоказанияПУПоследовательность.Строение
	|			И МинимальнаяДатаРегистратора.Помещение = энргПоказанияПУПоследовательность.Помещение
	|			И МинимальнаяДатаРегистратора.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|			И МинимальнаяДатаРегистратора.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|			И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|			И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргПоказанияПУПоследовательность.Район = &Район)
	|			И (энргПоказанияПУПоследовательность.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргПоказанияПУПоследовательность.Строение = &Строение)
	|			И (энргПоказанияПУПоследовательность.Помещение = &Помещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимальнаяДатаРегистратора.Организация,
	|	МинимальнаяДатаРегистратора.ПериодНачисления,
	|	МинимальнаяДатаРегистратора.Район,
	|	МинимальнаяДатаРегистратора.ЧастныйСектор,
	|	МинимальнаяДатаРегистратора.Строение,
	|	МинимальнаяДатаРегистратора.Помещение,
	|	МинимальнаяДатаРегистратора.ПриборУчета,
	|	МинимальнаяДатаРегистратора.ПериодРегистрации,
	|	МинимальнаяДатаРегистратора.ДатаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|	ВложенныйЗапрос.Строение КАК Строение,
	|	ВложенныйЗапрос.Помещение КАК Помещение,
	|	ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|	ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
	|	ВложенныйЗапрос.ДатаРегистратора КАК ДатаРегистратора,
	|	ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|	ВложенныйЗапрос.Разделитель КАК Разделитель,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ПериодРегистрации < &НачалоПериодаРасчета
	|			ТОГДА &НачалоПериодаРасчета
	|		ИНАЧЕ ВложенныйЗапрос.ПериодРегистрации
	|	КОНЕЦ КАК ПериодРегистрацииПоказаний,
	|	энргКлючиПомещений.КлючПомещения КАК КлючПомещения
	|ПОМЕСТИТЬ Граница
	|ИЗ
	|	(ВЫБРАТЬ
	|		МинимальныйРегистратор.Организация КАК Организация,
	|		МинимальныйРегистратор.ПериодНачисления КАК ПериодНачисления,
	|		МинимальныйРегистратор.Район КАК Район,
	|		МинимальныйРегистратор.ЧастныйСектор КАК ЧастныйСектор,
	|		МинимальныйРегистратор.Строение КАК Строение,
	|		МинимальныйРегистратор.Помещение КАК Помещение,
	|		МинимальныйРегистратор.ПриборУчета КАК ПриборУчета,
	|		МинимальныйРегистратор.ПериодРегистрации КАК ПериодРегистрации,
	|		МинимальныйРегистратор.ДатаРегистратора КАК ДатаРегистратора,
	|		МинимальныйРегистратор.ДокРегистратор КАК ДокРегистратор,
	|		МИНИМУМ(энргПоказанияПУПоследовательность.Разделитель) КАК Разделитель
	|	ИЗ
	|		МинимальныйРегистратор КАК МинимальныйРегистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательность КАК энргПоказанияПУПоследовательность
	|			ПО МинимальныйРегистратор.Организация = энргПоказанияПУПоследовательность.Организация
	|				И МинимальныйРегистратор.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|				И МинимальныйРегистратор.Район = энргПоказанияПУПоследовательность.Район
	|				И МинимальныйРегистратор.ЧастныйСектор = энргПоказанияПУПоследовательность.ЧастныйСектор
	|				И МинимальныйРегистратор.Строение = энргПоказанияПУПоследовательность.Строение
	|				И МинимальныйРегистратор.Помещение = энргПоказанияПУПоследовательность.Помещение
	|				И МинимальныйРегистратор.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|				И МинимальныйРегистратор.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|				И МинимальныйРегистратор.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|				И (энргПоказанияПУПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|				И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|				И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|				И (энргПоказанияПУПоследовательность.Район = &Район)
	|				И (энргПоказанияПУПоследовательность.ЧастныйСектор = &ЧастныйСектор)
	|				И (энргПоказанияПУПоследовательность.Строение = &Строение)
	|				И (энргПоказанияПУПоследовательность.Помещение = &Помещение)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МинимальныйРегистратор.Организация,
	|		МинимальныйРегистратор.ПериодНачисления,
	|		МинимальныйРегистратор.Район,
	|		МинимальныйРегистратор.ЧастныйСектор,
	|		МинимальныйРегистратор.Строение,
	|		МинимальныйРегистратор.Помещение,
	|		МинимальныйРегистратор.ПриборУчета,
	|		МинимальныйРегистратор.ПериодРегистрации,
	|		МинимальныйРегистратор.ДатаРегистратора,
	|		МинимальныйРегистратор.ДокРегистратор) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргКлючиПомещений КАК энргКлючиПомещений
	|		ПО ВложенныйЗапрос.Строение = энргКлючиПомещений.Строение
	|			И ВложенныйЗапрос.Помещение = энргКлючиПомещений.Помещение
	|			И (энргКлючиПомещений.Строение = &Строение)
	|			И (энргКлючиПомещений.Помещение = &Помещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПоказанияПУПоследовательность.Организация КАК Организация,
	|	энргПоказанияПУПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргПоказанияПУПоследовательность.Район КАК Район,
	|	энргПоказанияПУПоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	|	энргПоказанияПУПоследовательность.ЧастныйСектор КАК ЧастныйСектор,
	|	энргПоказанияПУПоследовательность.Строение КАК Строение,
	|	энргПоказанияПУПоследовательность.Помещение КАК Помещение,
	|	энргПоказанияПУПоследовательность.ПриборУчета КАК ПриборУчета,
	|	энргПоказанияПУПоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	|	энргПоказанияПУПоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	|	энргПоказанияПУПоследовательность.ДокРегистратор КАК ДокРегистратор,
	|	энргПоказанияПУПоследовательность.Разделитель КАК Разделитель
	|ПОМЕСТИТЬ НаборПроведенныхВПоследовательности
	|ИЗ
	|	Граница КАК Граница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательность КАК энргПоказанияПУПоследовательность
	|		ПО Граница.Организация = энргПоказанияПУПоследовательность.Организация
	|			И Граница.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|			И Граница.Район = энргПоказанияПУПоследовательность.Район
	|			И Граница.ЧастныйСектор = энргПоказанияПУПоследовательность.ЧастныйСектор
	|			И Граница.Строение = энргПоказанияПУПоследовательность.Строение
	|			И Граница.Помещение = энргПоказанияПУПоследовательность.Помещение
	|			И Граница.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|			И (ВЫБОР
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|						И Граница.ДокРегистратор = энргПоказанияПУПоследовательность.ДокРегистратор
	|						И Граница.Разделитель > энргПоказанияПУПоследовательность.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|						И Граница.ДокРегистратор > энргПоказанияПУПоследовательность.ДокРегистратор
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора > энргПоказанияПУПоследовательность.ДатаРегистратора
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Граница.ПериодРегистрации > энргПоказанияПУПоследовательность.ПериодРегистрации
	|			КОНЕЦ)
	|			И (энргПоказанияПУПоследовательность.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности))
	|			И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|			И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргПоказанияПУПоследовательность.Район = &Район)
	|			И (энргПоказанияПУПоследовательность.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргПоказанияПУПоследовательность.Строение = &Строение)
	|			И (энргПоказанияПУПоследовательность.Помещение = &Помещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПроведенныхВПоследовательности.Организация КАК Организация,
	|	НаборПроведенныхВПоследовательности.ПериодНачисления КАК ПериодНачисления,
	|	НаборПроведенныхВПоследовательности.Район КАК Район,
	|	НаборПроведенныхВПоследовательности.СостояниеПроведения КАК СостояниеПроведения,
	|	НаборПроведенныхВПоследовательности.ЧастныйСектор КАК ЧастныйСектор,
	|	НаборПроведенныхВПоследовательности.Строение КАК Строение,
	|	НаборПроведенныхВПоследовательности.Помещение КАК Помещение,
	|	НаборПроведенныхВПоследовательности.ПриборУчета КАК ПриборУчета,
	|	МАКСИМУМ(НаборПроведенныхВПоследовательности.ПериодРегистрации) КАК ПериодРегистрации
	|ПОМЕСТИТЬ МаксимальныйПериодРегистрацииПроведенных
	|ИЗ
	|	НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборПроведенныхВПоследовательности.Организация,
	|	НаборПроведенныхВПоследовательности.ПериодНачисления,
	|	НаборПроведенныхВПоследовательности.Район,
	|	НаборПроведенныхВПоследовательности.СостояниеПроведения,
	|	НаборПроведенныхВПоследовательности.ЧастныйСектор,
	|	НаборПроведенныхВПоследовательности.Строение,
	|	НаборПроведенныхВПоследовательности.Помещение,
	|	НаборПроведенныхВПоследовательности.ПриборУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныйПериодРегистрацииПроведенных.Организация КАК Организация,
	|	МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальныйПериодРегистрацииПроведенных.Район КАК Район,
	|	МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	|	МаксимальныйПериодРегистрацииПроведенных.ЧастныйСектор КАК ЧастныйСектор,
	|	МаксимальныйПериодРегистрацииПроведенных.Строение КАК Строение,
	|	МаксимальныйПериодРегистрацииПроведенных.Помещение КАК Помещение,
	|	МаксимальныйПериодРегистрацииПроведенных.ПриборУчета КАК ПриборУчета,
	|	МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	|	МАКСИМУМ(НаборПроведенныхВПоследовательности.ДатаРегистратора) КАК ДатаРегистратора
	|ПОМЕСТИТЬ МаксимальнаяДатаПроведенных
	|ИЗ
	|	НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйПериодРегистрацииПроведенных КАК МаксимальныйПериодРегистрацииПроведенных
	|		ПО НаборПроведенныхВПоследовательности.Организация = МаксимальныйПериодРегистрацииПроведенных.Организация
	|			И НаборПроведенныхВПоследовательности.ПериодНачисления = МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления
	|			И НаборПроведенныхВПоследовательности.Район = МаксимальныйПериодРегистрацииПроведенных.Район
	|			И НаборПроведенныхВПоследовательности.СостояниеПроведения = МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения
	|			И НаборПроведенныхВПоследовательности.ЧастныйСектор = МаксимальныйПериодРегистрацииПроведенных.ЧастныйСектор
	|			И НаборПроведенныхВПоследовательности.Строение = МаксимальныйПериодРегистрацииПроведенных.Строение
	|			И НаборПроведенныхВПоследовательности.Помещение = МаксимальныйПериодРегистрацииПроведенных.Помещение
	|			И НаборПроведенныхВПоследовательности.ПриборУчета = МаксимальныйПериодРегистрацииПроведенных.ПриборУчета
	|			И НаборПроведенныхВПоследовательности.ПериодРегистрации = МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныйПериодРегистрацииПроведенных.Организация,
	|	МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления,
	|	МаксимальныйПериодРегистрацииПроведенных.Район,
	|	МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения,
	|	МаксимальныйПериодРегистрацииПроведенных.ЧастныйСектор,
	|	МаксимальныйПериодРегистрацииПроведенных.Строение,
	|	МаксимальныйПериодРегистрацииПроведенных.Помещение,
	|	МаксимальныйПериодРегистрацииПроведенных.ПриборУчета,
	|	МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальнаяДатаПроведенных.Организация КАК Организация,
	|	МаксимальнаяДатаПроведенных.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальнаяДатаПроведенных.Район КАК Район,
	|	МаксимальнаяДатаПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	|	МаксимальнаяДатаПроведенных.ЧастныйСектор КАК ЧастныйСектор,
	|	МаксимальнаяДатаПроведенных.Строение КАК Строение,
	|	МаксимальнаяДатаПроведенных.Помещение КАК Помещение,
	|	МаксимальнаяДатаПроведенных.ПриборУчета КАК ПриборУчета,
	|	МаксимальнаяДатаПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	|	МаксимальнаяДатаПроведенных.ДатаРегистратора КАК ДатаРегистратора,
	|	МАКСИМУМ(НаборПроведенныхВПоследовательности.ДокРегистратор) КАК ДокРегистратор
	|ПОМЕСТИТЬ МаксимальныйРегистраторПроведенных
	|ИЗ
	|	МаксимальнаяДатаПроведенных КАК МаксимальнаяДатаПроведенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	|		ПО МаксимальнаяДатаПроведенных.Организация = НаборПроведенныхВПоследовательности.Организация
	|			И МаксимальнаяДатаПроведенных.ПериодНачисления = НаборПроведенныхВПоследовательности.ПериодНачисления
	|			И МаксимальнаяДатаПроведенных.Район = НаборПроведенныхВПоследовательности.Район
	|			И МаксимальнаяДатаПроведенных.СостояниеПроведения = НаборПроведенныхВПоследовательности.СостояниеПроведения
	|			И МаксимальнаяДатаПроведенных.ЧастныйСектор = НаборПроведенныхВПоследовательности.ЧастныйСектор
	|			И МаксимальнаяДатаПроведенных.Строение = НаборПроведенныхВПоследовательности.Строение
	|			И МаксимальнаяДатаПроведенных.Помещение = НаборПроведенныхВПоследовательности.Помещение
	|			И МаксимальнаяДатаПроведенных.ПриборУчета = НаборПроведенныхВПоследовательности.ПриборУчета
	|			И МаксимальнаяДатаПроведенных.ПериодРегистрации = НаборПроведенныхВПоследовательности.ПериодРегистрации
	|			И МаксимальнаяДатаПроведенных.ДатаРегистратора = НаборПроведенныхВПоследовательности.ДатаРегистратора
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальнаяДатаПроведенных.Организация,
	|	МаксимальнаяДатаПроведенных.ПериодНачисления,
	|	МаксимальнаяДатаПроведенных.Район,
	|	МаксимальнаяДатаПроведенных.СостояниеПроведения,
	|	МаксимальнаяДатаПроведенных.ЧастныйСектор,
	|	МаксимальнаяДатаПроведенных.Строение,
	|	МаксимальнаяДатаПроведенных.Помещение,
	|	МаксимальнаяДатаПроведенных.ПриборУчета,
	|	МаксимальнаяДатаПроведенных.ПериодРегистрации,
	|	МаксимальнаяДатаПроведенных.ДатаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныйРегистраторПроведенных.Организация КАК Организация,
	|	МаксимальныйРегистраторПроведенных.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальныйРегистраторПроведенных.Район КАК Район,
	|	МаксимальныйРегистраторПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	|	МаксимальныйРегистраторПроведенных.ЧастныйСектор КАК ЧастныйСектор,
	|	МаксимальныйРегистраторПроведенных.Строение КАК Строение,
	|	МаксимальныйРегистраторПроведенных.Помещение КАК Помещение,
	|	МаксимальныйРегистраторПроведенных.ПриборУчета КАК ПриборУчета,
	|	МаксимальныйРегистраторПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	|	МаксимальныйРегистраторПроведенных.ДатаРегистратора КАК ДатаРегистратора,
	|	МаксимальныйРегистраторПроведенных.ДокРегистратор КАК ДокРегистратор,
	|	МАКСИМУМ(НаборПроведенныхВПоследовательности.Разделитель) КАК Разделитель
	|ПОМЕСТИТЬ МаксимальныйРазделительПроведенных
	|ИЗ
	|	МаксимальныйРегистраторПроведенных КАК МаксимальныйРегистраторПроведенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	|		ПО МаксимальныйРегистраторПроведенных.Организация = НаборПроведенныхВПоследовательности.Организация
	|			И МаксимальныйРегистраторПроведенных.ПериодНачисления = НаборПроведенныхВПоследовательности.ПериодНачисления
	|			И МаксимальныйРегистраторПроведенных.Район = НаборПроведенныхВПоследовательности.Район
	|			И МаксимальныйРегистраторПроведенных.СостояниеПроведения = НаборПроведенныхВПоследовательности.СостояниеПроведения
	|			И МаксимальныйРегистраторПроведенных.ЧастныйСектор = НаборПроведенныхВПоследовательности.ЧастныйСектор
	|			И МаксимальныйРегистраторПроведенных.Строение = НаборПроведенныхВПоследовательности.Строение
	|			И МаксимальныйРегистраторПроведенных.Помещение = НаборПроведенныхВПоследовательности.Помещение
	|			И МаксимальныйРегистраторПроведенных.ПриборУчета = НаборПроведенныхВПоследовательности.ПриборУчета
	|			И МаксимальныйРегистраторПроведенных.ПериодРегистрации = НаборПроведенныхВПоследовательности.ПериодРегистрации
	|			И МаксимальныйРегистраторПроведенных.ДатаРегистратора = НаборПроведенныхВПоследовательности.ДатаРегистратора
	|			И МаксимальныйРегистраторПроведенных.ДокРегистратор = НаборПроведенныхВПоследовательности.ДокРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныйРегистраторПроведенных.Организация,
	|	МаксимальныйРегистраторПроведенных.ПериодНачисления,
	|	МаксимальныйРегистраторПроведенных.Район,
	|	МаксимальныйРегистраторПроведенных.СостояниеПроведения,
	|	МаксимальныйРегистраторПроведенных.ЧастныйСектор,
	|	МаксимальныйРегистраторПроведенных.Строение,
	|	МаксимальныйРегистраторПроведенных.Помещение,
	|	МаксимальныйРегистраторПроведенных.ПриборУчета,
	|	МаксимальныйРегистраторПроведенных.ПериодРегистрации,
	|	МаксимальныйРегистраторПроведенных.ДатаРегистратора,
	|	МаксимальныйРегистраторПроведенных.ДокРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныйРазделительПроведенных.Организация КАК Организация,
	|	МаксимальныйРазделительПроведенных.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальныйРазделительПроведенных.Район КАК Район,
	|	МаксимальныйРазделительПроведенных.ЧастныйСектор КАК ЧастныйСектор,
	|	МаксимальныйРазделительПроведенных.Строение КАК Строение,
	|	МаксимальныйРазделительПроведенных.Помещение КАК Помещение,
	|	МаксимальныйРазделительПроведенных.ПриборУчета КАК ПриборУчета,
	|	энргПредоставленныеПоказания.Шкала КАК Шкала,
	|	энргПредоставленныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МаксимальныйРазделительПроведенных.Разделитель КАК Разделитель,
	|	энргПредоставленныеПоказания.НомерПозиции КАК НомерПозиции
	|ПОМЕСТИТЬ ПоследниеНомераПозиции
	|ИЗ
	|	МаксимальныйРазделительПроведенных КАК МаксимальныйРазделительПроведенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПредоставленныеПоказания КАК энргПредоставленныеПоказания
	|		ПО МаксимальныйРазделительПроведенных.Организация = энргПредоставленныеПоказания.Организация
	|			И МаксимальныйРазделительПроведенных.ПериодНачисления = энргПредоставленныеПоказания.ПериодНачисления
	|			И МаксимальныйРазделительПроведенных.Район = энргПредоставленныеПоказания.Район
	|			И МаксимальныйРазделительПроведенных.ЧастныйСектор = энргПредоставленныеПоказания.ЧастныйСектор
	|			И МаксимальныйРазделительПроведенных.Строение = энргПредоставленныеПоказания.Строение
	|			И МаксимальныйРазделительПроведенных.Помещение = энргПредоставленныеПоказания.Помещение
	|			И МаксимальныйРазделительПроведенных.ПриборУчета = энргПредоставленныеПоказания.ПриборУчета
	|			И МаксимальныйРазделительПроведенных.ПериодРегистрации = энргПредоставленныеПоказания.ДатаРегистратора
	|			И МаксимальныйРазделительПроведенных.ДокРегистратор = энргПредоставленныеПоказания.ДокРегистратор
	|			И МаксимальныйРазделительПроведенных.Разделитель = энргПредоставленныеПоказания.Разделитель
	|			И (энргПредоставленныеПоказания.Организация = &Организация)
	|			И (энргПредоставленныеПоказания.ПериодНачисления = &ПериодНачисления)
	|			И (энргПредоставленныеПоказания.Район = &Район)
	|			И (энргПредоставленныеПоказания.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргПредоставленныеПоказания.Строение = &Строение)
	|			И (энргПредоставленныеПоказания.Помещение = &Помещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргМаксимальныеПоказания.Организация КАК Организация,
	|	энргМаксимальныеПоказания.Район КАК Район,
	|	энргМаксимальныеПоказания.КлючПомещения КАК КлючПомещения,
	|	энргМаксимальныеПоказания.ПриборУчета КАК ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала КАК Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	Граница.ПериодРегистрацииПоказаний КАК ПериодРегистрацииПоказаний,
	|	Граница.ДокРегистратор КАК ДокРегистратор,
	|	Граница.Разделитель КАК Разделитель,
	|	МАКСИМУМ(энргМаксимальныеПоказания.Период) КАК ПериодМаксПоказаний
	|ПОМЕСТИТЬ МаксПерПоказаний
	|ИЗ
	|	Граница КАК Граница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказания КАК энргМаксимальныеПоказания
	|		ПО Граница.Организация = энргМаксимальныеПоказания.Организация
	|			И Граница.Район = энргМаксимальныеПоказания.Район
	|			И Граница.КлючПомещения = энргМаксимальныеПоказания.КлючПомещения
	|			И Граница.ПриборУчета = энргМаксимальныеПоказания.ПриборУчета
	|			И (ВЫБОР
	|				КОГДА Граница.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И Граница.ДокРегистратор = энргМаксимальныеПоказания.Регистратор
	|						И Граница.Разделитель > энргМаксимальныеПоказания.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И Граница.ДокРегистратор > энргМаксимальныеПоказания.Регистратор
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Граница.ПериодРегистрацииПоказаний > энргМаксимальныеПоказания.Период
	|			КОНЕЦ)
	|			И (энргМаксимальныеПоказания.Организация = &Организация)
	|			И (энргМаксимальныеПоказания.Район = &Район)
	|			И (энргМаксимальныеПоказания.КлючПомещения = &КлючПомещения)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргМаксимальныеПоказания.Организация,
	|	энргМаксимальныеПоказания.Район,
	|	энргМаксимальныеПоказания.КлючПомещения,
	|	энргМаксимальныеПоказания.ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона,
	|	Граница.ПериодРегистрацииПоказаний,
	|	Граница.ДокРегистратор,
	|	Граница.Разделитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргМаксимальныеПоказания.Организация КАК Организация,
	|	энргМаксимальныеПоказания.Район КАК Район,
	|	энргМаксимальныеПоказания.КлючПомещения КАК КлючПомещения,
	|	энргМаксимальныеПоказания.ПриборУчета КАК ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала КАК Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МаксПерПоказаний.ПериодРегистрацииПоказаний КАК ПериодРегистрацииПоказаний,
	|	МаксПерПоказаний.ДокРегистратор КАК ДокРегистратор,
	|	МаксПерПоказаний.Разделитель КАК Разделитель,
	|	МаксПерПоказаний.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	|	МАКСИМУМ(энргМаксимальныеПоказания.Регистратор) КАК РегистраторМаксПоказаний
	|ПОМЕСТИТЬ РегМакПок
	|ИЗ
	|	МаксПерПоказаний КАК МаксПерПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказания КАК энргМаксимальныеПоказания
	|		ПО МаксПерПоказаний.Организация = энргМаксимальныеПоказания.Организация
	|			И МаксПерПоказаний.Район = энргМаксимальныеПоказания.Район
	|			И МаксПерПоказаний.КлючПомещения = энргМаксимальныеПоказания.КлючПомещения
	|			И МаксПерПоказаний.ПриборУчета = энргМаксимальныеПоказания.ПриборУчета
	|			И МаксПерПоказаний.Шкала = энргМаксимальныеПоказания.Шкала
	|			И МаксПерПоказаний.ТарифнаяЗона = энргМаксимальныеПоказания.ТарифнаяЗона
	|			И МаксПерПоказаний.ПериодМаксПоказаний = энргМаксимальныеПоказания.Период
	|			И (ВЫБОР
	|				КОГДА МаксПерПоказаний.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И МаксПерПоказаний.ДокРегистратор = энргМаксимальныеПоказания.Регистратор
	|						И МаксПерПоказаний.Разделитель > энргМаксимальныеПоказания.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА МаксПерПоказаний.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И МаксПерПоказаний.ДокРегистратор > энргМаксимальныеПоказания.Регистратор
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ МаксПерПоказаний.ПериодРегистрацииПоказаний > энргМаксимальныеПоказания.Период
	|			КОНЕЦ)
	|			И (энргМаксимальныеПоказания.Организация = &Организация)
	|			И (энргМаксимальныеПоказания.Район = &Район)
	|			И (энргМаксимальныеПоказания.КлючПомещения = &КлючПомещения)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргМаксимальныеПоказания.Организация,
	|	энргМаксимальныеПоказания.Район,
	|	энргМаксимальныеПоказания.КлючПомещения,
	|	энргМаксимальныеПоказания.ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона,
	|	МаксПерПоказаний.ПериодРегистрацииПоказаний,
	|	МаксПерПоказаний.ДокРегистратор,
	|	МаксПерПоказаний.Разделитель,
	|	МаксПерПоказаний.ПериодМаксПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргМаксимальныеПоказания.Организация КАК Организация,
	|	энргМаксимальныеПоказания.Район КАК Район,
	|	энргМаксимальныеПоказания.КлючПомещения КАК КлючПомещения,
	|	энргМаксимальныеПоказания.ПриборУчета КАК ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала КАК Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	РегМакПок.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	|	РегМакПок.РегистраторМаксПоказаний КАК РегистраторМаксПоказаний,
	|	МАКСИМУМ(ЕСТЬNULL(энргМаксимальныеПоказания.Разделитель, 0)) КАК РазделительМаксПоказаний
	|ПОМЕСТИТЬ РазделительМакПок
	|ИЗ
	|	РегМакПок КАК РегМакПок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказания КАК энргМаксимальныеПоказания
	|		ПО РегМакПок.Организация = энргМаксимальныеПоказания.Организация
	|			И РегМакПок.Район = энргМаксимальныеПоказания.Район
	|			И РегМакПок.КлючПомещения = энргМаксимальныеПоказания.КлючПомещения
	|			И РегМакПок.ПриборУчета = энргМаксимальныеПоказания.ПриборУчета
	|			И РегМакПок.Шкала = энргМаксимальныеПоказания.Шкала
	|			И РегМакПок.ТарифнаяЗона = энргМаксимальныеПоказания.ТарифнаяЗона
	|			И РегМакПок.ПериодМаксПоказаний = энргМаксимальныеПоказания.Период
	|			И РегМакПок.РегистраторМаксПоказаний = энргМаксимальныеПоказания.Регистратор
	|			И (ВЫБОР
	|				КОГДА РегМакПок.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И РегМакПок.ДокРегистратор = энргМаксимальныеПоказания.Регистратор
	|						И РегМакПок.Разделитель > энргМаксимальныеПоказания.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА РегМакПок.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И РегМакПок.ДокРегистратор > энргМаксимальныеПоказания.Регистратор
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ РегМакПок.ПериодРегистрацииПоказаний > энргМаксимальныеПоказания.Период
	|			КОНЕЦ)
	|			И (энргМаксимальныеПоказания.Организация = &Организация)
	|			И (энргМаксимальныеПоказания.Район = &Район)
	|			И (энргМаксимальныеПоказания.КлючПомещения = &КлючПомещения)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргМаксимальныеПоказания.Организация,
	|	энргМаксимальныеПоказания.Район,
	|	энргМаксимальныеПоказания.КлючПомещения,
	|	энргМаксимальныеПоказания.ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона,
	|	РегМакПок.ПериодМаксПоказаний,
	|	РегМакПок.РегистраторМаксПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазделительМакПок.Организация КАК Организация,
	|	РазделительМакПок.Район КАК Район,
	|	РазделительМакПок.КлючПомещения КАК КлючПомещения,
	|	РазделительМакПок.ПриборУчета КАК ПриборУчета,
	|	РазделительМакПок.Шкала КАК Шкала,
	|	РазделительМакПок.ТарифнаяЗона КАК ТарифнаяЗона,
	|	РазделительМакПок.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	|	РазделительМакПок.РегистраторМаксПоказаний КАК РегистраторМаксПоказаний,
	|	энргМаксимальныеПоказания.ДатаРегистратора КАК ДатаРегистратораМаксимальных,
	|	энргМаксимальныеПоказания.Показание КАК МаксПоказания
	|ПОМЕСТИТЬ ДанныеМаксПоказаний
	|ИЗ
	|	РазделительМакПок КАК РазделительМакПок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказания КАК энргМаксимальныеПоказания
	|		ПО РазделительМакПок.Организация = энргМаксимальныеПоказания.Организация
	|			И РазделительМакПок.Район = энргМаксимальныеПоказания.Район
	|			И РазделительМакПок.КлючПомещения = энргМаксимальныеПоказания.КлючПомещения
	|			И РазделительМакПок.ПриборУчета = энргМаксимальныеПоказания.ПриборУчета
	|			И РазделительМакПок.Шкала = энргМаксимальныеПоказания.Шкала
	|			И РазделительМакПок.ТарифнаяЗона = энргМаксимальныеПоказания.ТарифнаяЗона
	|			И РазделительМакПок.ПериодМаксПоказаний = энргМаксимальныеПоказания.Период
	|			И РазделительМакПок.РегистраторМаксПоказаний = энргМаксимальныеПоказания.Регистратор
	|			И РазделительМакПок.РазделительМаксПоказаний = энргМаксимальныеПоказания.Разделитель
	|			И (энргМаксимальныеПоказания.Организация = &Организация)
	|			И (энргМаксимальныеПоказания.Район = &Район)
	|			И (энргМаксимальныеПоказания.КлючПомещения = &КлючПомещения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПоказанияПУПоследовательность.Организация КАК Организация,
	|	энргПоказанияПУПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргПоказанияПУПоследовательность.Район КАК Район,
	|	энргПоказанияПУПоследовательность.ЧастныйСектор КАК ЧастныйСектор,
	|	энргПоказанияПУПоследовательность.Строение КАК Строение,
	|	энргПоказанияПУПоследовательность.Помещение КАК Помещение,
	|	энргПоказанияПУПоследовательность.ПриборУчета КАК ПриборУчета,
	|	энргПоказанияПУПоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	|	энргПоказанияПУПоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	|	энргПоказанияПУПоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	|	энргПоказанияПУПоследовательность.ДокРегистратор КАК ДокРегистратор,
	|	энргПоказанияПУПоследовательность.Разделитель КАК Разделитель,
	|	энргПоказанияПУПоследовательность.ВыводПрибораУчета КАК ВыводПрибораУчета,
	|	энргПоказанияПУПоследовательность.ИмяТабЧасти КАК ИмяТабЧасти,
	|	Граница.КлючПомещения КАК КлючПомещения
	|ПОМЕСТИТЬ НаборДокументов
	|ИЗ
	|	Граница КАК Граница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательность КАК энргПоказанияПУПоследовательность
	|		ПО Граница.Организация = энргПоказанияПУПоследовательность.Организация
	|			И Граница.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|			И Граница.Район = энргПоказанияПУПоследовательность.Район
	|			И Граница.ЧастныйСектор = энргПоказанияПУПоследовательность.ЧастныйСектор
	|			И Граница.Строение = энргПоказанияПУПоследовательность.Строение
	|			И Граница.Помещение = энргПоказанияПУПоследовательность.Помещение
	|			И Граница.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|			И (ВЫБОР
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|						И Граница.ДокРегистратор = энргПоказанияПУПоследовательность.ДокРегистратор
	|						И Граница.Разделитель <= энргПоказанияПУПоследовательность.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|						И Граница.ДокРегистратор < энргПоказанияПУПоследовательность.ДокРегистратор
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора < энргПоказанияПУПоследовательность.ДатаРегистратора
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Граница.ПериодРегистрации < энргПоказанияПУПоследовательность.ПериодРегистрации
	|			КОНЕЦ)
	|			И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|			И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргПоказанияПУПоследовательность.Район = &Район)
	|			И (энргПоказанияПУПоследовательность.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргПоказанияПУПоследовательность.Строение = &Строение)
	|			И (энргПоказанияПУПоследовательность.Помещение = &Помещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПоказанияПриборовУчета.Организация КАК Организация,
	|	энргПоказанияПриборовУчета.Район КАК Район,
	|	энргПоказанияПриборовУчета.КлючПомещения КАК КлючПомещения,
	|	энргПоказанияПриборовУчета.ПриборУчета КАК ПриборУчета,
	|	энргПоказанияПриборовУчета.Шкала КАК Шкала,
	|	энргПоказанияПриборовУчета.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА энргПоказанияПриборовУчета.Переворот
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БылПереворот
	|ПОМЕСТИТЬ ДанныеПоПереворотам
	|ИЗ
	|	НаборДокументов КАК НаборДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПриборовУчета КАК энргПоказанияПриборовУчета
	|		ПО НаборДокументов.Организация = энргПоказанияПриборовУчета.Организация
	|			И НаборДокументов.Район = энргПоказанияПриборовУчета.Район
	|			И НаборДокументов.КлючПомещения = энргПоказанияПриборовУчета.КлючПомещения
	|			И НаборДокументов.ПриборУчета = энргПоказанияПриборовУчета.ПриборУчета
	|			И (энргПоказанияПриборовУчета.Период МЕЖДУ НаборДокументов.ДатаРегистратора И НаборДокументов.ПериодРегистрации)
	|			И (энргПоказанияПриборовУчета.СостояниеПоказаний = ЗНАЧЕНИЕ(Перечисление.энргСостояниеПоказаний.Приняты))
	|			И НаборДокументов.ДокРегистратор <> энргПоказанияПриборовУчета.Регистратор
	|			И (энргПоказанияПриборовУчета.Организация = &Организация)
	|			И (энргПоказанияПриборовУчета.КлючПомещения = &КлючПомещения)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргПоказанияПриборовУчета.Организация,
	|	энргПоказанияПриборовУчета.Район,
	|	энргПоказанияПриборовУчета.КлючПомещения,
	|	энргПоказанияПриборовУчета.ПриборУчета,
	|	энргПоказанияПриборовУчета.Шкала,
	|	энргПоказанияПриборовУчета.ТарифнаяЗона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборДокументов.Организация КАК Организация,
	|	НаборДокументов.ПериодНачисления КАК ПериодНачисления,
	|	НаборДокументов.Район КАК Район,
	|	НаборДокументов.ЧастныйСектор КАК ЧастныйСектор,
	|	НаборДокументов.Строение КАК Строение,
	|	НаборДокументов.Помещение КАК Помещение,
	|	НаборДокументов.ПриборУчета КАК ПриборУчета,
	|	энргПоказанияПриборовУчета.Шкала КАК Шкала,
	|	энргПоказанияПриборовУчета.ТарифнаяЗона КАК ТарифнаяЗона,
	|	НаборДокументов.СостояниеПроведения КАК СостояниеПроведения,
	|	НаборДокументов.ПериодРегистрации КАК ПериодРегистрации,
	|	НаборДокументов.ДатаРегистратора КАК ДатаРегистратора,
	|	НаборДокументов.ДокРегистратор КАК ДокРегистратор,
	|	НаборДокументов.Разделитель КАК Разделитель,
	|	НаборДокументов.ВыводПрибораУчета КАК ВыводПрибораУчета,
	|	НаборДокументов.ИмяТабЧасти КАК ИмяТабЧасти,
	|	энргПоказанияПриборовУчета.Показание КАК Показание,
	|	энргПоказанияПриборовУчета.СостояниеПоказаний КАК СостояниеПоказаний,
	|	энргПоказанияПриборовУчета.Переворот КАК Переворот,
	|	энргПоказанияПриборовУчета.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	энргПоказанияПриборовУчета.КС КАК КС,
	|	энргПоказанияПриборовУчета.ТочкаУчета КАК ТочкаУчета,
	|	НаборДокументов.КлючПомещения КАК КлючПомещения
	|ПОМЕСТИТЬ ДанныеДокументов
	|ИЗ
	|	НаборДокументов КАК НаборДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПриборовУчета КАК энргПоказанияПриборовУчета
	|		ПО НаборДокументов.ПериодРегистрации = энргПоказанияПриборовУчета.Период
	|			И НаборДокументов.ДокРегистратор = энргПоказанияПриборовУчета.Регистратор
	|			И НаборДокументов.Организация = энргПоказанияПриборовУчета.Организация
	|			И НаборДокументов.КлючПомещения = энргПоказанияПриборовУчета.КлючПомещения
	|			И НаборДокументов.ПриборУчета = энргПоказанияПриборовУчета.ПриборУчета
	|			И НаборДокументов.Разделитель = энргПоказанияПриборовУчета.Разделитель
	|			И (НЕ НаборДокументов.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	|			И (энргПоказанияПриборовУчета.Организация = &Организация)
	|			И (энргПоказанияПриборовУчета.Район = &Район)
	|			И (энргПоказанияПриборовУчета.КлючПомещения = &КлючПомещения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборДокументов.Организация,
	|	НаборДокументов.ПериодНачисления,
	|	НаборДокументов.Район,
	|	НаборДокументов.ЧастныйСектор,
	|	НаборДокументов.Строение,
	|	НаборДокументов.Помещение,
	|	НаборДокументов.ПриборУчета,
	|	ЗНАЧЕНИЕ(Справочник.энргШкалыПриборовУчета.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка),
	|	НаборДокументов.СостояниеПроведения,
	|	НаборДокументов.ПериодРегистрации,
	|	НаборДокументов.ДатаРегистратора,
	|	НаборДокументов.ДокРегистратор,
	|	НаборДокументов.Разделитель,
	|	НаборДокументов.ВыводПрибораУчета,
	|	НаборДокументов.ИмяТабЧасти,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.энргСостояниеПоказаний.Отклонены),
	|	ЛОЖЬ,
	|	0,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.энргТочкиУчета.ПустаяСсылка),
	|	НаборДокументов.КлючПомещения
	|ИЗ
	|	НаборДокументов КАК НаборДокументов
	|ГДЕ
	|	НаборДокументов.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.ПериодНачисления КАК ПериодНачисления,
	|	ДанныеДокументов.Район КАК Район,
	|	ДанныеДокументов.ЧастныйСектор КАК ЧастныйСектор,
	|	ДанныеДокументов.Строение КАК Строение,
	|	ДанныеДокументов.Помещение КАК Помещение,
	|	ДанныеДокументов.ПриборУчета КАК ПриборУчета,
	|	ДанныеДокументов.Шкала КАК Шкала,
	|	ДанныеДокументов.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ДанныеДокументов.СостояниеПроведения КАК СостояниеПроведения,
	|	ДанныеДокументов.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеДокументов.ДатаРегистратора КАК ДатаРегистратора,
	|	ДанныеДокументов.ДокРегистратор КАК ДокРегистратор,
	|	ДанныеДокументов.Разделитель КАК Разделитель,
	|	ДанныеДокументов.ВыводПрибораУчета КАК ВыводПрибораУчета,
	|	ДанныеДокументов.ИмяТабЧасти КАК ИмяТабЧасти,
	|	ДанныеДокументов.Показание КАК Показание,
	|	ДанныеДокументов.СостояниеПоказаний КАК СостояниеПоказаний,
	|	ДанныеДокументов.Переворот КАК Переворот,
	|	ДанныеДокументов.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ДанныеДокументов.КС КАК КС,
	|	ДанныеДокументов.ТочкаУчета КАК ТочкаУчета,
	|	ЕСТЬNULL(энргПриборыУчетаАбонента.МаксимальноВозможныеПоказания, 0) КАК МаксимальноВозможныеПоказания,
	|	ЕСТЬNULL(КоэффициентыПриборов.коэффициент, 1) КАК коэффициентПУ,
	|	ЕСТЬNULL(ПоследниеНомераПозиции.НомерПозиции, -1) КАК НомерПозици,
	|	ЕСТЬNULL(ДанныеПоПереворотам.БылПереворот, 0) КАК БылПереворот,
	|	ЕСТЬNULL(ДанныеМаксПоказаний.ПериодМаксПоказаний, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодМаксПоказаний,
	|	ЕСТЬNULL(ДанныеМаксПоказаний.МаксПоказания, -1) КАК МаксПоказания,
	|	ЕСТЬNULL(ДанныеМаксПоказаний.РегистраторМаксПоказаний, ЗНАЧЕНИЕ(Документ.энргРегистрацияПоказанийАбонента.ПустаяСсылка)) КАК РегистраторМаксПоказаний,
	|	ЕСТЬNULL(ДанныеМаксПоказаний.ДатаРегистратораМаксимальных, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистратораМаксимальных,
	|	ДанныеДокументов.КлючПомещения КАК КлючПомещения,
	|	ЕСТЬNULL(энргПриборыУчетаАбонента.РегистрируетОбъем, ЛОЖЬ) КАК РегистрируетОбъем
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.энргПриборыУчетаАбонента КАК энргПриборыУчетаАбонента
	|		ПО ДанныеДокументов.ПриборУчета = энргПриборыУчетаАбонента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыПриборов КАК КоэффициентыПриборов
	|		ПО ДанныеДокументов.КлючПомещения = КоэффициентыПриборов.КлючПомещения
	|			И ДанныеДокументов.ПриборУчета = КоэффициентыПриборов.ПриборУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеНомераПозиции КАК ПоследниеНомераПозиции
	|		ПО ДанныеДокументов.Организация = ПоследниеНомераПозиции.Организация
	|			И ДанныеДокументов.ПериодНачисления = ПоследниеНомераПозиции.ПериодНачисления
	|			И ДанныеДокументов.Район = ПоследниеНомераПозиции.Район
	|			И ДанныеДокументов.ЧастныйСектор = ПоследниеНомераПозиции.ЧастныйСектор
	|			И ДанныеДокументов.Строение = ПоследниеНомераПозиции.Строение
	|			И ДанныеДокументов.Помещение = ПоследниеНомераПозиции.Помещение
	|			И ДанныеДокументов.ПриборУчета = ПоследниеНомераПозиции.ПриборУчета
	|			И ДанныеДокументов.Шкала = ПоследниеНомераПозиции.Шкала
	|			И ДанныеДокументов.ТарифнаяЗона = ПоследниеНомераПозиции.ТарифнаяЗона
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоПереворотам КАК ДанныеПоПереворотам
	|		ПО ДанныеДокументов.Организация = ДанныеПоПереворотам.Организация
	|			И ДанныеДокументов.Район = ДанныеПоПереворотам.Район
	|			И ДанныеДокументов.КлючПомещения = ДанныеПоПереворотам.КлючПомещения
	|			И ДанныеДокументов.ПриборУчета = ДанныеПоПереворотам.ПриборУчета
	|			И ДанныеДокументов.Шкала = ДанныеПоПереворотам.Шкала
	|			И ДанныеДокументов.ТарифнаяЗона = ДанныеПоПереворотам.ТарифнаяЗона
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеМаксПоказаний КАК ДанныеМаксПоказаний
	|		ПО ДанныеДокументов.Организация = ДанныеМаксПоказаний.Организация
	|			И ДанныеДокументов.Район = ДанныеМаксПоказаний.Район
	|			И ДанныеДокументов.КлючПомещения = ДанныеМаксПоказаний.КлючПомещения
	|			И ДанныеДокументов.ПриборУчета = ДанныеМаксПоказаний.ПриборУчета
	|			И ДанныеДокументов.Шкала = ДанныеМаксПоказаний.Шкала
	|			И ДанныеДокументов.ТарифнаяЗона = ДанныеМаксПоказаний.ТарифнаяЗона
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	ЧастныйСектор,
	|	Строение,
	|	Помещение,
	|	ПриборУчета,
	|	Шкала,
	|	ТарифнаяЗона,
	|	ПериодРегистрации,
	|	ДатаРегистратора,
	|	ДокРегистратор,
	|	Разделитель";
	
	Если Отбор.Строение = Неопределено Тогда
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.ЧастныйСектор = &ЧастныйСектор","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.ЧастныйСектор = &ЧастныйСектор)","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПУПоследовательность.ЧастныйСектор = &ЧастныйСектор","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПУПоследовательность.ЧастныйСектор = &ЧастныйСектор)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПредоставленныеПоказания.ЧастныйСектор = &ЧастныйСектор)","");
		
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.Строение = &Строение","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.Строение = &Строение)","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПУПоследовательность.Строение = &Строение","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПУПоследовательность.Строение = &Строение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПредоставленныеПоказания.Строение = &Строение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргКлючиПомещений.Строение = &Строение)","");
		
		Текст 			= СтрЗаменить(Текст,"И КлючПомещения = &КлючПомещения","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.Помещение = &Помещение",""); 
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.Помещение = &Помещение","");
		Текст 			= СтрЗаменить(Текст,"И (энргМаксимальныеПоказания.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПУПоследовательность.Помещение = &Помещение)","");
		Текст			= СтрЗаменить(Текст,"И энргПоказанияПУПоследовательность.Помещение = &Помещение","");		
		Текст 			= СтрЗаменить(Текст,"И (энргПредоставленныеПоказания.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргКлючиПомещений.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргМаксимальныеПоказания.КлючПомещения = &КлючПомещения)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.КлючПомещения = &КлючПомещения)","");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Отбор.Строение) Тогда
		
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.Строение = &Строение","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.Строение = &Строение)","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПУПоследовательность.Строение = &Строение","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПУПоследовательность.Строение = &Строение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПредоставленныеПоказания.Строение = &Строение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргКлючиПомещений.Строение = &Строение)","");
		
		Текст 			= СтрЗаменить(Текст,"И КлючПомещения = &КлючПомещения","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.Помещение = &Помещение",""); 
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.Помещение = &Помещение","");
		Текст 			= СтрЗаменить(Текст,"И (энргМаксимальныеПоказания.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПУПоследовательность.Помещение = &Помещение)","");
		Текст			= СтрЗаменить(Текст,"И энргПоказанияПУПоследовательность.Помещение = &Помещение","");		
		Текст 			= СтрЗаменить(Текст,"И (энргПредоставленныеПоказания.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргКлючиПомещений.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргМаксимальныеПоказания.КлючПомещения = &КлючПомещения)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.КлючПомещения = &КлючПомещения)","");
		
	ИначеЕсли Отбор.Помещение = Неопределено Тогда
		Текст 			= СтрЗаменить(Текст,"И КлючПомещения = &КлючПомещения","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.Помещение = &Помещение",""); 
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.Помещение = &Помещение","");
		Текст 			= СтрЗаменить(Текст,"И (энргМаксимальныеПоказания.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПУПоследовательность.Помещение = &Помещение)","");
		Текст			= СтрЗаменить(Текст,"И энргПоказанияПУПоследовательность.Помещение = &Помещение","");		
		Текст 			= СтрЗаменить(Текст,"И (энргПредоставленныеПоказания.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргКлючиПомещений.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргМаксимальныеПоказания.КлючПомещения = &КлючПомещения)","");
		Текст 			= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.КлючПомещения = &КлючПомещения)","");
	КонецЕсли;
		
	Запрос.Текст 		= Текст;
	Запрос.УстановитьПараметр("Район",								Отбор.район);
	Запрос.УстановитьПараметр("Организация",						Отбор.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",					Отбор.ПериодНачисления);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",				НачалоПериодаРасчета);
	
	Если НЕ Отбор.Строение = Неопределено тогда
		Запрос.УстановитьПараметр("ЧастныйСектор",					Не ЗначениеЗаполнено(Отбор.Строение));
		Если ЗначениеЗаполнено(Отбор.Строение) Тогда
			Запрос.УстановитьПараметр("Строение",					Отбор.Строение);
			Если НЕ Отбор.Помещение = Неопределено Тогда
				Запрос.УстановитьПараметр("Помещение",				Отбор.Помещение);
				
				КлючПомещения = РегистрыСведений.энргКлючиПомещений.Получить(Новый Структура("Строение, Помещение", Отбор.Строение, Отбор.Помещение)).КлючПомещения;

				Запрос.УстановитьПараметр("КлючПомещения",			КлючПомещения);

				Если Не Отбор.ПриборУчета  = Неопределено Тогда
					Запрос.УстановитьПараметр("ПриборУчета",		Отбор.ПриборУчета);
				КонецЕсли; 			
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПровестиПоказанияПриборовУчета(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления)
	
	Организация 									= ПараметрыПроведений.Организация;
	ПериодНачисления 								= ПараметрыПроведений.ПериодНачисления;
	Район 											= ПараметрыПроведений.Район;
	ЧастныйСектор									= ПараметрыПроведений.ЧастныйСектор;
	Строение										= ПараметрыПроведений.Строение;
	Помещение 										= ПараметрыПроведений.Помещение;
	КлючПомещения 									= ПараметрыПроведений.КлючПомещения;
	ПриборУчета 									= ПараметрыПроведений.ПриборУчета;
	Шкала		 									= ПараметрыПроведений.Шкала;
	ТарифнаяЗона 									= ПараметрыПроведений.ТарифнаяЗона;
	НомерПозиции 									= ПараметрыПроведений.НомерПозиции;
	ПоказанияС 										= ПараметрыПроведений.ПоказанияС;
	ПоказанияПО 									= ПараметрыПроведений.ПоказанияПО;
	НачалоПериодаРасчета 							= ПараметрыПроведений.НачалоПериодаРасчета;
	РегистрируетОбъем								= ПараметрыПроведений.РегистрируетОбъем;
	
	Попытка
		Исключен  									= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
		ПроведенВПоследоватености  					= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
		
		ПоказанияОтклонены 							= Перечисления.энргСостояниеПоказаний.Отклонены;
		ПоказанияПриняты 							= Перечисления.энргСостояниеПоказаний.Приняты;
		ПустоеСостояниеПоказаний					= Перечисления.энргСостояниеПоказаний.ПустаяСсылка();
		ТекНомерПозиции 							= НомерПозиции;
		
		ПредыдущиеМакс 								= Макс(МассивДокументов[0].МаксПоказания,0);
		ПериодПредыдущихМаксПок 					= МассивДокументов[0].ПериодМаксПоказаний;
		РегистраторМаксимальных 					= МассивДокументов[0].РегистраторМаксПоказаний;
		ДатаРегистратораМаксимальных 				= МассивДокументов[0].ДатаРегистратораМаксимальных;
		
		МаксимальныеПоказания  						= Новый Соответствие; 		
		
		для Каждого Выборка из МассивДокументов цикл
			
			Если Выборка.состояниепроведения  = Исключен тогда 			
				// Очищаем данные.
				НаборПоследовательности 			= РегистрыСведений.энргПоказанияПУПоследовательность.СоздатьНаборЗаписей();
				НаборПоследовательности.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
				НаборПоследовательности.Отбор.Организация.установить(Организация);
				НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
				НаборПоследовательности.Отбор.Район.установить(Район);
				НаборПоследовательности.Отбор.СостояниеПроведения.установить(Выборка.СостояниеПроведения);
				НаборПоследовательности.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
				НаборПоследовательности.Отбор.Строение.установить(Строение);
				НаборПоследовательности.Отбор.Помещение.установить(Помещение);
				НаборПоследовательности.Отбор.ПриборУчета.установить(ПриборУчета);
				НаборПоследовательности.Отбор.ПериодРегистрации.установить(Выборка.ПериодРегистрации);
				НаборПоследовательности.Отбор.ДатаРегистратора.установить(Выборка.ДатаРегистратора);
				НаборПоследовательности.Записать();
				
				// Получаем таблицу максимальных показаний по регистратору.
				НаборМаксПоказаний  				= РегистрыСведений.энргМаксимальныеПоказания.СоздатьНаборЗаписей();
				НаборМаксПоказаний.Отбор.регистратор.установить(Выборка.ДокРегистратор);
				НаборМаксПоказаний.Записать();
				
				НаборПредоставленных 				= РегистрыСведений.энргПредоставленныеПоказания.СоздатьНаборЗаписей();
				НаборПредоставленных.Отбор.Докрегистратор.установить(Выборка.ДокРегистратор);
				НаборПредоставленных.Записать();
				
				Продолжить;
			КонецЕсли;
			
			
			Если РегистрируетОбъем Тогда
				//Нет необходимости обновлять данные
				Возврат Ложь;
			КонецЕсли;
			
			
			СостояниеПоказаний  					= Выборка.состояниеПоказаний;
			Переворот  								= Выборка.Переворот;
			
			ОбновлятьДанные 						= Истина;
			ЭтоОткрытие 							= Ложь;
			
			Текущие  								= Выборка.Показание;
			
			ЭтоМаксимальные 						= ПредыдущиеМакс <=  Текущие или Переворот;
			
			// Обновляем показания в документа.
			Если ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргОперацияСЛицевымСчетом") тогда
				Если  Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргОперацияСЛС_ОткрытиеЛС тогда
					ОбновлятьДанные 				= Ложь;
					ЭтоОткрытие 					= Истина;
					ЭтоМаксимальные 				= Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргОперацияСУслугами")	тогда
				Если Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ПодключениеУслуги тогда
					ОбновлятьДанные 				= Ложь;
					ЭтоМаксимальные 				= Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргПерерасчет")	тогда
				ОбновлятьДанные 					= Ложь;
				ЭтоМаксимальные 					= Истина;
			ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргОперацияСПриборомУчета")	тогда
				Если Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ВводПУ тогда
					ОбновлятьДанные 				= Ложь;
					ЭтоМаксимальные 				= Истина;
				ИначеЕсли Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ЗаменаПУ тогда
					ТабЧасть  						= Выборка.ДокРегистратор["ТочкиУчета"];
					СтрокиПрибора 					= ТабЧасть.найтиСтроки(Новый Структура("ПриборУчета",ПриборУчета));
					Если СтрокиПрибора.количество() = 0 тогда
						ОбновлятьДанные 			= Ложь;
						ЭтоМаксимальные 			= Истина;
					КонецЕсли;
				КонецЕсли; 				 
			КонецЕсли;
			
			Если ОбновлятьДанные тогда
				ПараметрыОперации  					= Новый Структура("
				|КлючПомещения,ПриборУчета,Шкала,ТарифнаяЗона,ПредыдущиеМакс,ПериодПредыдущихМаксПок,СостояниеПоказаний,ДанныеМаксимальногоПотребления,
				|Переворот,НомерСтрокиТЧ,Разделитель,ДанныеСреднегоОбъема,МаксимальноВозможныеПоказания,КоэффициентПУ,ИмяТабЧасти,КС",
				КлючПомещения,ПриборУчета,Шкала,ТарифнаяЗона,ПредыдущиеМакс,ПериодПредыдущихМаксПок,СостояниеПоказаний,ДанныеМаксимальногоПотребления,
				Переворот,Выборка.НомерСтрокиТЧ,Выборка.разделитель,ДанныеСреднегоОбъема,Выборка.МаксимальноВозможныеПоказания,Выборка.КоэффициентПУ,Выборка.ИмяТабЧасти,Выборка.КС);
				
				ОбновитьДанныеВДокументе(ПериодНачисления,Выборка.ДокРегистратор,ПараметрыОперации);
				
				СостояниеПоказаний 					= ПараметрыОперации.СостояниеПоказаний;
				Переворот 							= ПараметрыОперации.Переворот;
			КонецЕсли;	
			
			// Получаем таблицу максимальных показаний по регистратору.
			НаборМаксПоказаний  					= РегистрыСведений.энргМаксимальныеПоказания.СоздатьНаборЗаписей();
			НаборМаксПоказаний.Отбор.регистратор.установить(Выборка.ДокРегистратор);
			НаборМаксПоказаний.Прочитать();
			ТаблицаМаксимальных 					= НаборМаксПоказаний.Выгрузить();
			для Каждого стр из ТаблицаМаксимальных цикл
				стр.активность  					= истина;
			КонецЦикла;
			
			НаборМаксПоказаний.Очистить(); 
			НаборМаксПоказаний.Записать();  			   		
			
			Если Выборка.ДатаРегистратора < Выборка.ПериодРегистрации тогда
				// Может быть либо у потерянной квитанции или у контрольного съема который НЕ с 23-26.
				Если Выборка.БылПереворот = 1 тогда
					ЭтоМаксимальные 					= Ложь;			 
				КонецЕсли; 			 
			КонецЕсли;
			
			Если СостояниеПоказаний<> ПоказанияПриняты тогда
				ЭтоМаксимальные 						= ложь;
			КонецЕсли;
			
			ПараметрыСтрокиМаксимальных  				= Новый Структура("Период,Активность,Организация, Район,КлючПомещения,ПриборУчета,Шкала,ТарифнаяЗона,Разделитель",Выборка.ПериодРегистрации,истина,Организация,Район,КлючПомещения,ПриборУчета,Шкала,ТарифнаяЗона,Выборка.Разделитель);
			СтрокиТаблицыМаксимальных					= ТаблицаМаксимальных.НайтиСтроки(ПараметрыСтрокиМаксимальных);
			ПоказанияТекущегоПериода 					= Выборка.ПериодРегистрации >= НачалоПериодаРасчета;
			ВСрок 										= Выборка.ПериодРегистрации >= НачалоПериодаРасчета и День(Выборка.ПериодРегистрации)>=ПоказанияС и День(Выборка.ПериодРегистрации)<=ПоказанияПО;
			
			Если СостояниеПоказаний = ПоказанияПриняты и Не ЭтоОткрытие Тогда
				НаборРасчетСреднего 					= РегистрыСведений.энргРасчетСреднегоОбъема.СоздатьНаборЗаписей();
				НаборРасчетСреднего.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",истина);
				СтрокаНабор  							= НаборРасчетСреднего.Добавить();
				СтрокаНабор.Организация 	 			= Организация;
				СтрокаНабор.Район						= Район;
				СтрокаНабор.Строение					= Строение;
				СтрокаНабор.Помещение					= Помещение;
				СтрокаНабор.ЧастныйСектор				= ЧастныйСектор;
				СтрокаНабор.ТочкаУчета					= Выборка.ТочкаУчета;
				СтрокаНабор.Шкала						= Шкала;
				СтрокаНабор.ТарифнаяЗона				= ТарифнаяЗона;
				СтрокаНабор.ПериодНачисления			= ПериодНачисления;
				СтрокаНабор.ДокРегистратор  			= Выборка.ДокРегистратор;
				СтрокаНабор.Разделитель 				= Выборка.Разделитель;
				СтрокаНабор.ОбъемУслуги 				= Текущие - ПредыдущиеМакс;
				НаборРасчетСреднего.Записать(Ложь);
			КонецЕсли;
			
			Если ЭтоМаксимальные или ВСрок тогда 				
				Если ЭтоМаксимальные тогда
					ПериодПредыдущихМаксПок 			= Выборка.ПериодРегистрации;
					ПредыдущиеМакс 						= Текущие;				
					РегистраторМаксимальных 			= Выборка.ДокРегистратор;
					ДатаРегистратораМаксимальных 		= Выборка.ДатаРегистратора
				КонецЕсли;
				
				Если СтрокиТаблицыМаксимальных.Количество() = 0 и ЭтоМаксимальные тогда
					// Строки такой нет значит добавляем.
					СтрокаМаксимальных  				= ТаблицаМаксимальных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаМаксимальных,ПараметрыСтрокиМаксимальных);
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
				ИначеЕсли СтрокиТаблицыМаксимальных.Количество() = 1 и ЭтоМаксимальные тогда
					// Меняем показания.
					СтрокаМаксимальных  				= СтрокиТаблицыМаксимальных[0];
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
				ИначеЕсли ЭтоМаксимальные тогда
					// Удаляем строки по прибору учета.
					для Каждого СтрокаТаблицыМаксимальных из СтрокиТаблицыМаксимальных цикл
						ТаблицаМаксимальных.Удалить(СтрокаТаблицыМаксимальных)
					КонецЦикла;
					// Добавляем новую.
					СтрокаМаксимальных  				= ТаблицаМаксимальных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаМаксимальных,ПараметрыСтрокиМаксимальных);
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
				иначе
					Если СтрокиТаблицыМаксимальных.Количество() > 0 тогда
						// Удаляем строку из максимальных показаний.
						ТаблицаМаксимальных.Удалить(СтрокиТаблицыМаксимальных[0]);
					КонецЕсли;  // Иначе ничего не деляем там и так не никаких данных.
				КонецЕсли; // Иначе ничего не делаем оставляем строку так как она уже есть.
			иначе
				Если СтрокиТаблицыМаксимальных.Количество() > 0 тогда
					// Удаляем строку из максимальных показаний.
					ТаблицаМаксимальных.Удалить(СтрокиТаблицыМаксимальных[0]);
				КонецЕсли;  // Иначе ничего не деляем там и так не никаких данных.
			КонецЕсли; 			
			
			Если  СостояниеПоказаний = ПоказанияПриняты или ВСрок тогда
				// Записываем набор.
				НаборПредоставленных 					= РегистрыСведений.энргПредоставленныеПоказания.СоздатьНаборЗаписей();
				НаборПредоставленных.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",истина);
				СтрокаНабор  							= НаборПредоставленных.Добавить();
				СтрокаНабор.Организация 	 			= Организация;
				СтрокаНабор.ПериодНачисления 			= ПериодНачисления;
				СтрокаНабор.Район						= Район;
				СтрокаНабор.ЧастныйСектор				= ЧастныйСектор;
				СтрокаНабор.Строение					= Строение;
				СтрокаНабор.Помещение					= Помещение;
				СтрокаНабор.ПриборУчета					= ПриборУчета;
				СтрокаНабор.Шкала						= Шкала;
				СтрокаНабор.ТарифнаяЗона				= ТарифнаяЗона;
				СтрокаНабор.НомерПозиции  				= ?(ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргПерерасчет"),-1,ТекНомерПозиции);
				СтрокаНабор.ДатаРегистратора  			= Выборка.ПериодРегистрации;
				СтрокаНабор.ДокРегистратор  			= Выборка.ДокРегистратор;
				СтрокаНабор.Разделитель		  			= Выборка.Разделитель;
				СтрокаНабор.Показания  					= ?(ПредыдущиеМакс<0,0,ПредыдущиеМакс);
				СтрокаНабор.ВСрок  						= ВСрок;
				СтрокаНабор.ПоказанияТекущегоПериода	= ПоказанияТекущегоПериода;
				
				НаборПредоставленных.Записать(Ложь); 				     			
				
				ТекНомерПозиции 						= ТекНомерПозиции +1;			
			КонецЕсли;   
			
			// Записываем максимальные показаний.
			НаборМаксПоказаний.Загрузить(ТаблицаМаксимальных);
			НаборМаксПоказаний.Записать(Ложь);			
		КонецЦикла;
		
		// Записываем максимальные показаний.
		Набор = РегистрыСведений.энргМаксимальныеПоказанияСрез.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
		Набор.Отбор.Строение.установить(Строение);
		Набор.Отбор.Помещение.установить(Помещение);
		Набор.Отбор.ПриборУчета.установить(ПриборУчета);
		Набор.Отбор.Шкала.установить(Шкала);
		Набор.Отбор.ТарифнаяЗона.установить(ТарифнаяЗона);
		Набор.Записать();
		
		Набор 										= РегистрыСведений.энргМаксимальныеПоказанияСрез.СоздатьНаборЗаписей();
		СтрокаНабора 								= Набор.Добавить();
		СтрокаНабора.Организация 					= Организация;
		СтрокаНабора.ПериодНачисления 				= ПериодНачисления;
		СтрокаНабора.Район							= Район;
		СтрокаНабора.ЧастныйСектор					= ЧастныйСектор;
		СтрокаНабора.Строение						= Строение;
		СтрокаНабора.Помещение						= Помещение;
		СтрокаНабора.ПриборУчета					= ПриборУчета;
		СтрокаНабора.Шкала							= Шкала;
		СтрокаНабора.ТарифнаяЗона					= ТарифнаяЗона;
		СтрокаНабора.Показания 						= ПредыдущиеМакс;
		СтрокаНабора.ДокРегистратор 				= РегистраторМаксимальных;
		СтрокаНабора.ДатаРегистратора 				= ДатаРегистратораМаксимальных;
		Набор.Записать(Ложь);
		Возврат Ложь;
	Исключение
		Представление  								= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Представление);
		Возврат Истина;
	КонецПопытки;
КонецФункции

Функция ИмяТабличнойЧастиПоказаний(Регистратор)
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргКвитанция") тогда
		Возврат "ПриборыУчета";
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОбходнойЛист")	тогда
		Возврат "ПриборыУчета";
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСЛицевымСчетом")	тогда
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСЛС_ОткрытиеЛС тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСЛС_ЗакрытиеЛС тогда
			Возврат "ТочкиУчетаЗакрытие";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли  ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСПриборомУчета")	тогда
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ВводПУ тогда
			Возврат "ПоказанияПУВВод";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ЗаменаПУ тогда
			Возврат "ПоказанияПУЗамена";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ВыводПУ тогда
			Возврат "ПоказанияПУВывод";	
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСУслугами")	тогда	
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ПодключениеУслуги тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ОтключениеУслуги тогда
			Возврат "ТочкиУчета";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргПлатежноеПоручениеВходящие")	тогда	
		Возврат "Показания";
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргРегистрацияПоказанийАбонента")	тогда	
		Возврат "ПриборыУчета";			
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргПоступлениеОплатыЧерезКонтроллера")	тогда	
		Возврат "ПриборыУчета";		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргПоступлениеОплатыЧерезКонтроллера")	тогда	
		Возврат "ПриборыУчета";		
	иначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргРегистрацияПоказанийМКД") тогда
		Возврат "ПриборыУчета";
	ИначеЕсли  ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСПриборомУчетаМКД")	тогда
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчетаМКД_ВводПУ тогда
			Возврат "ПоказанияПУВВод";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчетаМКД_ЗаменаПУ тогда
			Возврат "ПоказанияПУЗамена";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчетаМКД_ВыводПУ тогда
			Возврат "ПоказанияПУВывод";	
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСУслугамиМКД")	тогда	
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугамиМКД_ПодключениеУслуги тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ОтключениеУслуги тогда
			Возврат "ТочкиУчетаВывод";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОткрытиеМКД")	тогда	
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОткрытиеМКД_Открытие тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОткрытиеМКД_Закрытие тогда
			Возврат "ТочкиУчетаВывод";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОбходнойЛистМКД")	тогда
		Возврат "ПриборыУчета";

	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
	КонецЕсли; 	
КонецФункции

Функция ИмяТабличнойЧастиТочкиУчета(Регистратор)
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргКвитанция") тогда
		Возврат "ТочкиУчета";
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОбходнойЛист")	тогда
		Возврат "ТочкиУчета";
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСЛицевымСчетом")	тогда
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСЛС_ОткрытиеЛС тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСЛС_ЗакрытиеЛС тогда
			Возврат "ТочкиУчетаЗакрытие";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли  ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСПриборомУчета")	тогда
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ВводПУ тогда
			Возврат "ПриборыУчетаВВод";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ЗаменаПУ тогда
			Возврат "ПриборыУчетаЗамена";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчета_ВыводПУ тогда
			Возврат "ПриборыУчетаВывод";	
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСУслугами")	тогда	
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ПодключениеУслуги тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ОтключениеУслуги тогда
			Возврат "ТочкиУчета";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргПлатежноеПоручениеВходящие")	тогда	
		Возврат "ТочкиУчета";
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргРегистрацияПоказанийАбонента")	тогда	
		Возврат "ТочкиУчета";			
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргПоступлениеОплатыЧерезКонтроллера")	тогда	
		Возврат "ТочкиУчета";		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргПоступлениеОплатыЧерезКонтроллера")	тогда	
		Возврат "ТочкиУчета";		
	иначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргРегистрацияПоказанийМКД") тогда
		Возврат "ТочкиУчета";
	ИначеЕсли  ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСПриборомУчетаМКД")	тогда
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчетаМКД_ВводПУ тогда
			Возврат "ПриборыУчетаВВод";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчетаМКД_ЗаменаПУ тогда
			Возврат "ПриборыУчетаЗамена";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчетаМКД_ВыводПУ тогда
			Возврат "ПриборыУчетаВывод";	
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");	
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОперацияСУслугамиМКД")	тогда	
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугамиМКД_ПодключениеУслуги тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугами_ОтключениеУслуги тогда
			Возврат "ТочкиУчетаВывод";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОткрытиеМКД")	тогда	
		Если Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОткрытиеМКД_Открытие тогда
			Возврат "ТочкиУчета";
		ИначеЕсли Регистратор.ВидОперации  = Перечисления.энргВидыОпераций.энргОткрытиеМКД_Закрытие тогда
			Возврат "ТочкиУчетаВывод";
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
		КонецЕсли; 	
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.энргОбходнойЛистМКД")	тогда
		Возврат "ТочкиУчета";
	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен вид операции");
	КонецЕсли; 	
КонецФункции

#КонецОбласти

#Область ВосстановитьПоследовательностьПоказанияПУМКД

Функция ОбновитьДанныеВДокументеМКД(ПериодНачисления,ДокРегистратор,ПараметрыОперации)
	
	ПоказанияПриняты 									= Перечисления.энргСостояниеПоказаний.Приняты;
	
	ДокОбъект  											= ДокРегистратор.получитьОбъект();
	ДокОбъект.ДополнительныеСвойства.вставить("ВосстановлениеПоследовательности",Истина);
	
	Если ЗначениеЗаполнено(ПараметрыОперации.ИмяТабЧасти) тогда
		ИмяТЧ 											= ПараметрыОперации.ИмяТабЧасти;
	иначе
		ИмяТЧ 											= ИмяТабличнойЧастиПоказаний(ДокРегистратор);
	КонецЕсли;
	
	тчТочкиУчета 										= ДокОбъект["ТочкиУчета"];
	тчШкалыПриборов 									= ДокОбъект["ШкалыПриборовУчета"];
	тчПоказания 										= ДокОбъект["ПоказанияПриборовУчета"];
	
	Если ПараметрыОперации.НомерСтрокиТЧ > 0 тогда
		СтрокаПоказаний									= тчПоказания[ПараметрыОперации.НомерСтрокиТЧ-1];
		СтрокиШкал										= тчШкалыПриборов.НайтиСтроки(Новый Структура("IDСтроки", СтрокаПоказаний.IDСтроки));
		Если СтрокиШкал.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
		КонецЕсли;		
		СтрокаШкалы 									= СтрокиШкал[0];
		СтрокиТочки										= тчТочкиУчета.НайтиСтроки(Новый Структура("IDСтроки", СтрокаШкалы.IDСтрокиТочкиУчета));
		Если СтрокиТочки.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			Возврат Ложь;
		КонецЕсли;
		СтрокаТочки 									= СтрокиТочки[0];
	иначе		
		СтрокиТочки		 								= тчТочкиУчета.найтиСтроки(Новый Структура("ПриборУчета",ПараметрыОперации.ПриборУчета));
		Если СтрокиТочки.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для прибора учета "   +  ПараметрыОперации.ПриборУчета + " найдено более одной строки");
			Возврат Ложь;
		КонецЕсли;		
		СтрокаТочки  									= СтрокиТочки[0];
		
		СтрокиШкал 										= тчШкалыПриборов.найтиСтроки(Новый Структура("IDСтрокиТочкиУчета, Шкала",СтрокаТочки.IDСтроки, ПараметрыОперации.Шкала));
		Если СтрокиШкал.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для шкалы - " + ПараметрыОперации.Шкала + " прибора учета "   +  ПараметрыОперации.ПриборУчета + " найдено более одной строки");
			Возврат Ложь;
		КонецЕсли;
		
		СтрокаШкалы                                    	= СтрокиШкал[0];
		СтрокиПоказаний 								= тчПоказания.НайтиСтроки(Новый Структура("IDСтроки, ТарифнаяЗона", СтрокаШкалы.IDСтроки, ПараметрыОперации.ТарифнаяЗона));
		Если СтрокиПоказаний.Количество() <> 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе " + ДокРегистратор + " для шкалы - " + ПараметрыОперации.Шкала + " прибора учета " +  ПараметрыОперации.ПриборУчета + " и тарифной зоны " +  ПараметрыОперации.ТарифнаяЗона  + " найдено более одной строки");
			Возврат Ложь;
		КонецЕсли;
		
		СтрокаПоказаний 								= СтрокиПоказаний[0];
		
	КонецЕсли;  
	
	ДанныеСреднегоОбъема 								= ПараметрыОперации.ДанныеСреднегоОбъема; 	
	
	Если СтрокаТочки = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета] = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли  ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала] = Неопределено тогда
		СреднийОбъема 									= 0;
	ИначеЕсли ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала][ПараметрыОперации.ТарифнаяЗона] = Неопределено тогда
		СреднийОбъема 									= 0;
	иначе
		СреднийОбъема 									= ДанныеСреднегоОбъема[СтрокаТочки.ТочкаУчета][ПараметрыОперации.Шкала][ПараметрыОперации.ТарифнаяЗона];
	КонецЕсли;
	
	ДанныеМаксимальногоПотребления 						= ПараметрыОперации.ДанныеМаксимальногоПотребления;
	Если ДанныеМаксимальногоПотребления[СтрокаТочки.Услуга] = Неопределено тогда
		МаксимальноВозможныйОбъемПотребления 			= 1000;
	иначе 
		СтрокаСоотвествия 								= ДанныеМаксимальногоПотребления[СтрокаТочки.Услуга];
		МаксимальноВозможныйОбъемПотребления 			= СтрокаСоотвествия.ПовышающийКоэффициент * СтрокаСоотвествия.МаксимальноеПотребления;	
	КонецЕсли;
	
	ДанныеСтроки 										= энргРаботаСПоказаниямиПриборовУчетаКлиентСервер.ДанныеСтрокиПоказанийМКД();
	
	ДанныеСтроки.ТекущиеПоказания	 					= СтрокаПоказаний.ТекущиеПоказания;
	ДанныеСтроки.Разница 								= СтрокаПоказаний.Разница;
	ДанныеСтроки.ПереворотИзмененПользователем 			= СтрокаПоказаний.ПереворотИзмененПользователем;
	ДанныеСтроки.СтатусИзмененПользователем 			= СтрокаПоказаний.СтатусИзмененПользователем;
		
	ДанныеСтроки.ПредыдущиеПоказания 					= ПараметрыОперации.ПредыдущиеМакс;
	ДанныеСтроки.ДатаПоследнихПоказаний 				= НачалоДня(ПараметрыОперации.ПериодПредыдущихМаксПок);
	ДанныеСтроки.СостояниеПоказаний 					= ПараметрыОперации.СостояниеПоказаний; 	
	ДанныеСтроки.СреднийОбъемПотребления 				= СреднийОбъема;
	ДанныеСтроки.МаксимальноВозможныеПоказания			= ПараметрыОперации.МаксимальноВозможныеПоказания;
	ДанныеСтроки.МаксимальноВозможныйОбъемПотребления	= МаксимальноВозможныйОбъемПотребления; 
	ДанныеСтроки.КоэффициентПУ							= ПараметрыОперации.КоэффициентПУ; 	
	ДанныеСтроки.Переворот 								= ПараметрыОперации.Переворот;			
	КонтрольныйСъем 									= ПараметрыОперации.КС;
	
	энргРаботаСПоказаниямиПриборовУчетаКлиентСервер.ПересчитатьСтрокуПриборовУчетаМКД(ДанныеСтроки, ПериодНачисления,КонтрольныйСъем);
	
	Если ДанныеСтрокиИзменены(ДанныеСтроки,СтрокаПоказаний) тогда
		// Если что то изменилось в документе.
		ЗаполнитьЗначенияСвойств(СтрокаПоказаний,ДанныеСтроки);				
		ДокОбъект.ДополнительныеСвойства.вставить("ВосстановлениеПоследовательности",Истина);
		ДокОбъект.записать();
	КонецЕсли;
	
	Если ДанныеСтроки.СостояниеПоказаний <> ПараметрыОперации.СостояниеПоказаний или ДанныеСтроки.Переворот <> ПараметрыОперации.Переворот тогда
		// Если данные изменились записываем их.
		НаборПоказаний 								= РегистрыСведений.энргПоказанияПриборовУчетаМКД.СоздатьНаборЗаписей();
		НаборПоказаний.Отбор.регистратор.установить(ДокРегистратор);
		НаборПоказаний.Прочитать();
		ТаблицаПоказаний  							= НаборПоказаний.Выгрузить();
		для Каждого стр из ТаблицаПоказаний цикл
			стр.активность 							= истина;
		КонецЦикла;   			
		НаборПоказаний.Очистить();
		НаборПоказаний.Записать();
		СтрокиПоказаний  							= ТаблицаПоказаний.НайтиСтроки(Новый Структура("МКД,ПриборУчета,Шкала,ТарифнаяЗона,Разделитель",ПараметрыОперации.МКД,ПараметрыОперации.ПриборУчета,ПараметрыОперации.Шкала, ПараметрыОперации.ТарифнаяЗона,ПараметрыОперации.Разделитель)); 
		Если СтрокиПоказаний.Количество() = 0 тогда 	
			// Движений по данному пу нету.	
			Если СтрокаПоказаний.ТекущиеПоказания > 0 тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не восстановлена последовательность в документе " + ДокРегистратор + " по прибору " + ПараметрыОперации.ПриборУчета);
				Возврат Ложь;
			КонецЕсли;				
		иначеЕсли СтрокиПоказаний.Количество() > 1 тогда
			// Исключительная ситуация когда в документе у одного прибора учета показания указаны более одного раза.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не восстановлена последовательность в документе " + ДокРегистратор + " по прибору " + ПараметрыОперации.ПриборУчета);
			Возврат Ложь;
		иначе
			СтрокаПоказаний  						= СтрокиПоказаний[0];
			СтрокаПоказаний.Показание 				= ДанныеСтроки.ТекущиеПоказания;
			СтрокаПоказаний.Переворот 				= ДанныеСтроки.Переворот;
			СтрокаПоказаний.СостояниеПоказаний 		= ДанныеСтроки.СостояниеПоказаний;
		КонецЕсли;			
		
		// Записываем новый набор показаний.
		НаборПоказаний 								= РегистрыСведений.энргПоказанияПриборовУчетаМКД.СоздатьНаборЗаписей();
		НаборПоказаний.Отбор.регистратор.установить(ДокРегистратор);
		НаборПоказаний.Загрузить(ТаблицаПоказаний);
		НаборПоказаний.Записать(Ложь);			
		ПараметрыОперации.СостояниеПоказаний 		= ДанныеСтроки.СостояниеПоказаний;
		ПараметрыОперации.Переворот 				= ДанныеСтроки.Переворот;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция РезультатЗапросаПоказанияПУМКД(МВТ,Отбор,НачалоПериодаРасчета) 
	
	Запрос  = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Текст =
	"ВЫБРАТЬ
	|	энргКоэффциентыПриборовУчетаСрезПоследних.КлючПомещения КАК МКД,
	|	энргКоэффциентыПриборовУчетаСрезПоследних.ПриборУчета КАК ПриборУчета,
	|	энргКоэффциентыПриборовУчетаСрезПоследних.Коэффициент КАК коэффициент
	|ПОМЕСТИТЬ КоэффициентыПриборов
	|ИЗ
	|	РегистрСведений.энргКоэффциентыПриборовУчета.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&НачалоПериодаРасчета, МЕСЯЦ), ДЕНЬ, 1),
	|			Организация = &Организация
	|				И Район = &Район
	|				И КлючПомещения = &Строение) КАК энргКоэффциентыПриборовУчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПоказанияПУПоследовательность.Организация КАК Организация,
	|	энргПоказанияПУПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргПоказанияПУПоследовательность.Район КАК Район,
	|	энргПоказанияПУПоследовательность.МКД КАК МКД,
	|	энргПоказанияПУПоследовательность.ПриборУчета КАК ПриборУчета,
	|	МИНИМУМ(энргПоказанияПУПоследовательность.ПериодРегистрации) КАК ПериодРегистрации
	|ПОМЕСТИТЬ МинимальныйПериод
	|ИЗ
	|	РегистрСведений.энргПоказанияПУПоследовательностьМКД КАК энргПоказанияПУПоследовательность
	|ГДЕ
	|	энргПоказанияПУПоследовательность.Организация = &Организация
	|	И энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления
	|	И энргПоказанияПУПоследовательность.Район = &Район
	|	И энргПоказанияПУПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	|	И энргПоказанияПУПоследовательность.МКД = &Строение
	|
	|СГРУППИРОВАТЬ ПО
	|	энргПоказанияПУПоследовательность.Организация,
	|	энргПоказанияПУПоследовательность.ПериодНачисления,
	|	энргПоказанияПУПоследовательность.Район,
	|	энргПоказанияПУПоследовательность.МКД,	
	|	энргПоказанияПУПоследовательность.ПриборУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныйПериод.Организация КАК Организация,
	|	МинимальныйПериод.ПериодНачисления КАК ПериодНачисления,
	|	МинимальныйПериод.Район КАК Район,
	|	МинимальныйПериод.МКД КАК МКД,
	|	МинимальныйПериод.ПриборУчета КАК ПриборУчета,
	|	МинимальныйПериод.ПериодРегистрации КАК ПериодРегистрации,
	|	МИНИМУМ(энргПоказанияПУПоследовательность.ДатаРегистратора) КАК ДатаРегистратора
	|ПОМЕСТИТЬ МинимальнаяДатаРегистратора
	|ИЗ
	|	МинимальныйПериод КАК МинимальныйПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательностьМКД КАК энргПоказанияПУПоследовательность
	|		ПО МинимальныйПериод.Организация = энргПоказанияПУПоследовательность.Организация
	|			И МинимальныйПериод.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|			И МинимальныйПериод.Район = энргПоказанияПУПоследовательность.Район
	|			И (энргПоказанияПУПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимальныйПериод.МКД = энргПоказанияПУПоследовательность.МКД
	|			И МинимальныйПериод.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|			И МинимальныйПериод.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|			И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|			И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргПоказанияПУПоследовательность.Район = &Район)
	|			И (энргПоказанияПУПоследовательность.МКД = &Строение)
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимальныйПериод.Организация,
	|	МинимальныйПериод.ПериодНачисления,
	|	МинимальныйПериод.Район,
	|	МинимальныйПериод.МКД,
	|	МинимальныйПериод.ПриборУчета,
	|	МинимальныйПериод.ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальнаяДатаРегистратора.Организация КАК Организация,
	|	МинимальнаяДатаРегистратора.ПериодНачисления КАК ПериодНачисления,
	|	МинимальнаяДатаРегистратора.Район КАК Район,
	|	МинимальнаяДатаРегистратора.МКД КАК МКД,
	|	МинимальнаяДатаРегистратора.ПриборУчета КАК ПриборУчета,
	|	МинимальнаяДатаРегистратора.ПериодРегистрации КАК ПериодРегистрации,
	|	МинимальнаяДатаРегистратора.ДатаРегистратора КАК ДатаРегистратора,
	|	МИНИМУМ(энргПоказанияПУПоследовательность.ДокРегистратор) КАК ДокРегистратор
	|ПОМЕСТИТЬ МинимальныйРегистратор
	|ИЗ
	|	МинимальнаяДатаРегистратора КАК МинимальнаяДатаРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательностьМКД КАК энргПоказанияПУПоследовательность
	|		ПО МинимальнаяДатаРегистратора.Организация = энргПоказанияПУПоследовательность.Организация
	|			И МинимальнаяДатаРегистратора.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|			И МинимальнаяДатаРегистратора.Район = энргПоказанияПУПоследовательность.Район
	|			И (энргПоказанияПУПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимальнаяДатаРегистратора.МКД = энргПоказанияПУПоследовательность.МКД
	|			И МинимальнаяДатаРегистратора.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|			И МинимальнаяДатаРегистратора.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|			И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|			И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргПоказанияПУПоследовательность.Район = &Район)
	|			И (энргПоказанияПУПоследовательность.МКД = &Строение)
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимальнаяДатаРегистратора.Организация,
	|	МинимальнаяДатаРегистратора.ПериодНачисления,
	|	МинимальнаяДатаРегистратора.Район,
	|	МинимальнаяДатаРегистратора.МКД,
	|	МинимальнаяДатаРегистратора.ПриборУчета,
	|	МинимальнаяДатаРегистратора.ПериодРегистрации,
	|	МинимальнаяДатаРегистратора.ДатаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.МКД КАК МКД,
	|	ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|	ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
	|	ВложенныйЗапрос.ДатаРегистратора КАК ДатаРегистратора,
	|	ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|	ВложенныйЗапрос.Разделитель КАК Разделитель,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ПериодРегистрации < &НачалоПериодаРасчета
	|			ТОГДА &НачалоПериодаРасчета
	|		ИНАЧЕ ВложенныйЗапрос.ПериодРегистрации
	|	КОНЕЦ КАК ПериодРегистрацииПоказаний
	|ПОМЕСТИТЬ Граница
	|ИЗ
	|	(ВЫБРАТЬ
	|		МинимальныйРегистратор.Организация КАК Организация,
	|		МинимальныйРегистратор.ПериодНачисления КАК ПериодНачисления,
	|		МинимальныйРегистратор.Район КАК Район,
	|		МинимальныйРегистратор.МКД КАК МКД,
	|		МинимальныйРегистратор.ПриборУчета КАК ПриборУчета,
	|		МинимальныйРегистратор.ПериодРегистрации КАК ПериодРегистрации,
	|		МинимальныйРегистратор.ДатаРегистратора КАК ДатаРегистратора,
	|		МинимальныйРегистратор.ДокРегистратор КАК ДокРегистратор,
	|		МИНИМУМ(энргПоказанияПУПоследовательность.Разделитель) КАК Разделитель
	|	ИЗ
	|		МинимальныйРегистратор КАК МинимальныйРегистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательностьМКД КАК энргПоказанияПУПоследовательность
	|			ПО МинимальныйРегистратор.Организация = энргПоказанияПУПоследовательность.Организация
	|				И МинимальныйРегистратор.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|				И МинимальныйРегистратор.Район = энргПоказанияПУПоследовательность.Район
	|				И МинимальныйРегистратор.МКД = энргПоказанияПУПоследовательность.МКД
	|				И МинимальныйРегистратор.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|				И МинимальныйРегистратор.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|				И МинимальныйРегистратор.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|				И (энргПоказанияПУПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|				И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|				И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|				И (энргПоказанияПУПоследовательность.Район = &Район)
	|				И (энргПоказанияПУПоследовательность.МКД = &Строение)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МинимальныйРегистратор.Организация,
	|		МинимальныйРегистратор.ПериодНачисления,
	|		МинимальныйРегистратор.Район,
	|		МинимальныйРегистратор.МКД,
	|		МинимальныйРегистратор.ПриборУчета,
	|		МинимальныйРегистратор.ПериодРегистрации,
	|		МинимальныйРегистратор.ДатаРегистратора,
	|		МинимальныйРегистратор.ДокРегистратор) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПоказанияПУПоследовательность.Организация КАК Организация,
	|	энргПоказанияПУПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргПоказанияПУПоследовательность.Район КАК Район,
	|	энргПоказанияПУПоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	|	энргПоказанияПУПоследовательность.МКД КАК МКД,
	|	энргПоказанияПУПоследовательность.ПриборУчета КАК ПриборУчета,
	|	энргПоказанияПУПоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	|	энргПоказанияПУПоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	|	энргПоказанияПУПоследовательность.ДокРегистратор КАК ДокРегистратор,
	|	энргПоказанияПУПоследовательность.Разделитель КАК Разделитель
	|ПОМЕСТИТЬ НаборПроведенныхВПоследовательности
	|ИЗ
	|	Граница КАК Граница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательностьМКД КАК энргПоказанияПУПоследовательность
	|		ПО Граница.Организация = энргПоказанияПУПоследовательность.Организация
	|			И Граница.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|			И Граница.Район = энргПоказанияПУПоследовательность.Район
	|			И Граница.МКД = энргПоказанияПУПоследовательность.МКД
	|			И Граница.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|			И (ВЫБОР
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|						И Граница.ДокРегистратор = энргПоказанияПУПоследовательность.ДокРегистратор
	|						И Граница.Разделитель > энргПоказанияПУПоследовательность.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|						И Граница.ДокРегистратор > энргПоказанияПУПоследовательность.ДокРегистратор
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора > энргПоказанияПУПоследовательность.ДатаРегистратора
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Граница.ПериодРегистрации > энргПоказанияПУПоследовательность.ПериодРегистрации
	|			КОНЕЦ)
	|			И (энргПоказанияПУПоследовательность.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности))
	|			И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|			И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргПоказанияПУПоследовательность.Район = &Район)
	|			И (энргПоказанияПУПоследовательность.МКД = &Строение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборПроведенныхВПоследовательности.Организация КАК Организация,
	|	НаборПроведенныхВПоследовательности.ПериодНачисления КАК ПериодНачисления,
	|	НаборПроведенныхВПоследовательности.Район КАК Район,
	|	НаборПроведенныхВПоследовательности.СостояниеПроведения КАК СостояниеПроведения,
	|	НаборПроведенныхВПоследовательности.МКД КАК МКД,
	|	НаборПроведенныхВПоследовательности.ПриборУчета КАК ПриборУчета,
	|	МАКСИМУМ(НаборПроведенныхВПоследовательности.ПериодРегистрации) КАК ПериодРегистрации
	|ПОМЕСТИТЬ МаксимальныйПериодРегистрацииПроведенных
	|ИЗ
	|	НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборПроведенныхВПоследовательности.Организация,
	|	НаборПроведенныхВПоследовательности.ПериодНачисления,
	|	НаборПроведенныхВПоследовательности.Район,
	|	НаборПроведенныхВПоследовательности.СостояниеПроведения,
	|	НаборПроведенныхВПоследовательности.МКД,
	|	НаборПроведенныхВПоследовательности.ПриборУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныйПериодРегистрацииПроведенных.Организация КАК Организация,
	|	МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальныйПериодРегистрацииПроведенных.Район КАК Район,
	|	МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	|	МаксимальныйПериодРегистрацииПроведенных.МКД КАК МКД,
	|	МаксимальныйПериодРегистрацииПроведенных.ПриборУчета КАК ПриборУчета,
	|	МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	|	МАКСИМУМ(НаборПроведенныхВПоследовательности.ДатаРегистратора) КАК ДатаРегистратора
	|ПОМЕСТИТЬ МаксимальнаяДатаПроведенных
	|ИЗ
	|	НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйПериодРегистрацииПроведенных КАК МаксимальныйПериодРегистрацииПроведенных
	|		ПО НаборПроведенныхВПоследовательности.Организация = МаксимальныйПериодРегистрацииПроведенных.Организация
	|			И НаборПроведенныхВПоследовательности.ПериодНачисления = МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления
	|			И НаборПроведенныхВПоследовательности.Район = МаксимальныйПериодРегистрацииПроведенных.Район
	|			И НаборПроведенныхВПоследовательности.СостояниеПроведения = МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения
	|			И НаборПроведенныхВПоследовательности.МКД = МаксимальныйПериодРегистрацииПроведенных.МКД
	|			И НаборПроведенныхВПоследовательности.ПриборУчета = МаксимальныйПериодРегистрацииПроведенных.ПриборУчета
	|			И НаборПроведенныхВПоследовательности.ПериодРегистрации = МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныйПериодРегистрацииПроведенных.Организация,
	|	МаксимальныйПериодРегистрацииПроведенных.ПериодНачисления,
	|	МаксимальныйПериодРегистрацииПроведенных.Район,
	|	МаксимальныйПериодРегистрацииПроведенных.СостояниеПроведения,
	|	МаксимальныйПериодРегистрацииПроведенных.МКД,
	|	МаксимальныйПериодРегистрацииПроведенных.ПриборУчета,
	|	МаксимальныйПериодРегистрацииПроведенных.ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальнаяДатаПроведенных.Организация КАК Организация,
	|	МаксимальнаяДатаПроведенных.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальнаяДатаПроведенных.Район КАК Район,
	|	МаксимальнаяДатаПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	|	МаксимальнаяДатаПроведенных.МКД КАК МКД,
	|	МаксимальнаяДатаПроведенных.ПриборУчета КАК ПриборУчета,
	|	МаксимальнаяДатаПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	|	МаксимальнаяДатаПроведенных.ДатаРегистратора КАК ДатаРегистратора,
	|	МАКСИМУМ(НаборПроведенныхВПоследовательности.ДокРегистратор) КАК ДокРегистратор
	|ПОМЕСТИТЬ МаксимальныйРегистраторПроведенных
	|ИЗ
	|	МаксимальнаяДатаПроведенных КАК МаксимальнаяДатаПроведенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	|		ПО МаксимальнаяДатаПроведенных.Организация = НаборПроведенныхВПоследовательности.Организация
	|			И МаксимальнаяДатаПроведенных.ПериодНачисления = НаборПроведенныхВПоследовательности.ПериодНачисления
	|			И МаксимальнаяДатаПроведенных.Район = НаборПроведенныхВПоследовательности.Район
	|			И МаксимальнаяДатаПроведенных.СостояниеПроведения = НаборПроведенныхВПоследовательности.СостояниеПроведения
	|			И МаксимальнаяДатаПроведенных.МКД = НаборПроведенныхВПоследовательности.МКД
	|			И МаксимальнаяДатаПроведенных.ПриборУчета = НаборПроведенныхВПоследовательности.ПриборУчета
	|			И МаксимальнаяДатаПроведенных.ПериодРегистрации = НаборПроведенныхВПоследовательности.ПериодРегистрации
	|			И МаксимальнаяДатаПроведенных.ДатаРегистратора = НаборПроведенныхВПоследовательности.ДатаРегистратора
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальнаяДатаПроведенных.Организация,
	|	МаксимальнаяДатаПроведенных.ПериодНачисления,
	|	МаксимальнаяДатаПроведенных.Район,
	|	МаксимальнаяДатаПроведенных.СостояниеПроведения,
	|	МаксимальнаяДатаПроведенных.МКД,
	|	МаксимальнаяДатаПроведенных.ПриборУчета,
	|	МаксимальнаяДатаПроведенных.ПериодРегистрации,
	|	МаксимальнаяДатаПроведенных.ДатаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныйРегистраторПроведенных.Организация КАК Организация,
	|	МаксимальныйРегистраторПроведенных.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальныйРегистраторПроведенных.Район КАК Район,
	|	МаксимальныйРегистраторПроведенных.СостояниеПроведения КАК СостояниеПроведения,
	|	МаксимальныйРегистраторПроведенных.МКД КАК МКД,
	|	МаксимальныйРегистраторПроведенных.ПриборУчета КАК ПриборУчета,
	|	МаксимальныйРегистраторПроведенных.ПериодРегистрации КАК ПериодРегистрации,
	|	МаксимальныйРегистраторПроведенных.ДатаРегистратора КАК ДатаРегистратора,
	|	МаксимальныйРегистраторПроведенных.ДокРегистратор КАК ДокРегистратор,
	|	МАКСИМУМ(НаборПроведенныхВПоследовательности.Разделитель) КАК Разделитель
	|ПОМЕСТИТЬ МаксимальныйРазделительПроведенных
	|ИЗ
	|	МаксимальныйРегистраторПроведенных КАК МаксимальныйРегистраторПроведенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборПроведенныхВПоследовательности КАК НаборПроведенныхВПоследовательности
	|		ПО МаксимальныйРегистраторПроведенных.Организация = НаборПроведенныхВПоследовательности.Организация
	|			И МаксимальныйРегистраторПроведенных.ПериодНачисления = НаборПроведенныхВПоследовательности.ПериодНачисления
	|			И МаксимальныйРегистраторПроведенных.Район = НаборПроведенныхВПоследовательности.Район
	|			И МаксимальныйРегистраторПроведенных.СостояниеПроведения = НаборПроведенныхВПоследовательности.СостояниеПроведения
	|			И МаксимальныйРегистраторПроведенных.МКД = НаборПроведенныхВПоследовательности.МКД
	|			И МаксимальныйРегистраторПроведенных.ПриборУчета = НаборПроведенныхВПоследовательности.ПриборУчета
	|			И МаксимальныйРегистраторПроведенных.ПериодРегистрации = НаборПроведенныхВПоследовательности.ПериодРегистрации
	|			И МаксимальныйРегистраторПроведенных.ДатаРегистратора = НаборПроведенныхВПоследовательности.ДатаРегистратора
	|			И МаксимальныйРегистраторПроведенных.ДокРегистратор = НаборПроведенныхВПоследовательности.ДокРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныйРегистраторПроведенных.Организация,
	|	МаксимальныйРегистраторПроведенных.ПериодНачисления,
	|	МаксимальныйРегистраторПроведенных.Район,
	|	МаксимальныйРегистраторПроведенных.СостояниеПроведения,
	|	МаксимальныйРегистраторПроведенных.МКД,
	|	МаксимальныйРегистраторПроведенных.ПриборУчета,
	|	МаксимальныйРегистраторПроведенных.ПериодРегистрации,
	|	МаксимальныйРегистраторПроведенных.ДатаРегистратора,
	|	МаксимальныйРегистраторПроведенных.ДокРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныйРазделительПроведенных.Организация КАК Организация,
	|	МаксимальныйРазделительПроведенных.ПериодНачисления КАК ПериодНачисления,
	|	МаксимальныйРазделительПроведенных.Район КАК Район,
	|	МаксимальныйРазделительПроведенных.МКД КАК МКД,
	|	МаксимальныйРазделительПроведенных.ПриборУчета КАК ПриборУчета,
	|	энргПредоставленныеПоказания.Шкала КАК Шкала,
	|	энргПредоставленныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МаксимальныйРазделительПроведенных.Разделитель КАК Разделитель,
	|	энргПредоставленныеПоказания.НомерПозиции КАК НомерПозиции
	|ПОМЕСТИТЬ ПоследниеНомераПозиции
	|ИЗ
	|	МаксимальныйРазделительПроведенных КАК МаксимальныйРазделительПроведенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПредоставленныеПоказанияМКД КАК энргПредоставленныеПоказания
	|		ПО МаксимальныйРазделительПроведенных.Организация = энргПредоставленныеПоказания.Организация
	|			И МаксимальныйРазделительПроведенных.ПериодНачисления = энргПредоставленныеПоказания.ПериодНачисления
	|			И МаксимальныйРазделительПроведенных.Район = энргПредоставленныеПоказания.Район
	|			И МаксимальныйРазделительПроведенных.МКД = энргПредоставленныеПоказания.МКД
	|			И МаксимальныйРазделительПроведенных.ПриборУчета = энргПредоставленныеПоказания.ПриборУчета
	|			И МаксимальныйРазделительПроведенных.ПериодРегистрации = энргПредоставленныеПоказания.ДатаРегистратора
	|			И МаксимальныйРазделительПроведенных.ДокРегистратор = энргПредоставленныеПоказания.ДокРегистратор
	|			И МаксимальныйРазделительПроведенных.Разделитель = энргПредоставленныеПоказания.Разделитель
	|			И (энргПредоставленныеПоказания.Организация = &Организация)
	|			И (энргПредоставленныеПоказания.ПериодНачисления = &ПериодНачисления)
	|			И (энргПредоставленныеПоказания.Район = &Район)
	|			И (энргПредоставленныеПоказания.МКД = &Строение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргМаксимальныеПоказания.Организация КАК Организация,
	|	энргМаксимальныеПоказания.Район КАК Район,
	|	энргМаксимальныеПоказания.МКД КАК МКД,
	|	энргМаксимальныеПоказания.ПриборУчета КАК ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала КАК Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	Граница.ПериодРегистрацииПоказаний КАК ПериодРегистрацииПоказаний,
	|	Граница.ДокРегистратор КАК ДокРегистратор,
	|	Граница.Разделитель КАК Разделитель,
	|	МАКСИМУМ(энргМаксимальныеПоказания.Период) КАК ПериодМаксПоказаний
	|ПОМЕСТИТЬ МаксПерПоказаний
	|ИЗ
	|	Граница КАК Граница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказанияМКД КАК энргМаксимальныеПоказания
	|		ПО Граница.Организация = энргМаксимальныеПоказания.Организация
	|			И Граница.Район = энргМаксимальныеПоказания.Район
	|			И Граница.МКД = энргМаксимальныеПоказания.МКД
	|			И Граница.ПриборУчета = энргМаксимальныеПоказания.ПриборУчета
	|			И (ВЫБОР
	|				КОГДА Граница.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И Граница.ДокРегистратор = энргМаксимальныеПоказания.Регистратор
	|						И Граница.Разделитель > энргМаксимальныеПоказания.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И Граница.ДокРегистратор > энргМаксимальныеПоказания.Регистратор
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Граница.ПериодРегистрацииПоказаний > энргМаксимальныеПоказания.Период
	|			КОНЕЦ)
	|			И (энргМаксимальныеПоказания.Организация = &Организация)
	|			И (энргМаксимальныеПоказания.Район = &Район)
	|			И (энргМаксимальныеПоказания.МКД = &Строение)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргМаксимальныеПоказания.Организация,
	|	энргМаксимальныеПоказания.Район,
	|	энргМаксимальныеПоказания.МКД,
	|	энргМаксимальныеПоказания.ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона,
	|	Граница.ПериодРегистрацииПоказаний,
	|	Граница.ДокРегистратор,
	|	Граница.Разделитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргМаксимальныеПоказания.Организация КАК Организация,
	|	энргМаксимальныеПоказания.Район КАК Район,
	|	энргМаксимальныеПоказания.МКД КАК МКД,
	|	энргМаксимальныеПоказания.ПриборУчета КАК ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала КАК Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МаксПерПоказаний.ПериодРегистрацииПоказаний КАК ПериодРегистрацииПоказаний,
	|	МаксПерПоказаний.ДокРегистратор КАК ДокРегистратор,
	|	МаксПерПоказаний.Разделитель КАК Разделитель,
	|	МаксПерПоказаний.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	|	МАКСИМУМ(энргМаксимальныеПоказания.Регистратор) КАК РегистраторМаксПоказаний
	|ПОМЕСТИТЬ РегМакПок
	|ИЗ
	|	МаксПерПоказаний КАК МаксПерПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказанияМКД КАК энргМаксимальныеПоказания
	|		ПО МаксПерПоказаний.Организация = энргМаксимальныеПоказания.Организация
	|			И МаксПерПоказаний.Район = энргМаксимальныеПоказания.Район
	|			И МаксПерПоказаний.МКД = энргМаксимальныеПоказания.МКД
	|			И МаксПерПоказаний.ПриборУчета = энргМаксимальныеПоказания.ПриборУчета
	|			И МаксПерПоказаний.Шкала = энргМаксимальныеПоказания.Шкала
	|			И МаксПерПоказаний.ТарифнаяЗона = энргМаксимальныеПоказания.ТарифнаяЗона
	|			И МаксПерПоказаний.ПериодМаксПоказаний = энргМаксимальныеПоказания.Период
	|			И (ВЫБОР
	|				КОГДА МаксПерПоказаний.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И МаксПерПоказаний.ДокРегистратор = энргМаксимальныеПоказания.Регистратор
	|						И МаксПерПоказаний.Разделитель > энргМаксимальныеПоказания.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА МаксПерПоказаний.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И МаксПерПоказаний.ДокРегистратор > энргМаксимальныеПоказания.Регистратор
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ МаксПерПоказаний.ПериодРегистрацииПоказаний > энргМаксимальныеПоказания.Период
	|			КОНЕЦ)
	|			И (энргМаксимальныеПоказания.Организация = &Организация)
	|			И (энргМаксимальныеПоказания.Район = &Район)
	|			И (энргМаксимальныеПоказания.МКД = &Строение)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргМаксимальныеПоказания.Организация,
	|	энргМаксимальныеПоказания.Район,
	|	энргМаксимальныеПоказания.МКД,
	|	энргМаксимальныеПоказания.ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона,
	|	МаксПерПоказаний.ПериодРегистрацииПоказаний,
	|	МаксПерПоказаний.ДокРегистратор,
	|	МаксПерПоказаний.Разделитель,
	|	МаксПерПоказаний.ПериодМаксПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргМаксимальныеПоказания.Организация КАК Организация,
	|	энргМаксимальныеПоказания.Район КАК Район,
	|	энргМаксимальныеПоказания.МКД КАК МКД,
	|	энргМаксимальныеПоказания.ПриборУчета КАК ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала КАК Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона КАК ТарифнаяЗона,
	|	РегМакПок.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	|	РегМакПок.РегистраторМаксПоказаний КАК РегистраторМаксПоказаний,
	|	МАКСИМУМ(ЕСТЬNULL(энргМаксимальныеПоказания.Разделитель, 0)) КАК РазделительМаксПоказаний
	|ПОМЕСТИТЬ РазделительМакПок
	|ИЗ
	|	РегМакПок КАК РегМакПок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказанияМКД КАК энргМаксимальныеПоказания
	|		ПО РегМакПок.Организация = энргМаксимальныеПоказания.Организация
	|			И РегМакПок.Район = энргМаксимальныеПоказания.Район
	|			И РегМакПок.МКД = энргМаксимальныеПоказания.МКД
	|			И РегМакПок.ПриборУчета = энргМаксимальныеПоказания.ПриборУчета
	|			И РегМакПок.Шкала = энргМаксимальныеПоказания.Шкала
	|			И РегМакПок.ТарифнаяЗона = энргМаксимальныеПоказания.ТарифнаяЗона
	|			И РегМакПок.ПериодМаксПоказаний = энргМаксимальныеПоказания.Период
	|			И РегМакПок.РегистраторМаксПоказаний = энргМаксимальныеПоказания.Регистратор
	|			И (ВЫБОР
	|				КОГДА РегМакПок.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И РегМакПок.ДокРегистратор = энргМаксимальныеПоказания.Регистратор
	|						И РегМакПок.Разделитель > энргМаксимальныеПоказания.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА РегМакПок.ПериодРегистрацииПоказаний = энргМаксимальныеПоказания.Период
	|						И РегМакПок.ДокРегистратор > энргМаксимальныеПоказания.Регистратор
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ РегМакПок.ПериодРегистрацииПоказаний > энргМаксимальныеПоказания.Период
	|			КОНЕЦ)
	|			И (энргМаксимальныеПоказания.Организация = &Организация)
	|			И (энргМаксимальныеПоказания.Район = &Район)
	|			И (энргМаксимальныеПоказания.МКД = &Строение)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргМаксимальныеПоказания.Организация,
	|	энргМаксимальныеПоказания.Район,
	|	энргМаксимальныеПоказания.МКД,
	|	энргМаксимальныеПоказания.ПриборУчета,
	|	энргМаксимальныеПоказания.Шкала,
	|	энргМаксимальныеПоказания.ТарифнаяЗона,
	|	РегМакПок.ПериодМаксПоказаний,
	|	РегМакПок.РегистраторМаксПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазделительМакПок.Организация КАК Организация,
	|	РазделительМакПок.Район КАК Район,
	|	РазделительМакПок.МКД КАК МКД,
	|	РазделительМакПок.ПриборУчета КАК ПриборУчета,
	|	РазделительМакПок.Шкала КАК Шкала,
	|	РазделительМакПок.ТарифнаяЗона КАК ТарифнаяЗона,
	|	РазделительМакПок.ПериодМаксПоказаний КАК ПериодМаксПоказаний,
	|	РазделительМакПок.РегистраторМаксПоказаний КАК РегистраторМаксПоказаний,
	|	энргМаксимальныеПоказания.ДатаРегистратора КАК ДатаРегистратораМаксимальных,
	|	энргМаксимальныеПоказания.Показание КАК МаксПоказания
	|ПОМЕСТИТЬ ДанныеМаксПоказаний
	|ИЗ
	|	РазделительМакПок КАК РазделительМакПок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказанияМКД КАК энргМаксимальныеПоказания
	|		ПО РазделительМакПок.Организация = энргМаксимальныеПоказания.Организация
	|			И РазделительМакПок.Район = энргМаксимальныеПоказания.Район
	|			И РазделительМакПок.МКД = энргМаксимальныеПоказания.МКД
	|			И РазделительМакПок.ПриборУчета = энргМаксимальныеПоказания.ПриборУчета
	|			И РазделительМакПок.Шкала = энргМаксимальныеПоказания.Шкала
	|			И РазделительМакПок.ТарифнаяЗона = энргМаксимальныеПоказания.ТарифнаяЗона
	|			И РазделительМакПок.ПериодМаксПоказаний = энргМаксимальныеПоказания.Период
	|			И РазделительМакПок.РегистраторМаксПоказаний = энргМаксимальныеПоказания.Регистратор
	|			И РазделительМакПок.РазделительМаксПоказаний = энргМаксимальныеПоказания.Разделитель
	|			И (энргМаксимальныеПоказания.Организация = &Организация)
	|			И (энргМаксимальныеПоказания.Район = &Район)
	|			И (энргМаксимальныеПоказания.МКД = &Строение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПоказанияПУПоследовательность.Организация КАК Организация,
	|	энргПоказанияПУПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргПоказанияПУПоследовательность.Район КАК Район,
	|	энргПоказанияПУПоследовательность.МКД КАК МКД,
	|	энргПоказанияПУПоследовательность.ПриборУчета КАК ПриборУчета,
	|	энргПоказанияПУПоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	|	энргПоказанияПУПоследовательность.ПериодРегистрации КАК ПериодРегистрации,
	|	энргПоказанияПУПоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	|	энргПоказанияПУПоследовательность.ДокРегистратор КАК ДокРегистратор,
	|	энргПоказанияПУПоследовательность.Разделитель КАК Разделитель,
	|	энргПоказанияПУПоследовательность.ВыводПрибораУчета КАК ВыводПрибораУчета,
	|	энргПоказанияПУПоследовательность.ИмяТабЧасти КАК ИмяТабЧасти
	|ПОМЕСТИТЬ НаборДокументов
	|ИЗ
	|	Граница КАК Граница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПУПоследовательностьМКД КАК энргПоказанияПУПоследовательность
	|		ПО Граница.Организация = энргПоказанияПУПоследовательность.Организация
	|			И Граница.ПериодНачисления = энргПоказанияПУПоследовательность.ПериодНачисления
	|			И Граница.Район = энргПоказанияПУПоследовательность.Район
	|			И Граница.МКД = энргПоказанияПУПоследовательность.МКД
	|			И Граница.ПриборУчета = энргПоказанияПУПоследовательность.ПриборУчета
	|			И (ВЫБОР
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|						И Граница.ДокРегистратор = энргПоказанияПУПоследовательность.ДокРегистратор
	|						И Граница.Разделитель <= энргПоказанияПУПоследовательность.Разделитель
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора = энргПоказанияПУПоследовательность.ДатаРегистратора
	|						И Граница.ДокРегистратор < энргПоказанияПУПоследовательность.ДокРегистратор
	|					ТОГДА ИСТИНА
	|				КОГДА Граница.ПериодРегистрации = энргПоказанияПУПоследовательность.ПериодРегистрации
	|						И Граница.ДатаРегистратора < энргПоказанияПУПоследовательность.ДатаРегистратора
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Граница.ПериодРегистрации < энргПоказанияПУПоследовательность.ПериодРегистрации
	|			КОНЕЦ)
	|			И (энргПоказанияПУПоследовательность.Организация = &Организация)
	|			И (энргПоказанияПУПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргПоказанияПУПоследовательность.Район = &Район)
	|			И (энргПоказанияПУПоследовательность.МКД = &Строение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПоказанияПриборовУчета.Организация КАК Организация,
	|	энргПоказанияПриборовУчета.Район КАК Район,
	|	энргПоказанияПриборовУчета.МКД КАК МКД,
	|	энргПоказанияПриборовУчета.ПриборУчета КАК ПриборУчета,
	|	энргПоказанияПриборовУчета.Шкала КАК Шкала,
	|	энргПоказанияПриборовУчета.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА энргПоказанияПриборовУчета.Переворот
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БылПереворот
	|ПОМЕСТИТЬ ДанныеПоПереворотам
	|ИЗ
	|	НаборДокументов КАК НаборДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПриборовУчетаМКД КАК энргПоказанияПриборовУчета
	|		ПО НаборДокументов.Организация = энргПоказанияПриборовУчета.Организация
	|			И НаборДокументов.Район = энргПоказанияПриборовУчета.Район
	|			И НаборДокументов.МКД = энргПоказанияПриборовУчета.МКД
	|			И НаборДокументов.ПриборУчета = энргПоказанияПриборовУчета.ПриборУчета
	|			И (энргПоказанияПриборовУчета.Период МЕЖДУ НаборДокументов.ДатаРегистратора И НаборДокументов.ПериодРегистрации)
	|			И (энргПоказанияПриборовУчета.СостояниеПоказаний = ЗНАЧЕНИЕ(Перечисление.энргСостояниеПоказаний.Приняты))
	|			И НаборДокументов.ДокРегистратор <> энргПоказанияПриборовУчета.Регистратор
	|			И (энргПоказанияПриборовУчета.Организация = &Организация)
	|			И (энргПоказанияПриборовУчета.Район = &Район)
	|			И (энргПоказанияПриборовУчета.МКД = &Строение)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргПоказанияПриборовУчета.Организация,
	|	энргПоказанияПриборовУчета.Район,
	|	энргПоказанияПриборовУчета.МКД,
	|	энргПоказанияПриборовУчета.ПриборУчета,
	|	энргПоказанияПриборовУчета.Шкала,
	|	энргПоказанияПриборовУчета.ТарифнаяЗона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборДокументов.Организация КАК Организация,
	|	НаборДокументов.ПериодНачисления КАК ПериодНачисления,
	|	НаборДокументов.Район КАК Район,
	|	НаборДокументов.МКД КАК МКД,
	|	НаборДокументов.ПриборУчета КАК ПриборУчета,
	|	энргПоказанияПриборовУчета.Шкала КАК Шкала,
	|	энргПоказанияПриборовУчета.ТарифнаяЗона КАК ТарифнаяЗона,
	|	НаборДокументов.СостояниеПроведения КАК СостояниеПроведения,
	|	НаборДокументов.ПериодРегистрации КАК ПериодРегистрации,
	|	НаборДокументов.ДатаРегистратора КАК ДатаРегистратора,
	|	НаборДокументов.ДокРегистратор КАК ДокРегистратор,
	|	НаборДокументов.Разделитель КАК Разделитель,
	|	НаборДокументов.ВыводПрибораУчета КАК ВыводПрибораУчета,
	|	НаборДокументов.ИмяТабЧасти КАК ИмяТабЧасти,
	|	энргПоказанияПриборовУчета.Показание КАК Показание,
	|	энргПоказанияПриборовУчета.СостояниеПоказаний КАК СостояниеПоказаний,
	|	энргПоказанияПриборовУчета.Переворот КАК Переворот,
	|	энргПоказанияПриборовУчета.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	энргПоказанияПриборовУчета.КС КАК КС,
	|	энргПоказанияПриборовУчета.ТочкаУчета
	|ПОМЕСТИТЬ ДанныеДокументов
	|ИЗ
	|	НаборДокументов КАК НаборДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргПоказанияПриборовУчетаМКД КАК энргПоказанияПриборовУчета
	|		ПО НаборДокументов.ПериодРегистрации = энргПоказанияПриборовУчета.Период
	|			И НаборДокументов.ДокРегистратор = энргПоказанияПриборовУчета.Регистратор
	|			И НаборДокументов.Организация = энргПоказанияПриборовУчета.Организация
	|			И НаборДокументов.МКД = энргПоказанияПриборовУчета.МКД
	|			И НаборДокументов.ПриборУчета = энргПоказанияПриборовУчета.ПриборУчета
	|			И НаборДокументов.Разделитель = энргПоказанияПриборовУчета.Разделитель
	|			И (НЕ НаборДокументов.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	|			И (энргПоказанияПриборовУчета.Организация = &Организация)
	|			И (энргПоказанияПриборовУчета.Район = &Район)
	|			И (энргПоказанияПриборовУчета.МКД = &Строение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборДокументов.Организация,
	|	НаборДокументов.ПериодНачисления,
	|	НаборДокументов.Район,
	|	НаборДокументов.МКД,
	|	НаборДокументов.ПриборУчета,
	|	ЗНАЧЕНИЕ(Справочник.энргШкалыПриборовУчета.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка),
	|	НаборДокументов.СостояниеПроведения,
	|	НаборДокументов.ПериодРегистрации,
	|	НаборДокументов.ДатаРегистратора,
	|	НаборДокументов.ДокРегистратор,
	|	НаборДокументов.Разделитель,
	|	НаборДокументов.ВыводПрибораУчета,
	|	НаборДокументов.ИмяТабЧасти,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.энргСостояниеПоказаний.Отклонены),
	|	ЛОЖЬ,
	|	0,
	|	ЛОЖЬ,
	|	Значение(Справочник.энргТочкиУчета.ПустаяСсылка)
	|ИЗ
	|	НаборДокументов КАК НаборДокументов
	|ГДЕ
	|	НаборДокументов.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.ПериодНачисления КАК ПериодНачисления,
	|	ДанныеДокументов.Район КАК Район,
	|	ДанныеДокументов.МКД КАК МКД,
	|	ДанныеДокументов.ПриборУчета КАК ПриборУчета,
	|	ДанныеДокументов.Шкала КАК Шкала,
	|	ДанныеДокументов.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ДанныеДокументов.СостояниеПроведения КАК СостояниеПроведения,
	|	ДанныеДокументов.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеДокументов.ДатаРегистратора КАК ДатаРегистратора,
	|	ДанныеДокументов.ДокРегистратор КАК ДокРегистратор,
	|	ДанныеДокументов.Разделитель КАК Разделитель,
	|	ДанныеДокументов.ВыводПрибораУчета КАК ВыводПрибораУчета,
	|	ДанныеДокументов.ИмяТабЧасти КАК ИмяТабЧасти,
	|	ДанныеДокументов.Показание КАК Показание,
	|	ДанныеДокументов.СостояниеПоказаний КАК СостояниеПоказаний,
	|	ДанныеДокументов.Переворот КАК Переворот,
	|	ДанныеДокументов.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ДанныеДокументов.КС КАК КС,
	|	ДанныеДокументов.ТочкаУчета КАК ТочкаУчета,
	|	ЕСТЬNULL(энргПриборыУчетаАбонента.МаксимальноВозможныеПоказания, 0) КАК МаксимальноВозможныеПоказания,
	|	ЕСТЬNULL(КоэффициентыПриборов.коэффициент, 1) КАК коэффициентПУ,
	|	ЕСТЬNULL(ПоследниеНомераПозиции.НомерПозиции, -1) КАК НомерПозици,
	|	ЕСТЬNULL(ДанныеПоПереворотам.БылПереворот, 0) КАК БылПереворот,
	|	ЕСТЬNULL(ДанныеМаксПоказаний.ПериодМаксПоказаний, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодМаксПоказаний,
	|	ЕСТЬNULL(ДанныеМаксПоказаний.МаксПоказания, -1) КАК МаксПоказания,
	|	ЕСТЬNULL(ДанныеМаксПоказаний.РегистраторМаксПоказаний, ЗНАЧЕНИЕ(Документ.энргРегистрацияПоказанийАбонента.ПустаяСсылка)) КАК РегистраторМаксПоказаний,
	|	ЕСТЬNULL(ДанныеМаксПоказаний.ДатаРегистратораМаксимальных, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистратораМаксимальных
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.энргПриборыУчетаАбонента КАК энргПриборыУчетаАбонента
	|		ПО ДанныеДокументов.ПриборУчета = энргПриборыУчетаАбонента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыПриборов КАК КоэффициентыПриборов
	|		ПО ДанныеДокументов.МКД = КоэффициентыПриборов.МКД
	|			И ДанныеДокументов.ПриборУчета = КоэффициентыПриборов.ПриборУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеНомераПозиции КАК ПоследниеНомераПозиции
	|		ПО ДанныеДокументов.Организация = ПоследниеНомераПозиции.Организация
	|			И ДанныеДокументов.ПериодНачисления = ПоследниеНомераПозиции.ПериодНачисления
	|			И ДанныеДокументов.Район = ПоследниеНомераПозиции.Район
	|			И ДанныеДокументов.МКД = ПоследниеНомераПозиции.МКД
	|			И ДанныеДокументов.ПриборУчета = ПоследниеНомераПозиции.ПриборУчета
	|			И ДанныеДокументов.Шкала = ПоследниеНомераПозиции.Шкала
	|			И ДанныеДокументов.ТарифнаяЗона = ПоследниеНомераПозиции.ТарифнаяЗона
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоПереворотам КАК ДанныеПоПереворотам
	|		ПО ДанныеДокументов.Организация = ДанныеПоПереворотам.Организация
	|			И ДанныеДокументов.Район = ДанныеПоПереворотам.Район
	|			И ДанныеДокументов.МКД = ДанныеПоПереворотам.МКД
	|			И ДанныеДокументов.ПриборУчета = ДанныеПоПереворотам.ПриборУчета
	|			И ДанныеДокументов.Шкала = ДанныеПоПереворотам.Шкала
	|			И ДанныеДокументов.ТарифнаяЗона = ДанныеПоПереворотам.ТарифнаяЗона
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеМаксПоказаний КАК ДанныеМаксПоказаний
	|		ПО ДанныеДокументов.Организация = ДанныеМаксПоказаний.Организация
	|			И ДанныеДокументов.Район = ДанныеМаксПоказаний.Район
	|			И ДанныеДокументов.МКД = ДанныеМаксПоказаний.МКД
	|			И ДанныеДокументов.ПриборУчета = ДанныеМаксПоказаний.ПриборУчета
	|			И ДанныеДокументов.Шкала = ДанныеМаксПоказаний.Шкала
	|			И ДанныеДокументов.ТарифнаяЗона = ДанныеМаксПоказаний.ТарифнаяЗона
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	МКД,
	|	ПриборУчета,
	|	Шкала,
	|	ТарифнаяЗона,
	|	ПериодРегистрации,
	|	ДатаРегистратора,
	|	ДокРегистратор,
	|	Разделитель";
	
	Если Отбор.Строение = Неопределено  тогда
		Текст 		= СтрЗаменить(Текст,"И КлючПомещения = &Строение","");		
		Текст 		= СтрЗаменить(Текст,"И энргПоказанияПриборовУчета.МКД = &Строение","");				
		Текст 		= СтрЗаменить(Текст,"И (энргПоказанияПриборовУчета.МКД = &Строение)","");		
		Текст		= СтрЗаменить(Текст,"И (энргПоказанияПУПоследовательность.МКД = &Строение)","");		
		Текст		= СтрЗаменить(Текст,"И энргПоказанияПУПоследовательность.МКД = &Строение","");		
		Текст 		= СтрЗаменить(Текст,"И (энргПредоставленныеПоказания.МКД = &Строение)","");		
		Текст 		= СтрЗаменить(Текст,"И (энргМаксимальныеПоказания.МКД = &Строение)","");		
	КонецЕсли;
		
	Запрос.Текст 	= Текст;
	Запрос.УстановитьПараметр("Район",					Отбор.район);
	Запрос.УстановитьПараметр("Организация",			Отбор.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",		Отбор.ПериодНачисления);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",	НачалоПериодаРасчета);	
	Если НЕ Отбор.Строение = Неопределено тогда
		Запрос.УстановитьПараметр("Строение",			Отбор.Строение);
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПровестиПоказанияПриборовУчетаМКД(ПараметрыПроведений,МассивДокументов,ДанныеСреднегоОбъема,ДанныеМаксимальногоПотребления)
	
	Организация 									= ПараметрыПроведений.Организация;
	ПериодНачисления 								= ПараметрыПроведений.ПериодНачисления;
	Район 											= ПараметрыПроведений.Район;
	МКД 											= ПараметрыПроведений.МКД;
	ПриборУчета 									= ПараметрыПроведений.ПриборУчета;
	Шкала		 									= ПараметрыПроведений.Шкала;
	ТарифнаяЗона 									= ПараметрыПроведений.ТарифнаяЗона;
	НомерПозиции 									= ПараметрыПроведений.НомерПозиции;
	ПоказанияС 										= ПараметрыПроведений.ПоказанияС;
	ПоказанияПО 									= ПараметрыПроведений.ПоказанияПО;
	НачалоПериодаРасчета 							= ПараметрыПроведений.НачалоПериодаРасчета;
	
	Попытка
		Исключен  									= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
		ПроведенВПоследоватености  					= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
		
		ПоказанияОтклонены 							= Перечисления.энргСостояниеПоказаний.Отклонены;
		ПоказанияПриняты 							= Перечисления.энргСостояниеПоказаний.Приняты;
		ПустоеСостояниеПоказаний					= Перечисления.энргСостояниеПоказаний.ПустаяСсылка();
		ТекНомерПозиции 							= НомерПозиции;
		
		ПредыдущиеМакс 								= Макс(МассивДокументов[0].МаксПоказания,0);
		ПериодПредыдущихМаксПок 					= МассивДокументов[0].ПериодМаксПоказаний;
		РегистраторМаксимальных 					= МассивДокументов[0].РегистраторМаксПоказаний;
		ДатаРегистратораМаксимальных 				= МассивДокументов[0].ДатаРегистратораМаксимальных;
		
		МаксимальныеПоказания  						= Новый Соответствие; 		
		
		для Каждого Выборка из МассивДокументов цикл
			
			Если Выборка.состояниепроведения  = Исключен тогда 			
				// Очищаем данные.
				НаборПоследовательности 			= РегистрыСведений.энргПоказанияПУПоследовательностьМКД.СоздатьНаборЗаписей();
				НаборПоследовательности.Отбор.ДокРегистратор.установить(Выборка.ДокРегистратор);
				НаборПоследовательности.Отбор.Организация.установить(Организация);
				НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
				НаборПоследовательности.Отбор.Район.установить(Район);
				НаборПоследовательности.Отбор.СостояниеПроведения.установить(Выборка.СостояниеПроведения);
				НаборПоследовательности.Отбор.МКД.установить(МКД);
				НаборПоследовательности.Отбор.ПриборУчета.установить(ПриборУчета);
				НаборПоследовательности.Отбор.ПериодРегистрации.установить(Выборка.ПериодРегистрации);
				НаборПоследовательности.Отбор.ДатаРегистратора.установить(Выборка.ДатаРегистратора);
				НаборПоследовательности.Записать();
				
				// Получаем таблицу максимальных показаний по регистратору.
				НаборМаксПоказаний  				= РегистрыСведений.энргМаксимальныеПоказанияМКД.СоздатьНаборЗаписей();
				НаборМаксПоказаний.Отбор.регистратор.установить(Выборка.ДокРегистратор);
				НаборМаксПоказаний.Записать();
				
				НаборПредоставленных 				= РегистрыСведений.энргПредоставленныеПоказанияМКД.СоздатьНаборЗаписей();
				НаборПредоставленных.Отбор.Докрегистратор.установить(Выборка.ДокРегистратор);
				НаборПредоставленных.Записать();
				
				Продолжить;
			КонецЕсли;
			
			СостояниеПоказаний  					= Выборка.состояниеПоказаний;
			Переворот  								= Выборка.Переворот;
			ЭтоОткрытие 							= Ложь;
			ОбновлятьДанные 						= Истина;
			// Обновляем показания в документа.
			Если ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргОткрытиеМКД") тогда
				Если  Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргОткрытиеМКД_Открытие тогда
					ОбновлятьДанные 				= Ложь;
					ЭтоОткрытие						= Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргОперацияСУслугамиМКД")	тогда
				Если Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргОперацияСУслугамиМКД_ПодключениеУслуги тогда
					ОбновлятьДанные 				= Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Выборка.ДокРегистратор) = Тип("ДокументСсылка.энргОперацияСПриборомУчетаМКД")	тогда
				Если Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчетаМКД_ВводПУ тогда
					ОбновлятьДанные 				= Ложь;
				ИначеЕсли Выборка.ДокРегистратор.Видоперации  = Перечисления.энргВидыОпераций.энргОперацияСПриборомУчетаМКД_ЗаменаПУ Тогда
					ТабЧасть  						= Выборка.ДокРегистратор["ТочкиУчета"];
					СтрокиПрибора 					= ТабЧасть.найтиСтроки(Новый Структура("ПриборУчета",ПриборУчета));
					Если СтрокиПрибора.количество() = 0 тогда
						ОбновлятьДанные 			= Ложь;
					КонецЕсли;
				КонецЕсли; 				 
			КонецЕсли;
			
			Если ОбновлятьДанные тогда
				ПараметрыОперации  					= Новый Структура("
				|МКД,ПриборУчета,Шкала,ТарифнаяЗона,ПредыдущиеМакс,ПериодПредыдущихМаксПок,СостояниеПоказаний,ДанныеМаксимальногоПотребления,
				|Переворот,НомерСтрокиТЧ,Разделитель,ДанныеСреднегоОбъема,МаксимальноВозможныеПоказания,КоэффициентПУ,ИмяТабЧасти,КС",
				МКД,ПриборУчета,Шкала,ТарифнаяЗона,ПредыдущиеМакс,ПериодПредыдущихМаксПок,СостояниеПоказаний,ДанныеМаксимальногоПотребления,
				Переворот,Выборка.НомерСтрокиТЧ,Выборка.разделитель,ДанныеСреднегоОбъема,Выборка.МаксимальноВозможныеПоказания,Выборка.КоэффициентПУ,Выборка.ИмяТабЧасти,Выборка.КС);
				
				Если Не ОбновитьДанныеВДокументеМКД(ПериодНачисления,Выборка.ДокРегистратор,ПараметрыОперации) Тогда
					Возврат Истина;
				КонецЕсли;
							
				СостояниеПоказаний 					= ПараметрыОперации.СостояниеПоказаний;
				Переворот 							= ПараметрыОперации.Переворот;
			КонецЕсли;	
						
			// Получаем таблицу максимальных показаний по регистратору.
			НаборМаксПоказаний  					= РегистрыСведений.энргМаксимальныеПоказанияМКД.СоздатьНаборЗаписей();
			НаборМаксПоказаний.Отбор.регистратор.установить(Выборка.ДокРегистратор);
			НаборМаксПоказаний.Прочитать();
			ТаблицаМаксимальных 					= НаборМаксПоказаний.Выгрузить();
			для Каждого стр из ТаблицаМаксимальных цикл
				стр.активность  = истина;
			КонецЦикла;
			
			НаборМаксПоказаний.Очистить(); 
			НаборМаксПоказаний.Записать(); 
			
			Текущие  								= Выборка.Показание;
			
			ЭтоМаксимальные 						= ПредыдущиеМакс <=  Текущие или Переворот;
			
			Если Выборка.ДатаРегистратора < Выборка.ПериодРегистрации тогда
				// Может быть либо у потерянной квитанции или у контрольного съема который НЕ с 23-26.
				Если Выборка.БылПереворот = 1 тогда
					ЭтоМаксимальные 					= Ложь;			 
				КонецЕсли; 			 
			КонецЕсли;
			
			Если СостояниеПоказаний<> ПоказанияПриняты тогда
				ЭтоМаксимальные 						= ложь;
			КонецЕсли;
			
			ПараметрыСтрокиМаксимальных  				= Новый Структура("Период,Активность,Организация,Район,МКД,ПриборУчета,Шкала,ТарифнаяЗона,Разделитель",Выборка.ПериодРегистрации,истина,Организация,Район,МКД,ПриборУчета,Шкала,ТарифнаяЗона,Выборка.Разделитель);
			СтрокиТаблицыМаксимальных					= ТаблицаМаксимальных.НайтиСтроки(ПараметрыСтрокиМаксимальных);
			ПоказанияТекущегоПериода 					= Выборка.ПериодРегистрации >= НачалоПериодаРасчета;
			ВСрок 										= Выборка.ПериодРегистрации >= НачалоПериодаРасчета и День(Выборка.ПериодРегистрации)>=ПоказанияС и День(Выборка.ПериодРегистрации)<=ПоказанияПО;
			
			Если СостояниеПоказаний = ПоказанияПриняты И Не ЭтоОткрытие Тогда
				НаборРасчетСреднего 					= РегистрыСведений.энргРасчетСреднегоОбъемаМКД.СоздатьНаборЗаписей();
				НаборРасчетСреднего.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",истина);
				СтрокаНабор  							= НаборРасчетСреднего.Добавить();
				СтрокаНабор.Организация 	 			= Организация;
				СтрокаНабор.Район						= Район;
				СтрокаНабор.МКД							= МКД;
				СтрокаНабор.ТочкаУчета					= Выборка.ТочкаУчета;
				СтрокаНабор.Шкала						= Шкала;
				СтрокаНабор.ТарифнаяЗона				= ТарифнаяЗона;
				СтрокаНабор.ПериодНачисления			= ПериодНачисления;
				СтрокаНабор.ДокРегистратор  			= Выборка.ДокРегистратор;
				СтрокаНабор.Разделитель 				= Выборка.Разделитель;
				СтрокаНабор.ОбъемУслуги 				= Текущие - ПредыдущиеМакс;
				НаборРасчетСреднего.Записать(Ложь);
			КонецЕсли;
			
			Если ЭтоМаксимальные или ВСрок тогда 				
				Если ЭтоМаксимальные тогда
					ПериодПредыдущихМаксПок 			= Выборка.ПериодРегистрации;
					ПредыдущиеМакс 						= Текущие;				
					РегистраторМаксимальных 			= Выборка.ДокРегистратор;
					ДатаРегистратораМаксимальных 		= Выборка.ДатаРегистратора
				КонецЕсли;
				
				Если СтрокиТаблицыМаксимальных.Количество() = 0 и ЭтоМаксимальные тогда
					// Строки такой нет значит добавляем.
					СтрокаМаксимальных  				= ТаблицаМаксимальных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаМаксимальных,ПараметрыСтрокиМаксимальных);
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
				ИначеЕсли СтрокиТаблицыМаксимальных.Количество() = 1 и ЭтоМаксимальные тогда
					// Меняем показания.
					СтрокаМаксимальных  				= СтрокиТаблицыМаксимальных[0];
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
				ИначеЕсли ЭтоМаксимальные тогда
					// Удаляем строки по прибору учета.
					для Каждого СтрокаТаблицыМаксимальных из СтрокиТаблицыМаксимальных цикл
						ТаблицаМаксимальных.Удалить(СтрокаТаблицыМаксимальных)
					КонецЦикла;
					// Добавляем новую.
					СтрокаМаксимальных  				= ТаблицаМаксимальных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаМаксимальных,ПараметрыСтрокиМаксимальных);
					СтрокаМаксимальных.Показание 		= Выборка.Показание;
					СтрокаМаксимальных.ДатаРегистратора = Выборка.ДатаРегистратора;
				иначе
					Если СтрокиТаблицыМаксимальных.Количество() > 0 тогда
						// Удаляем строку из максимальных показаний.
						ТаблицаМаксимальных.Удалить(СтрокиТаблицыМаксимальных[0]);
					КонецЕсли;  // Иначе ничего не деляем там и так не никаких данных.
				КонецЕсли; // Иначе ничего не делаем оставляем строку так как она уже есть.
			иначе
				Если СтрокиТаблицыМаксимальных.Количество() > 0 тогда
					// Удаляем строку из максимальных показаний.
					ТаблицаМаксимальных.Удалить(СтрокиТаблицыМаксимальных[0]);
				КонецЕсли;  // Иначе ничего не деляем там и так не никаких данных.
			КонецЕсли; 			
			
			Если  СостояниеПоказаний = ПоказанияПриняты или ВСрок тогда
				// Записываем набор.
				НаборПредоставленных 					= РегистрыСведений.энргПредоставленныеПоказанияМКД.СоздатьНаборЗаписей();
				НаборПредоставленных.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",истина);
				СтрокаНабор  							= НаборПредоставленных.Добавить();
				СтрокаНабор.Организация 	 			= Организация;
				СтрокаНабор.ПериодНачисления 			= ПериодНачисления;
				СтрокаНабор.Район						= Район;
				СтрокаНабор.МКД							= МКД;
				СтрокаНабор.ПриборУчета					= ПриборУчета;
				СтрокаНабор.Шкала						= Шкала;
				СтрокаНабор.ТарифнаяЗона				= ТарифнаяЗона;
				СтрокаНабор.НомерПозиции  				= ТекНомерПозиции;
				СтрокаНабор.ДатаРегистратора  			= Выборка.ПериодРегистрации;
				СтрокаНабор.ДокРегистратор  			= Выборка.ДокРегистратор;
				СтрокаНабор.Разделитель		  			= Выборка.Разделитель;
				СтрокаНабор.Показания  					= ?(ПредыдущиеМакс<0,0,ПредыдущиеМакс);
				СтрокаНабор.ВСрок  						= ВСрок;
				СтрокаНабор.ПоказанияТекущегоПериода	= ПоказанияТекущегоПериода;
				
				НаборПредоставленных.Записать(Ложь); 				     			
				
				ТекНомерПозиции 						= ТекНомерПозиции +1;			
			КонецЕсли;   
			
			// Записываем максимальные показаний.
			НаборМаксПоказаний.Загрузить(ТаблицаМаксимальных);
			НаборМаксПоказаний.Записать(Ложь);			
		КонецЦикла;
		
		// Записываем максимальные показаний.
		Набор = РегистрыСведений.энргМаксимальныеПоказанияСрезМКД.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.установить(Организация);
		Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
		Набор.Отбор.Район.установить(Район);
		Набор.Отбор.МКД.установить(МКД);
		Набор.Отбор.ПриборУчета.установить(ПриборУчета);
		Набор.Отбор.Шкала.установить(Шкала);
		Набор.Отбор.ТарифнаяЗона.установить(ТарифнаяЗона);
		Набор.Записать();
		
		Набор 										= РегистрыСведений.энргМаксимальныеПоказанияСрезМКД.СоздатьНаборЗаписей();
		СтрокаНабора 								= Набор.Добавить();
		СтрокаНабора.Организация 					= Организация;
		СтрокаНабора.ПериодНачисления 				= ПериодНачисления;
		СтрокаНабора.Район							= Район;
		СтрокаНабора.МКД 							= МКД;
		СтрокаНабора.ПриборУчета					= ПриборУчета;
		СтрокаНабора.Шкала							= Шкала;
		СтрокаНабора.ТарифнаяЗона					= ТарифнаяЗона;
		СтрокаНабора.Показания 						= ПредыдущиеМакс;
		СтрокаНабора.ДокРегистратор 				= РегистраторМаксимальных;
		СтрокаНабора.ДатаРегистратора 				= ДатаРегистратораМаксимальных;
		Набор.Записать(Ложь);
		Возврат Ложь;
	Исключение
		Представление  								= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Представление);
		Возврат Истина;
	КонецПопытки;
	
КонецФункции 

Функция РезультатСреднийОбъемПотребленияМКД(МВТ,Отбор)
	
	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Текст 							=
	"ВЫБРАТЬ
	|	энргСреднийОбъемПотребления.Организация КАК Организация,
	|	энргСреднийОбъемПотребления.ПериодНачисления КАК ПериодНачисления,
	|	энргСреднийОбъемПотребления.Район КАК Район,
	|	энргСреднийОбъемПотребления.МКД КАК МКД,
	|	энргСреднийОбъемПотребления.ТочкаУчета КАК ТочкаУчета,
	|	энргСреднийОбъемПотребления.Шкала КАК Шкала,
	|	энргСреднийОбъемПотребления.ТарифнаяЗона КАК ТарифнаяЗона,
	|	энргСреднийОбъемПотребления.Объем КАК Объем
	|ПОМЕСТИТЬ СреднийОбъем
	|ИЗ
	|	РегистрСведений.энргСреднийОбъемПотребленияМКД КАК энргСреднийОбъемПотребления
	|ГДЕ
	|	энргСреднийОбъемПотребления.Организация = &Организация
	|	И энргСреднийОбъемПотребления.ПериодНачисления = &ПериодНачисления
	|	И энргСреднийОбъемПотребления.Район = &Район
	|	И энргСреднийОбъемПотребления.МКД = &МКД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Граница.Организация КАК Организация,
	|	Граница.ПериодНачисления КАК ПериодНачисления,
	|	Граница.Район КАК Район,
	|	Граница.МКД КАК МКД,
	|	ЕСТЬNULL(СреднийОбъем.ТочкаУчета, ЗНАЧЕНИЕ(Справочник.энргТочкиУчета.ПустаяСсылка)) КАК ТочкаУчета,
	|	ЕСТЬNULL(СреднийОбъем.Шкала, ЗНАЧЕНИЕ(Справочник.энргШкалыПриборовУчета.ПустаяСсылка)) КАК Шкала,
	|	ЕСТЬNULL(СреднийОбъем.ТарифнаяЗона, ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка)) КАК ТарифнаяЗона,
	|	ЕСТЬNULL(СреднийОбъем.Объем, 0) КАК СреднееПотребление
	|ИЗ
	|	Граница КАК Граница
	|		ЛЕВОЕ СОЕДИНЕНИЕ СреднийОбъем КАК СреднийОбъем
	|		ПО Граница.Организация = СреднийОбъем.Организация
	|			И Граница.ПериодНачисления = СреднийОбъем.ПериодНачисления
	|			И Граница.Район = СреднийОбъем.Район
	|			И Граница.МКД = СреднийОбъем.МКД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	МКД,
	|	Шкала,
	|	ТарифнаяЗона";
	
	Если не Отбор.свойство("МКД") тогда
		Текст 							= СтрЗаменить(Текст,"И энргСреднийОбъемПотребления.МКД = &МКД","");
	иначе
		Запрос.УстановитьПараметр("МКД",			Отбор.МКД);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Район",				Отбор.район);
	Запрос.УстановитьПараметр("Организация",		Отбор.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",	Отбор.ПериодНачисления);
	
	Запрос.Текст 						= Текст;
	Возврат Запрос.Выполнить();
КонецФункции

Функция ДанныеСреднегоОбъемаМКД(ВыборкаСреднийОбъем,ТекМКД) 
	
	ТекТочкаУчета					= Неопределено;
	ТекШкала 						= Неопределено;
	СоотвествиеТочек 				= Новый Соответствие;
	СоответствиеЗоны 				= Неопределено;
	СоотвествиеШкал 				= Неопределено;
	Пока ВыборкаСреднийОбъем.МКД  = ТекМКД цикл		
		Если ЗначениеЗаполнено(ВыборкаСреднийОбъем.Шкала) и ЗначениеЗаполнено(ВыборкаСреднийОбъем.ТарифнаяЗона) Тогда
			Если ТекШкала <> ВыборкаСреднийОбъем.Шкала Тогда
				Если ТекШкала <> Неопределено тогда
					СоотвествиеШкал.Вставить(ТекШкала,СоответствиеЗоны);
				КонецЕсли;
				СоотвествиеШкал		= Новый Соответствие;
				СоответствиеЗоны	= Новый Соответствие;
			КонецЕсли;
			
			Если ТекТочкаУчета <> ВыборкаСреднийОбъем.ТочкаУчета тогда
				Если ТекТочкаУчета <> Неопределено тогда
					СоотвествиеТочек.Вставить(ТекТочкаУчета,СоотвествиеШкал);
				КонецЕсли;
				СоотвествиеШкал		= Новый Соответствие;
				СоответствиеЗоны	= Новый Соответствие;
			КонецЕсли; 	
			
			СоответствиеЗоны.Вставить(ВыборкаСреднийОбъем.ТарифнаяЗона,ВыборкаСреднийОбъем.СреднееПотребление);
		КонецЕсли;
	
		Если не ВыборкаСреднийОбъем.следующий() тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	 	
	Если ТекШкала <> Неопределено тогда
		СоотвествиеШкал.Вставить(ТекШкала,СоответствиеЗоны);
	КонецЕсли;		
		
	Если ТекТочкаУчета <> Неопределено тогда
		СоотвествиеТочек.Вставить(ТекТочкаУчета,СоотвествиеШкал);
	КонецЕсли;	  
	
	Возврат СоотвествиеТочек;
	
КонецФункции

#КонецОбласти

#Область ВосстановитьПоследовательностьВзаиморасчеты

Процедура ВыполнитьОтложененоеПроведение(Организация, ПериодНачисления,Район,Строение,Абонент)
	перем ТекСтроение, ТекДок;
	
	Текст 	=
	"ВЫБРАТЬ
	|	энргОтложенныеДвиженияДокументов.ДокРегистратор КАК ДокРегистратор,
	|	энргОтложенныеДвиженияДокументов.Организация КАК Организация,
	|	энргОтложенныеДвиженияДокументов.ПериодНачисления КАК ПериодНачисления,
	|	энргОтложенныеДвиженияДокументов.Район КАК Район,
	|	энргОтложенныеДвиженияДокументов.Строение КАК Строение,
	|	энргОтложенныеДвиженияДокументов.ДатаРегистратора КАК ДатаРегистратора
	|ПОМЕСТИТЬ ДокументыНачисления
	|ИЗ
	|	РегистрСведений.энргОтложенныеДвиженияДокументов КАК энргОтложенныеДвиженияДокументов
	|ГДЕ
	|	энргОтложенныеДвиженияДокументов.Организация = &Организация
	|	И энргОтложенныеДвиженияДокументов.ПериодНачисления = &ПериодНачисления
	|	И энргОтложенныеДвиженияДокументов.Район = &Район
	|	И энргОтложенныеДвиженияДокументов.РазделЗаписи = ЗНАЧЕНИЕ(Перечисление.энргРазделыЗаписи.Взаиморасчеты)
	|	И энргОтложенныеДвиженияДокументов.Строение = &Строение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.СостояниеПроведения КАК СостояниеПроведения,
	|	ВложенныйЗапрос.Строение КАК МКД,
	|	ВложенныйЗапрос.Абонент КАК Абонент,
	|	ВложенныйЗапрос.ДатаРегистратора КАК ДатаРегистратора,
	|	ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Справочник.энргВидыУслуг.ПустаяСсылка) КАК Услуга
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументыНачисления.Организация КАК Организация,
	|		ДокументыНачисления.ПериодНачисления КАК ПериодНачисления,
	|		ДокументыНачисления.Район КАК Район,
	|		ВЫБОР
	|			КОГДА НЕ ШапкаДокумента.ПометкаУдаления
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)
	|		КОНЕЦ КАК СостояниеПроведения,
	|		ДокументыНачисления.Строение КАК Строение,
	|		Документ.Абонент КАК Абонент,
	|		ДокументыНачисления.ДокРегистратор КАК ДокРегистратор,
	|		ДокументыНачисления.ДатаРегистратора КАК ДатаРегистратора
	|	ИЗ
	|		ДокументыНачисления КАК ДокументыНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.энргОбъемНачислений КАК Документ
	|			ПО ДокументыНачисления.ДокРегистратор = Документ.Регистратор
	|				И (ДокументыНачисления.ДокРегистратор ССЫЛКА Документ.энргРаспределениеМКД)
	|				И (Документ.Абонент = &Абонент)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргРаспределениеМКД КАК ШапкаДокумента
	|			ПО ДокументыНачисления.ДокРегистратор = ШапкаДокумента.Ссылка
	|				И (ДокументыНачисления.ДокРегистратор ССЫЛКА Документ.энргРаспределениеМКД)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументыНачисления.Организация,
	|		ДокументыНачисления.ПериодНачисления,
	|		ДокументыНачисления.Район,
	|		ВЫБОР
	|			КОГДА НЕ ШапкаДокумента.ПометкаУдаления
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)
	|		КОНЕЦ,
	|		ДокументыНачисления.Строение,
	|		Документ.Абонент,
	|		ДокументыНачисления.ДокРегистратор,
	|		ДокументыНачисления.ДатаРегистратора
	|	ИЗ
	|		ДокументыНачисления КАК ДокументыНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.энргОбъемНачислений КАК Документ
	|			ПО ДокументыНачисления.ДокРегистратор = Документ.Регистратор
	|				И (ДокументыНачисления.ДокРегистратор ССЫЛКА Документ.энргНачисление)
	|				И (Документ.Абонент = &Абонент)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргНачисление КАК ШапкаДокумента
	|			ПО ДокументыНачисления.ДокРегистратор = ШапкаДокумента.Ссылка
	|				И (ДокументыНачисления.ДокРегистратор ССЫЛКА Документ.энргНачисление)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументыНачисления.Организация,
	|		ДокументыНачисления.ПериодНачисления,
	|		ДокументыНачисления.Район,
	|		ВЫБОР
	|			КОГДА НЕ ШапкаДокумента.ПометкаУдаления
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)
	|		КОНЕЦ,
	|		ДокументыНачисления.Строение,
	|		Документ.Абонент,
	|		ДокументыНачисления.ДокРегистратор,
	|		ДокументыНачисления.ДатаРегистратора
	|	ИЗ
	|		ДокументыНачисления КАК ДокументыНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.энргНачисленныйСреднийОбъем КАК Документ
	|			ПО ДокументыНачисления.ДокРегистратор = Документ.Регистратор
	|				И (ДокументыНачисления.ДокРегистратор ССЫЛКА Документ.энргПерерасчет)
	|				И (Документ.Абонент = &Абонент)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргПерерасчет КАК ШапкаДокумента
	|			ПО ДокументыНачисления.ДокРегистратор = ШапкаДокумента.Ссылка
	|				И (ДокументыНачисления.ДокРегистратор ССЫЛКА Документ.энргПерерасчет)
	|				И (ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.энргВидыОпераций.энргПерерасчет_СвязанныйПерерасчет))) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	ДокРегистратор";  
	
	Запрос  								= Новый Запрос;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",	ПериодНачисления);
	Запрос.УстановитьПараметр("Район",				Район);
	
	Если Абонент  = Неопределено тогда
		Текст 								= СтрЗаменить(Текст,"И (Документ.Абонент = &Абонент)","");
	иначе
		Запрос.УстановитьПараметр("Абонент",Абонент);
	КонецЕсли;
	
	Если Строение = Неопределено тогда
		Текст 								= СтрЗаменить(Текст,"И энргОтложенныеДвиженияДокументов.Строение = &Строение","");
	иначе
		Запрос.УстановитьПараметр("Строение",Строение);
	КонецЕсли;
	Запрос.Текст   							= Текст;
	Результат  								= Запрос.Выполнить();
	Выборка  								= Результат.Выбрать(); 
	
	НаборЗаписи 							= РегистрыСведений.энргВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();	
	РазделВзаиморасчеты						= Перечисления.энргРазделыЗаписи.Взаиморасчеты;
	
	Если Выборка.Количество() > 0 тогда
		НачатьТранзакцию();
	КонецЕсли;   	
	
	Пока Выборка.Следующий() цикл		
		Попытка
			Если ТекДок <> Выборка.ДокРегистратор И НЕ ТекДок = Неопределено тогда 
				Если Абонент = Неопределено тогда
					// Выполняем только если абонент не указан.
					Набор 							= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
					Набор.Отбор.Организация.установить(Организация);
					Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
					Набор.Отбор.Район.установить(Район);
					Набор.Отбор.РазделЗаписи.установить(РазделВзаиморасчеты);
					Набор.Отбор.ДокРегистратор.установить(ТекДок);
					Набор.Записать();
				КонецЕсли;
				
				Набор 							= РегистрыСведений.энргВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.установить(Организация);
				Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
				Набор.Отбор.Район.установить(Район);
				Набор.Отбор.ДокРегистратор.установить(ТекДок);
				Набор.Записать(); 		
				
				Набор 							= РегистрыНакопления.энргВзаиморасчетыПоМесяцам.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(ТекДок);
				Набор.Записать();
				
				Набор 							= РегистрыНакопления.энргАвансы.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(ТекДок);
				Набор.Записать();
				
				Набор 							= РегистрыНакопления.энргАвансыИспользованные.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(ТекДок);
				Набор.Записать();
				
				Набор 							= РегистрыНакопления.энргАвансыПоступившие.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(ТекДок);
				Набор.Записать();
				
				НаборЗаписи.Записать(Ложь);
				НаборЗаписи.Очистить();
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();			   				
			КонецЕсли;						
		Исключение
			ОтменитьТранзакцию();
			НачатьТранзакцию();
		КонецПопытки;    		
		ЗаполнитьЗначенияСвойств(НаборЗаписи.Добавить(),Выборка); 
		ТекДок 									= Выборка.ДокРегистратор;		
	КонецЦикла;		
	
	Если ТекДок <> Неопределено тогда 
		Попытка
			Если Абонент = Неопределено тогда
				// Выполняем только если абонент не указан.
				Набор 							= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.установить(Организация);
				Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
				Набор.Отбор.Район.установить(Район);
				Набор.Отбор.РазделЗаписи.установить(РазделВзаиморасчеты);
				Набор.Отбор.ДокРегистратор.установить(ТекДок);
				Набор.Записать();
			КонецЕсли;
			
			Набор 							= РегистрыСведений.энргВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.установить(Организация);
			Набор.Отбор.ПериодНачисления.установить(ПериодНачисления);
			Набор.Отбор.Район.установить(Район);
			Набор.Отбор.ДокРегистратор.установить(ТекДок);
			Набор.Записать(); 		
			
			Набор 							= РегистрыНакопления.энргВзаиморасчетыПоМесяцам.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ТекДок);
			Набор.Записать();
			
			Набор 							= РегистрыНакопления.энргАвансы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ТекДок);
			Набор.Записать();
			
			Набор 							= РегистрыНакопления.энргАвансыИспользованные.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ТекДок);
			Набор.Записать();
			
			Набор 							= РегистрыНакопления.энргАвансыПоступившие.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ТекДок);
			Набор.Записать();
			
			НаборЗаписи.Записать(Ложь);
			ЗафиксироватьТранзакцию();			
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке 				= ИнформацияОбОшибке();
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки; 
	КонецЕсли;
КонецПроцедуры

Процедура УменьшитьАванс(ПараметрыОперации, ДанныеДокумента,ДанныеНачислений)	
			
	Если ПараметрыОперации.СпособРаспределенияОплаты = Перечисления.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения тогда
		УменьшитьАвансСогласноНастройкиРаспределения(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений);
	иначе
		УменьшитьАвансПропорциональноЗадолженности(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений);
	КонецЕсли;
	
КонецПроцедуры

Процедура УменьшитьАвансСогласноНастройкиРаспределения(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений)
	
	Абонент  													= ДанныеДокумента.Абонент;
	Район  														= ПараметрыОперации.Район;
	МКД  														= ДанныеДокумента.МКД;
	ТаблицаАвансы 												= ДанныеДокумента.НаборТаблиц.энргАвансы;
	ТаблицаАвансыИспользованные 								= ДанныеДокумента.НаборТаблиц.энргАвансыИспользованные;
		
	ОстатокАванса		 										= ПараметрыОперации.СуммаАванса;
	ОписаниеСтрокиначислений  									= Новый ФиксированнаяСтруктура("Период,Услуга,Организация, ПериодНачисления,Сумма");
	НастройкиПорядкаПогашения 									= ПараметрыОперации.НастройкиПорядкаПогашения;
	ВыборкаПорядок  											= НастройкиПорядкаПогашения.выбрать();
	Пока ВыборкаПорядок.следующий() и ОстатокАванса > 0 цикл			
		
		НачисленияПоУслуге  									= ДанныеНачислений.получить(ВыборкаПорядок.услуга);
		
		Если НачисленияПоУслуге <> Неопределено тогда 
			
			ПериодыНачислений  									= НачисленияПоУслуге.ПериодыНачислений;
			
			МассивУдаляемых 									= Новый Массив;
			
			для Каждого ПериодНачисления из ПериодыНачислений цикл 								
				
				Списываем  										= Мин(ОстатокАванса,ПериодНачисления.СуммаНачислений);
				Если  Списываем = 0 тогда
					Продолжить;
				КонецЕсли;			
				
				Если ПериодНачисления.СуммаНачислений < 0 тогда
					ПараметрыОперации.Сумма 					= -ПериодНачисления.СуммаНачислений;
					ОтрицательнаяСуммаНачислений(ПараметрыОперации,ДанныеДокумента,-ПериодНачисления.СуммаНачислений, ВыборкаПорядок.услуга,ПериодНачисления.Поставщик,ПериодНачисления.ПериодРасчета);
					ОстатокАванса 								= ОстатокАванса -ПериодНачисления.СуммаНачислений;
					МассивУдаляемых.Добавить(ПериодНачисления);
				иначе				
					ЗаписьАвансы  								= ТаблицаАвансы.добавить();
					ЗаписьАвансы.ВидДвижения 					= ВидДвиженияНакопления.Расход;
					ЗаписьАвансы.Активность  					= истина;
					ЗаписьАвансы.Период  						= ПараметрыОперации.Период;
					ЗаписьАвансы.Район  						= Район;
					ЗаписьАвансы.МКД	  						= МКД;
					ЗаписьАвансы.Абонент  						= Абонент;
					ЗаписьАвансы.Сумма 							= Списываем;
					ЗаписьАвансы.ПериодНачисления				= ПараметрыОперации.ПериодНачисления;
					ЗаписьАвансы.Организация 					= ПараметрыОперации.Организация;
					
					ЗаписьОплатаУслуг							= ТаблицаАвансыИспользованные.добавить();
					ЗаписьОплатаУслуг.Активность				= Истина;
					ЗаписьОплатаУслуг.Период  					= ПараметрыОперации.Период;
					ЗаписьОплатаУслуг.Район  					= Район;
					ЗаписьОплатаУслуг.МКД	 					= МКД;
					ЗаписьОплатаУслуг.Абонент					= Абонент;
					ЗаписьОплатаУслуг.Услуга					= ВыборкаПорядок.услуга;
					ЗаписьОплатаУслуг.Поставщик					= ПериодНачисления.Поставщик;
					ЗаписьОплатаУслуг.Сумма 					= Списываем; 			
					ЗаписьОплатаУслуг.ПериодНачисления			= ПараметрыОперации.ПериодНачисления;
					ЗаписьОплатаУслуг.Организация				= ПараметрыОперации.Организация;
					ЗаписьОплатаУслуг.ПериодРасчета				= ПериодНачисления.ПериодРасчета;
					
					ОстатокАванса  								= ОстатокАванса - Списываем;			
					ПериодНачисления.СуммаНачислений 			= ПериодНачисления.СуммаНачислений -Списываем;
				КонецЕсли;
				
				Если ПериодНачисления.СуммаНачислений = 0 тогда
					МассивУдаляемых.Добавить(ПериодНачисления);
				КонецЕсли;				
			КонецЦикла;
			
			// Удаляем нулевые строки.
			для Каждого УдаляемаяСтрока из МассивУдаляемых цикл
				ПериодыНачислений.удалить(УдаляемаяСтрока);
			КонецЦикла;
			// Если не осталось строк начисления удаляем все по ключу.
			Если НачисленияПоУслуге.ПериодыНачислений.количество() = 0 тогда
				ДанныеНачислений.Удалить(ВыборкаПорядок.услуга)
			КонецЕсли;  			
		КонецЕсли;
	КонецЦикла;
	ПараметрыОперации.СуммаАванса 								= ОстатокАванса;
	
КонецПроцедуры

Процедура УменьшитьАвансПропорциональноЗадолженности(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений)
			
	яДанныеНачислений	 									= ДанныеНачислений.Расшифровка;
	ОсталосьСписать											= ПараметрыОперации.СуммаАванса;
	ПериодыЗадолженности 									= яДанныеНачислений.Скопировать();
	ПериодыЗадолженности.Свернуть("ПериодРасчета","СуммаНачислений");
	ПериодыЗадолженности.Сортировать("ПериодРасчета");	
	                                           		
	ТаблицаАвансыИспользованные								= ДанныеДокумента.НаборТаблиц.энргАвансыИспользованные;
	
	Для Сч = 0 По ПериодыЗадолженности.Количество() - 1 Цикл
		
		СтрокиВПериоде 										= яДанныеНачислений.НайтиСтроки(Новый Структура("ПериодРасчета", ПериодыЗадолженности[Сч].ПериодРасчета));
		
		Для ИндексСтроки = 0 По СтрокиВПериоде.ВГраница() Цикл			
			ОбщаяСуммаЗаПериод								= ПериодыЗадолженности[Сч].СуммаНачислений;
			
			Если ОбщаяСуммаЗаПериод = 0 Тогда 
				Продолжить;
			КонецЕсли;			
			
			ДоляВПериоде	 								= СтрокиВПериоде[ИндексСтроки].СуммаНачислений / ОбщаяСуммаЗаПериод;
			СписываемПоДоле 								= ?(ИндексСтроки = СтрокиВПериоде.ВГраница(), ОсталосьСписать, ДоляВПериоде * ПараметрыОперации.СуммаАванса);
			Списываем 										= Окр(Мин(СписываемПоДоле, СтрокиВПериоде[ИндексСтроки].СуммаНачислений),2);
			ОсталосьСписать 								= ОсталосьСписать - Списываем;
			СтрокиВПериоде[ИндексСтроки].СуммаНачислений	= СтрокиВПериоде[ИндексСтроки].СуммаНачислений - Списываем;
			
			ДобавитьРасходАванса(ПараметрыОперации, ДанныеДокумента, Списываем);
			
			ЗаписьОплатаУслуг								= ТаблицаАвансыИспользованные.добавить();
			ЗаписьОплатаУслуг.Активность  					= Истина;
			ЗаписьОплатаУслуг.Период  						= ДанныеДокумента.Период;			
			ЗаписьОплатаУслуг.МКД	 						= ДанныеДокумента.МКД;
			ЗаписьОплатаУслуг.Абонент						= ДанныеДокумента.Абонент;
			ЗаписьОплатаУслуг.Услуга						= СтрокиВПериоде[ИндексСтроки].Услуга;
			ЗаписьОплатаУслуг.Поставщик						= СтрокиВПериоде[ИндексСтроки].Поставщик;
			ЗаписьОплатаУслуг.Сумма 						= Списываем; 		
			ЗаписьОплатаУслуг.ПериодНачисления 				= ПараметрыОперации.ПериодНачисления;
			ЗаписьОплатаУслуг.Организация	 				= ПараметрыОперации.Организация;
			ЗаписьОплатаУслуг.Район  						= ПараметрыОперации.Район;
			ЗаписьОплатаУслуг.ПериодРасчета 				= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;					
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыОперации.СуммаАванса 							= ОсталосьСписать;
	
КонецПроцедуры

Процедура УвеличитьАванс(ПараметрыОперации,ДанныеДокумента,Сумма)
		
	ТаблицаАвансы 									= ДанныеДокумента.НаборТаблиц.энргАвансы;
	
	ЗаписьАвансы  									= ТаблицаАвансы.добавить();
	ЗаписьАвансы.ВидДвижения 						= ВидДвиженияНакопления.Приход;
	ЗаписьАвансы.Активность  						= истина;
	ЗаписьАвансы.Период  							= ДанныеДокумента.Период;	
	ЗаписьАвансы.МКД	  							= ДанныеДокумента.МКД;
	ЗаписьАвансы.Абонент  							= ДанныеДокумента.Абонент;
	ЗаписьАвансы.ДокументОплаты						= ДанныеДокумента.Регистратор;
	ЗаписьАвансы.Сумма 								= Сумма;
	ЗаписьАвансы.Район  							= ПараметрыОперации.Район;
	ЗаписьАвансы.ПериодНачисления					= ПараметрыОперации.ПериодНачисления;
	ЗаписьАвансы.Организация						= ПараметрыОперации.Организация;
	
	ОписаниеАванса 									= ОписаниеАванса();
	ОписаниеАванса.СуммаАванса 						= Сумма;
	ОписаниеАванса.ДокументОплаты 					= ДанныеДокумента.Регистратор;
	мАвансы 										= ПараметрыОперации.Авансы;
	мАвансы.Добавить(ОписаниеАванса);
	
	Если ПараметрыОперации.свойство("СнятьТекущие") тогда
		ТаблицаАвансыИспользованные					= ДанныеДокумента.НаборТаблиц.энргАвансыИспользованные;
		ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.добавить();
		ЗаписьАвансыИспользованные.Активность  		= истина;
		ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.период;		
		ЗаписьАвансыИспользованные.МКД	  			= ДанныеДокумента.МКД;
		ЗаписьАвансыИспользованные.Абонент  		= ДанныеДокумента.Абонент;
		ЗаписьАвансыИспользованные.Сумма 			= -Сумма;
		ЗаписьАвансыИспользованные.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
		ЗаписьАвансыИспользованные.Организация		= ПараметрыОперации.Организация;
		ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;
		ЗаписьАвансыИспользованные.Поставщик		= ПараметрыОперации.ВозвратАванса.Поставщик;
		ЗаписьАвансыИспользованные.Услуга			= ПараметрыОперации.ВозвратАванса.Услуга;
		ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ВозвратАванса.ПериодРасчета;
	Иначе			
		ТаблицаАвансыПоступившие  					= ДанныеДокумента.НаборТаблиц.энргАвансыПоступившие;
		ЗаписьАвансыПоступившие						= ТаблицаАвансыПоступившие.добавить();
		ЗаписьАвансыПоступившие.Активность  		= истина;
		ЗаписьАвансыПоступившие.Период  			= ДанныеДокумента.период;		
		ЗаписьАвансыПоступившие.МКД	  				= ДанныеДокумента.МКД;
		ЗаписьАвансыПоступившие.Абонент  			= ДанныеДокумента.Абонент;
		ЗаписьАвансыПоступившие.Кассир				= ДанныеДокумента.Кассир;
		ЗаписьАвансыПоступившие.ИсточникПоступления	= ДанныеДокумента.ИсточникПоступления;
		ЗаписьАвансыПоступившие.Сумма 				= Сумма;
		ЗаписьАвансыПоступившие.Район  				= ПараметрыОперации.Район;
		ЗаписьАвансыПоступившие.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
		ЗаписьАвансыПоступившие.Организация			= ПараметрыОперации.Организация;		
	КонецЕсли;  	 
	
КонецПроцедуры

Процедура УвеличитьЗадолженность(ПараметрыОперации, ДанныеДокумента, ДанныеНачислений)
	
	Если ПараметрыОперации.СуммаАванса > 0 тогда
		УменьшитьАванс(ПараметрыОперации, ДанныеДокумента,ДанныеНачислений);				
	КонецЕсли;
	
	Район  												= ПараметрыОперации.Район;
	Абонент  											= ДанныеДокумента.Абонент;	
	МКД  												= ДанныеДокумента.МКД;
	ДанныеЗадолженности 								= ПараметрыОперации.ДанныеЗадолженности;
	ТаблицаВзаиморасчетыПоМесяцам 						= ДанныеДокумента.НаборТаблиц.энргВзаиморасчетыПоМесяцам;
		
	ТаблицаЗадолженности  								= ДанныеЗадолженности.Расшифровка;
	РасшифровкаНачислений 								= ДанныеНачислений.Расшифровка;
	
	БылиИзменения 										= Ложь;
	
	для Каждого СтрокаНачисления из РасшифровкаНачислений цикл
		
		Если СтрокаНачисления.СуммаНачислений = 0 тогда
			Продолжить;
		ИначеЕсли  СтрокаНачисления.СуммаНачислений < 0 тогда
			ОтрицательнаяСуммаНачислений(ПараметрыОперации,ДанныеДокумента,-СтрокаНачисления.СуммаНачислений,СтрокаНачисления.Услуга,СтрокаНачисления.Поставщик,СтрокаНачисления.ПериодРасчета);
			Продолжить;
		КонецЕсли;
		
		БылиИзменения 									= Истина;
		
		СтрокаЗадолженности  							= ТаблицаЗадолженности.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗадолженности, СтрокаНачисления);
		СтрокаЗадолженности.СуммаЗадолженности			= СтрокаНачисления.СуммаНачислений;
				
		СтрокаВзаиморасчеты 							= ТаблицаВзаиморасчетыПоМесяцам.Добавить();
		СтрокаВзаиморасчеты.Организация					= ПараметрыОперации.Организация;
		СтрокаВзаиморасчеты.ПериодРегистрации			= ПараметрыОперации.ПериодНачисления;		
		СтрокаВзаиморасчеты.Район 						= ПараметрыОперации.Район;
		СтрокаВзаиморасчеты.ВидДвижения					= ВидДвиженияНакопления.Приход;
		СтрокаВзаиморасчеты.Активность					= Истина;
		СтрокаВзаиморасчеты.Период 						= ДанныеДокумента.Период;
		СтрокаВзаиморасчеты.МКД 						= ДанныеДокумента.МКД;
		СтрокаВзаиморасчеты.Абонент 					= ДанныеДокумента.Абонент; 		
		СтрокаВзаиморасчеты.Услуга 						= СтрокаНачисления.Услуга;
		СтрокаВзаиморасчеты.Поставщик 					= СтрокаНачисления.Поставщик;
		СтрокаВзаиморасчеты.Сумма 						= СтрокаНачисления.СуммаНачислений;
		СтрокаВзаиморасчеты.ПериодНачисления			= СтрокаНачисления.ПериодРасчета;		
	КонецЦикла; 
	
	Если БылиИзменения Тогда
		ТаблицаЗадолженности.Свернуть("ПериодРасчета,ПорядокПериодРасчета,ПорядокПогашенияУслуги,Поставщик,Услуга","СуммаЗадолженности");
		ТаблицаЗадолженности.Сортировать("ПорядокПериодРасчета,ПериодРасчета,ПорядокПогашенияУслуги,Услуга");
		ДанныеЗадолженности.СуммаЗадолженности 			= ТаблицаЗадолженности.Итог("СуммаЗадолженности");
	КонецЕсли;
	
КонецПроцедуры

Процедура СписатьЗадолженность(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга = Неопределено, Поставщик = Неопределено, ПериодНачисления  = Неопределено)
	
	Если Услуга <> Неопределено тогда
		СписатьЗадолженностьПоУслуге(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга,Поставщик,ПериодНачисления);	
	иначеЕсли ПараметрыОперации.СпособРаспределенияОплаты = Перечисления.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения тогда
		СписатьЗадолженностьСогласноНастройкиРаспределения(ПараметрыОперации,ДанныеДокумента,Сумма);
	иначе
		СписатьЗадолженностьПропорциональноЗадолженности(ПараметрыОперации, ДанныеДокумента, Сумма);
	КонецЕсли;
	
КонецПроцедуры 

Процедура СписатьЗадолженностьСогласноНастройкиРаспределения(ПараметрыОперации,ДанныеДокумента,НадоСписать)
	
	ТаблицаВзаиморасчетыПоМесяцам 						= ДанныеДокумента.НаборТаблиц.энргВзаиморасчетыПоМесяцам;
	
	Если ДанныеДокумента.ЭтоОплата тогда
		ТаблицаОплатаУслуг			 					= ДанныеДокумента.НаборТаблиц.энргОплатаУслуг;
	иначе
		ТаблицаАвансыИспользованные 					= ДанныеДокумента.НаборТаблиц.энргАвансыИспользованные
	КонецЕсли;
	
	ДанныеЗадолженности 								= ПараметрыОперации.ДанныеЗадолженности;
	Расшифровка 										= ДанныеЗадолженности.Расшифровка;
	
	МассивУдаляемых										= Новый Массив;
	
	для Каждого СтрокаЗадолженности из Расшифровка цикл
		
		Списываем 										= Мин(СтрокаЗадолженности.СуммаЗадолженности,НадоСписать);
		
		СтрокаЗадолженности.СуммаЗадолженности 			= СтрокаЗадолженности.СуммаЗадолженности - Списываем;
		
		Если СтрокаЗадолженности.СуммаЗадолженности = 0 тогда
			МассивУдаляемых.Добавить(СтрокаЗадолженности);
		КонецЕсли;
				
		СтрокаВзаиморасчеты 							= ТаблицаВзаиморасчетыПоМесяцам.Добавить();
		СтрокаВзаиморасчеты.Организация		 			= ПараметрыОперации.Организация;
		СтрокаВзаиморасчеты.Район 						= ПараметрыОперации.Район;
		СтрокаВзаиморасчеты.ПериодНачисления 			= СтрокаЗадолженности.ПериодРасчета;
		СтрокаВзаиморасчеты.ВидДвижения					= ВидДвиженияНакопления.Расход;
		СтрокаВзаиморасчеты.Активность					= Истина;
		СтрокаВзаиморасчеты.Период 						= ДанныеДокумента.Период;		
		СтрокаВзаиморасчеты.МКД 						= ДанныеДокумента.МКД;
		СтрокаВзаиморасчеты.Абонент 					= ДанныеДокумента.Абонент;
		СтрокаВзаиморасчеты.Услуга 						= СтрокаЗадолженности.услуга;
		СтрокаВзаиморасчеты.Сумма 						= Списываем;
		СтрокаВзаиморасчеты.Поставщик					= СтрокаЗадолженности.Поставщик;
		СтрокаВзаиморасчеты.ПериодРегистрации			= ПараметрыОперации.ПериодНачисления;
		
		Если ДанныеДокумента.ЭтоОплата тогда 
			СтрокаОплатаУслуг 							= ТаблицаОплатаУслуг.добавить();
			СтрокаОплатаУслуг.Активность				= истина;
			СтрокаОплатаУслуг.Период 					= ДанныеДокумента.Период;
			СтрокаОплатаУслуг.Организация				= ПараметрыОперации.Организация;
			СтрокаОплатаУслуг.Район 					= ПараметрыОперации.Район;
			СтрокаОплатаУслуг.МКД 						= ДанныеДокумента.МКД;
			СтрокаОплатаУслуг.Абонент 					= ДанныеДокумента.Абонент;
			СтрокаОплатаУслуг.Услуга 					= СтрокаЗадолженности.Услуга;
			СтрокаОплатаУслуг.Поставщик					= СтрокаЗадолженности.Поставщик;
			СтрокаОплатаУслуг.Сумма 					= Списываем;
			СтрокаОплатаУслуг.ПериодНачисления			= СтрокаЗадолженности.ПериодРасчета;
			СтрокаОплатаУслуг.ПериодРасчета				= ПараметрыОперации.ПериодНачисления;
			СтрокаОплатаУслуг.Кассир					= ДанныеДокумента.Кассир;
			СтрокаОплатаУслуг.ИсточникПоступления		= ДанныеДокумента.ИсточникПоступления;
		иначе
			ТаблицаАвансыИспользованные					= ДанныеДокумента.НаборТаблиц.энргАвансыИспользованные;
			ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.добавить();
			ЗаписьАвансыИспользованные.Активность  		= истина;
			ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.Период;
			ЗаписьАвансыИспользованные.Организация		= ПараметрыОперации.Организация;
			ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;
			ЗаписьАвансыИспользованные.МКД	  			= ДанныеДокумента.МКД;
			ЗаписьАвансыИспользованные.Абонент  		= ДанныеДокумента.Абонент;
			ЗаписьАвансыИспользованные.Сумма 			= Списываем;
			ЗаписьАвансыИспользованные.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
			ЗаписьАвансыИспользованные.Поставщик		= СтрокаЗадолженности.Поставщик;
			ЗаписьАвансыИспользованные.Услуга			= СтрокаЗадолженности.услуга;
			ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ПериодНачисления;
			// Возвращаем использованный аванс на услугу с которой снимаем начисления.					
			ТаблицаАвансыИспользованные					= ДанныеДокумента.НаборТаблиц.энргАвансыИспользованные;
			ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.добавить();
			ЗаписьАвансыИспользованные.Активность  		= истина;
			ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.Период;
			ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;
			ЗаписьАвансыИспользованные.МКД	  			= ДанныеДокумента.МКД;
			ЗаписьАвансыИспользованные.Абонент  		= ДанныеДокумента.Абонент;
			ЗаписьАвансыИспользованные.Сумма 			= -Списываем;
			ЗаписьАвансыИспользованные.ПериодНачисления	= ПараметрыОперации.ПериодНачисления;
			ЗаписьАвансыИспользованные.Поставщик		= ПараметрыОперации.ВозвратАванса.Поставщик;
			ЗаписьАвансыИспользованные.Услуга			= ПараметрыОперации.ВозвратАванса.услуга;
			ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ПериодНачисления;					
		КонецЕсли;
												
		НадоСписать										= НадоСписать - Списываем;
	КонецЦикла; 
	
	для Каждого УдаляемаяСтрока из МассивУдаляемых цикл
		Расшифровка.удалить(УдаляемаяСтрока);
	КонецЦикла;
		
	Если НадоСписать > 0 тогда
		УвеличитьАванс(ПараметрыОперации,ДанныеДокумента,НадоСписать);
	КонецЕсли;

КонецПроцедуры

Процедура СписатьЗадолженностьПропорциональноЗадолженности(ПараметрыОперации, ДанныеДокумента, НадоСписать)
	
	ДанныеЗадолженности 									= ПараметрыОперации.ДанныеЗадолженности.Расшифровка;
	
	ПериодыЗадолженности 									= ДанныеЗадолженности.Скопировать();
	ПериодыЗадолженности.Свернуть("ПериодРасчета","СуммаЗадолженности");
	ПериодыЗадолженности.Сортировать("ПериодРасчета"); 	
	
	ТаблицаВзаиморасчетыПоМесяцам 							= ДанныеДокумента.НаборТаблиц.энргВзаиморасчетыПоМесяцам;
		
	СтрокиУдалить 											= Новый Массив;
	
	Для Сч = 0 По ПериодыЗадолженности.Количество() - 1 Цикл
		СтрокиВПериоде 										= ДанныеЗадолженности.НайтиСтроки(Новый Структура("ПериодРасчета", ПериодыЗадолженности[Сч].ПериодРасчета));
		ОстатокСуммы 										= НадоСписать;
		
		Для ИндексСтроки = 0 По СтрокиВПериоде.ВГраница() Цикл			
			ОбщаяСуммаЗаПериод								= ПериодыЗадолженности[Сч].СуммаЗадолженности;
			Если ОбщаяСуммаЗаПериод = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДоляВПериоде	 								= СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности / ОбщаяСуммаЗаПериод;
			СписываемПоДоле 								= ?(ИндексСтроки = СтрокиВПериоде.ВГраница(), НадоСписать, ДоляВПериоде * ОстатокСуммы);
			Списываем 										= Окр(Мин(СписываемПоДоле, СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности),2);
			НадоСписать 									= НадоСписать - Списываем;
						
			СтрокаВзаиморасчеты 							= ТаблицаВзаиморасчетыПоМесяцам.Добавить();
			СтрокаВзаиморасчеты.Организация		 			= ПараметрыОперации.Организация;
			СтрокаВзаиморасчеты.ПериодНачисления 			= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;
			СтрокаВзаиморасчеты.Район 						= ПараметрыОперации.Район;
			СтрокаВзаиморасчеты.ПериодРегистрации			= ПараметрыОперации.ПериодНачисления;
			СтрокаВзаиморасчеты.ВидДвижения					= ВидДвиженияНакопления.Расход;
			СтрокаВзаиморасчеты.Активность					= Истина;
			СтрокаВзаиморасчеты.Период 						= ДанныеДокумента.Период;			
			СтрокаВзаиморасчеты.МКД 						= ДанныеДокумента.МКД;
			СтрокаВзаиморасчеты.Абонент 					= ДанныеДокумента.Абонент;
			СтрокаВзаиморасчеты.Услуга 						= СтрокиВПериоде[ИндексСтроки].Услуга;
			СтрокаВзаиморасчеты.Сумма 						= Списываем;
			СтрокаВзаиморасчеты.Поставщик					= СтрокиВПериоде[ИндексСтроки].Поставщик;		
			
			СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности = СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности - Списываем;
			Если СтрокиВПериоде[ИндексСтроки].СуммаЗадолженности = 0 Тогда
				СтрокиУдалить.Добавить(СтрокиВПериоде[ИндексСтроки]);
			КонецЕсли;
						
			Если ДанныеДокумента.ЭтоОплата тогда          
				ТаблицаОплатаУслуг 							= ДанныеДокумента.НаборТаблиц.энргОплатаУслуг;
				
				СтрокаОплатаУслуг 							= ТаблицаОплатаУслуг.добавить();
				СтрокаОплатаУслуг.Активность				= истина;  				
				СтрокаОплатаУслуг.Организация				= ПараметрыОперации.Организация;
				СтрокаОплатаУслуг.Район 					= ПараметрыОперации.Район;
				СтрокаОплатаУслуг.ПериодРасчета				= ПараметрыОперации.ПериодНачисления;
				СтрокаОплатаУслуг.Период 					= ДанныеДокумента.Период;
				СтрокаОплатаУслуг.МКД 						= ДанныеДокумента.МКД;
				СтрокаОплатаУслуг.Абонент 					= ДанныеДокумента.Абонент;
				СтрокаОплатаУслуг.Кассир					= ДанныеДокумента.Кассир;
				СтрокаОплатаУслуг.ИсточникПоступления		= ДанныеДокумента.ИсточникПоступления;
				СтрокаОплатаУслуг.Услуга 					= СтрокиВПериоде[ИндексСтроки].услуга;
				СтрокаОплатаУслуг.Поставщик					= СтрокиВПериоде[ИндексСтроки].Поставщик;
				СтрокаОплатаУслуг.Сумма 					= Списываем;
				СтрокаОплатаУслуг.ПериодНачисления			= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;				
			иначе
				ТаблицаАвансыИспользованные 				= ДанныеДокумента.НаборТаблиц.энргАвансыИспользованные; 
				
				ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.Добавить();
				ЗаписьАвансыИспользованные.Активность  		= истина;
				ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ПериодНачисления;
				ЗаписьАвансыИспользованные.Организация		= ПараметрыОперации.Организация;
				ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;
				ЗаписьАвансыИспользованные.МКД	  			= ДанныеДокумента.МКД;
				ЗаписьАвансыИспользованные.Абонент  		= ДанныеДокумента.Абонент;
				ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.Период;
				ЗаписьАвансыИспользованные.Сумма 			= Списываем;
				ЗаписьАвансыИспользованные.ПериодНачисления	= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;
				ЗаписьАвансыИспользованные.Поставщик		= СтрокиВПериоде[ИндексСтроки].Поставщик;
				ЗаписьАвансыИспользованные.Услуга			= СтрокиВПериоде[ИндексСтроки].услуга;				
				
				// Возвращаем использованный аванс на услугу с которой снимаем начисления.					
				ЗаписьАвансыИспользованные					= ТаблицаАвансыИспользованные.Добавить();
				ЗаписьАвансыИспользованные.Активность  		= истина;
				ЗаписьАвансыИспользованные.Организация		= ПараметрыОперации.Организация;
				ЗаписьАвансыИспользованные.Район  			= ПараметрыОперации.Район;				
				ЗаписьАвансыИспользованные.МКД	  			= ДанныеДокумента.МКД;
				ЗаписьАвансыИспользованные.Период  			= ДанныеДокумента.Период;
				ЗаписьАвансыИспользованные.Абонент  		= ДанныеДокумента.Абонент;
				ЗаписьАвансыИспользованные.Сумма 			= -Списываем;
				ЗаписьАвансыИспользованные.ПериодНачисления	= СтрокиВПериоде[ИндексСтроки].ПериодРасчета;
				ЗаписьАвансыИспользованные.Поставщик		= ПараметрыОперации.ВозвратАванса.Поставщик;
				ЗаписьАвансыИспользованные.Услуга			= ПараметрыОперации.ВозвратАванса.услуга;
				ЗаписьАвансыИспользованные.ПериодРасчета	= ПараметрыОперации.ПериодНачисления;					
			КонецЕсли;
			
			Если НадоСписать = 0 тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НадоСписать = 0 тогда
			Прервать;
		КонецЕсли; 		
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		ДанныеЗадолженности.Удалить(СтрокаУдалить);
	КонецЦикла;
		
	Если НадоСписать > 0 Тогда		
		ПараметрыОперации.СуммаАванса  					= ПараметрыОперации.СуммаАванса + НадоСписать;
		УвеличитьАванс(ПараметрыОперации, ДанныеДокумента, НадоСписать);
		НадоСписать	 									= 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписатьЗадолженностьПоУслуге(ПараметрыОперации,ДанныеДокумента,НадоСписать,Услуга,Поставщик,ПериодРасчета)
	
	ДанныеЗадолженности 						= ПараметрыОперации.ДанныеЗадолженности.Расшифровка;		
	
	ТаблицаВзаиморасчетыПоМесяцам 				= ДанныеДокумента.НаборТаблиц.энргВзаиморасчетыПоМесяцам;
					 	
	Если ПериодРасчета <> Неопределено тогда
		СтруктураПоиска  						= Новый Структура("Услуга,ПериодРасчета,Поставщик");
		СтруктураПоиска.Услуга 					= Услуга;
		СтруктураПоиска.ПериодРасчета 			= ПериодРасчета;
		СтруктураПоиска.Поставщик 				= Поставщик;
	иначе
		// Ищем все строки по поставщику.
		СтруктураПоиска  						= Новый Структура("Услуга,Поставщик");
		СтруктураПоиска.Услуга 					= Услуга;
		СтруктураПоиска.Поставщик 				= Поставщик;
	КонецЕсли;
	
	СтрокиЗадолженности 						= ДанныеЗадолженности.НайтиСтроки(СтруктураПоиска);
	
	МассивУдаляемых 							= Новый Массив;
	
	для Каждого СтрокаЗадолженности из СтрокиЗадолженности цикл
		Списываем 								= Мин(НадоСписать,СтрокаЗадолженности.СуммаЗадолженности);
		
		// Уменьшаем задолженность по месяцам.
		СтрокаВзаиморасчеты 					= ТаблицаВзаиморасчетыПоМесяцам.Добавить();		
		СтрокаВзаиморасчеты.Активность	 		= Истина;
		СтрокаВзаиморасчеты.ВидДвижения 		= ВидДвиженияНакопления.Расход;
		СтрокаВзаиморасчеты.Организация 		= ПараметрыОперации.Организация;
		СтрокаВзаиморасчеты.Район		 		= ПараметрыОперации.Район;
		СтрокаВзаиморасчеты.ПериодРегистрации	= ПараметрыОперации.ПериодНачисления;
		СтрокаВзаиморасчеты.МКД			 		= ДанныеДокумента.МКД;
		СтрокаВзаиморасчеты.Абонент				= ДанныеДокумента.Абонент;
		СтрокаВзаиморасчеты.Период	 			= ДанныеДокумента.период;
		СтрокаВзаиморасчеты.Услуга				= Услуга;
		СтрокаВзаиморасчеты.Поставщик			= Поставщик;
		СтрокаВзаиморасчеты.ПериодНачисления	= СтрокаЗадолженности.ПериодРасчета;
		СтрокаВзаиморасчеты.Сумма				= Списываем; 		
		
		СтрокаЗадолженности.СуммаЗадолженности 	= СтрокаЗадолженности.СуммаЗадолженности - Списываем; 		
		НадоСписать 							= НадоСписать - Списываем;
		
		Если СтрокаЗадолженности.СуммаЗадолженности = 0 тогда
			МассивУдаляемых.Добавить(СтрокаЗадолженности);
		КонецЕсли;  		
		
		Если НадоСписать = 0 Тогда
			Прервать;
		КонецЕсли; 		
		
	КонецЦикла;
	
	для Каждого УдаляемаяСтрока из МассивУдаляемых цикл
		ДанныеЗадолженности.Удалить(УдаляемаяСтрока);				
	КонецЦикла;
				
КонецПроцедуры

Процедура ОтрицательнаяСуммаНачислений(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга,Поставщик,ПериодРасчета)

	ПараметрыОперации.вставить("СнятьТекущие",Истина);
	ПараметрыОперации.вставить("ВозвратАванса",Новый Структура("Услуга,Поставщик,ПериодРасчета",Услуга,Поставщик,ПериодРасчета));
	
	// Списываем задолженность по услуге за текущий период.
	СписатьЗадолженность(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга,Поставщик,ПериодРасчета);
	// Списываем задолженность по услуге за предыдущие периоды.
	СписатьЗадолженность(ПараметрыОперации,ДанныеДокумента,Сумма,Услуга,Поставщик,Неопределено);	
	// Списываем пропорционально и записываем в аванс если что то останется.
	СписатьЗадолженность(ПараметрыОперации,ДанныеДокумента,Сумма);
	
	Если Сумма > 0 Тогда
		УвеличитьАванс(ПараметрыОперации,ДанныеДокумента,Сумма);
	КонецЕсли;
	
КонецПроцедуры

Функция АвансНаГраницу(Абонент,ВыборкаАванс)
	
	Авансы  				= Новый Массив;
	СуммаАванса 			= 0;
	Если Абонент  = ВыборкаАванс.Абонент тогда		
		Пока Абонент = ВыборкаАванс.Абонент цикл 			
			ОписаниеАванса 	= ОписаниеАванса();
			ЗаполнитьЗначенияСвойств(ОписаниеАванса, ВыборкаАванс);
			Авансы.Добавить(ОписаниеАванса);
			СуммаАванса 	= СуммаАванса + ВыборкаАванс.СуммаАванса;
			Если не ВыборкаАванс.следующий() тогда
				Прервать;
			КонецЕсли;  				
		КонецЦикла;				  
	КонецЕсли; 			
	
	Возврат Новый Структура("Авансы, СуммаАванса", Авансы, СуммаАванса);
	
КонецФункции

Функция ЗадолженностьНаГраницу(Абонент,ВыборкаЗадолженность)
	перем ТекПериодыЗадолженность,ТекУслуга,ЗадолженностьУслуга;
	
	РасшифровкаЗадолженности						= ТаблицаРасшифровкиЗадолженности();
	
	ОписаниеЗадолженности  							= ОписаниеЗадолженности();
	
	ЗадолженностьВсего  							= 0;
	
	Если Абонент  = ВыборкаЗадолженность.Абонент тогда		
		Пока Абонент = ВыборкаЗадолженность.Абонент цикл 			
			СтрокаЗадолженности  					= РасшифровкаЗадолженности.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗадолженности, ВыборкаЗадолженность);
			СтрокаЗадолженности.СуммаЗадолженности	= ВыборкаЗадолженность.ЗадолженностьНачалоПериода;
			ЗадолженностьВсего 						= ЗадолженностьВсего + ВыборкаЗадолженность.ЗадолженностьНачалоПериода;
			Если не ВыборкаЗадолженность.следующий() тогда
				Прервать;
			КонецЕсли;  				
		КонецЦикла;				  
	КонецЕсли; 	
	
	Результат  										= Новый Структура(ОписаниеЗадолженности);
	Результат.СуммаЗадолженности 					= ЗадолженностьВсего;
	Результат.Расшифровка 							= РасшифровкаЗадолженности;
	
	Возврат Результат;
КонецФункции

Функция ТаблицаРасшифровкиЗадолженности()
		
	ПериодыЗадолженности  							= Новый ТаблицаЗначений;
	Колонки  										= ПериодыЗадолженности.Колонки;
	Колонки.Добавить("ПорядокПериодРасчета",		Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ПорядокПогашенияУслуги",		Новый ОписаниеТипов("Число"));	
	Колонки.Добавить("Услуга",						Новый ОписаниеТипов("СправочникСсылка.энргВидыУслуг"));
	Колонки.Добавить("ПериодРасчета",				Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Колонки.Добавить("СуммаЗадолженности",			Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Колонки.Добавить("Поставщик",					Новый ОписаниеТипов("СправочникСсылка.энргКонтрагенты"));
	  
	Возврат ПериодыЗадолженности;
КонецФункции   

Функция ОписаниеЗадолженности()
	Возврат Новый ФиксированнаяСтруктура("СуммаЗадолженности,Расшифровка");	
КонецФункции

Функция ДанныеНачислений(Абонент,ВыборкаДанныеНачислений)
	перем ТекРасшифровкаНачислений;	
		
	РасшифровкаНачислений  									= Новый ТаблицаЗначений;
	РасшифровкаНачислений.Колонки.Добавить("ПериодРасчета",				Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РасшифровкаНачислений.Колонки.Добавить("Услуга",					Новый ОписаниеТипов("СправочникСсылка.энргВидыУслуг"));
	РасшифровкаНачислений.Колонки.Добавить("ПорядокПериодРасчета",		Новый ОписаниеТипов("Число"));
	РасшифровкаНачислений.Колонки.Добавить("ПорядокПогашенияУслуги",	Новый ОписаниеТипов("Число"));
	РасшифровкаНачислений.Колонки.Добавить("СуммаНачислений",			Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	РасшифровкаНачислений.Колонки.Добавить("Поставщик",					Новый ОписаниеТипов("СправочникСсылка.энргКонтрагенты"));
	
	ОписаниеНачислений  									= Новый ФиксированнаяСтруктура("СуммаНачислений,Расшифровка");
	СуммаНачислений 										= 0;
	ТекДокументНачисления 									= Неопределено;
	
	Результат  												= Новый Соответствие;
	
	Если Абонент  = ВыборкаДанныеНачислений.Абонент тогда		
		Пока Абонент = ВыборкаДанныеНачислений.Абонент цикл 			
			
			Если НЕ ТекДокументНачисления = ВыборкаДанныеНачислений.ДокРегистратор Тогда
				Если НЕ ТекДокументНачисления = Неопределено Тогда
					текОписаниеНачислений 					= Новый Структура(ОписаниеНачислений);
					текОписаниеНачислений.СуммаНачислений 	= СуммаНачислений;
					текОписаниеНачислений.Расшифровка 		= ТекРасшифровкаНачислений;
					Результат.Вставить(ТекДокументНачисления, текОписаниеНачислений);
				КонецЕсли;				
				ТекРасшифровкаНачислений 					= РасшифровкаНачислений.Скопировать();
			КонецЕсли;
						
			СтрокаНачисления	  							= ТекРасшифровкаНачислений.Добавить();
			СтрокаНачисления.ПериодРасчета 					= ВыборкаДанныеНачислений.ПериодРасчета;
			СтрокаНачисления.Услуга		 					= ВыборкаДанныеНачислений.Услуга;
			СтрокаНачисления.Поставщик 						= ВыборкаДанныеНачислений.Поставщик;
			СтрокаНачисления.СуммаНачислений				= ВыборкаДанныеНачислений.СуммаНачислений;
			СуммаНачислений 								= СуммаНачислений + ВыборкаДанныеНачислений.СуммаНачислений;
			ТекДокументНачисления 							= ВыборкаДанныеНачислений.ДокРегистратор;
			
			Если не ВыборкаДанныеНачислений.следующий() тогда
				Прервать;
			КонецЕсли;  				
		КонецЦикла;				  
	КонецЕсли; 	
	
	Если НЕ ТекДокументНачисления = Неопределено Тогда
		текОписаниеНачислений 								= Новый Структура(ОписаниеНачислений);
		текОписаниеНачислений.СуммаНачислений 				= СуммаНачислений;
		текОписаниеНачислений.Расшифровка 					= ТекРасшифровкаНачислений;
		Результат.Вставить(ТекДокументНачисления, текОписаниеНачислений);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Функция РезультатАвансыНаГраницу(Организация, ПериодНачисления,район,МКД,Абонент,МВТ,НачалоПериодаРасчета,КонецПериодаРасчета)
	
	Запрос  						= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Район",					Район);
	Запрос.УстановитьПараметр("МКД",					МКД);
	Запрос.УстановитьПараметр("Абонент",				Абонент);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",	НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаРасчета",	КонецПериодаРасчета);
	Текст 							= ТекстАвансыНаГраницу();
	
	Если МКД = Неопределено тогда
		Текст 						= СтрЗаменить(Текст,"И МКД = &МКД","");
	КонецЕсли;
	
	Если Абонент = Неопределено тогда
		Текст 						= СтрЗаменить(Текст,"И Абонент = &Абонент","");
	КонецЕсли;
	
	Запрос.Текст 					= Текст;
	Возврат Запрос.Выполнить();	
	
КонецФункции

Функция ТекстАвансыНаГраницу()
	Текст  =
	"ВЫБРАТЬ
	|	энргАвансыОстатки.Район КАК Район,
	|	энргАвансыОстатки.МКД КАК МКД,
	|	энргАвансыОстатки.Абонент КАК Абонент,
	|	энргАвансыОстатки.ДокументОплаты КАК ДокументОплаты,
	|	энргАвансыОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ АвансыОстатки
	|ИЗ
	|	РегистрНакопления.энргАвансы.Остатки(
	|			&НачалоПериодаРасчета,
	|			Организация = &Организация
	|				И Район = &Район
	|				И МКД = &МКД
	|				И Абонент = &Абонент) КАК энргАвансыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргАвансыОбороты.Период КАК Период,
	|	энргАвансыОбороты.Регистратор КАК Регистратор,
	|	энргАвансыОбороты.Район КАК Район,
	|	энргАвансыОбороты.МКД КАК МКД,
	|	энргАвансыОбороты.Абонент КАК Абонент,
	|	энргАвансыОбороты.ДокументОплаты КАК ДокументОплаты,
	|	энргАвансыОбороты.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ АвансыОбороты
	|ИЗ
	|	РегистрНакопления.энргАвансы.Обороты(
	|			&НачалоПериодаРасчета,
	|			&КонецПериодаРасчета,
	|			Регистратор,
	|			Организация = &Организация
	|				И Район = &Район
	|				И МКД = &МКД
	|				И Абонент = &Абонент) КАК энргАвансыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.МКД КАК МКД,
	|	ВложенныйЗапрос.Абонент КАК Абонент,
	|	ВложенныйЗапрос.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(ВложенныйЗапрос.СуммаАванса) КАК СуммаАванса
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазличныеАбоненты.Организация КАК Организация,
	|		РазличныеАбоненты.ПериодНачисления КАК ПериодНачисления,
	|		РазличныеАбоненты.Район КАК Район,
	|		РазличныеАбоненты.МКД КАК МКД,
	|		РазличныеАбоненты.Абонент КАК Абонент,
	|		АвансыОстатки.ДокументОплаты КАК ДокументОплаты,
	|		АвансыОстатки.СуммаОстаток КАК СуммаАванса
	|	ИЗ
	|		РазличныеАбоненты КАК РазличныеАбоненты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АвансыОстатки КАК АвансыОстатки
	|			ПО РазличныеАбоненты.Район = АвансыОстатки.Район
	|				И РазличныеАбоненты.МКД = АвансыОстатки.МКД
	|				И РазличныеАбоненты.Абонент = АвансыОстатки.Абонент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МинимумРегистратор.Организация,
	|		МинимумРегистратор.ПериодНачисления,
	|		МинимумРегистратор.Район,
	|		МинимумРегистратор.МКД,
	|		МинимумРегистратор.Абонент,
	|		АвансыОбороты.ДокументОплаты,
	|		СУММА(АвансыОбороты.СуммаОборот)
	|	ИЗ
	|		МинимумРегистратор КАК МинимумРегистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АвансыОбороты КАК АвансыОбороты
	|			ПО (ВЫБОР
	|					КОГДА МинимумРегистратор.ДатаРегистратора > АвансыОбороты.Период
	|						ТОГДА ИСТИНА
	|					КОГДА МинимумРегистратор.ДатаРегистратора = АвансыОбороты.Период
	|						ТОГДА ВЫБОР
	|								КОГДА МинимумРегистратор.ДопПорядок = 0
	|										И АвансыОбороты.Регистратор ССЫЛКА Документ.энргНачисление
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ МинимумРегистратор.ДокРегистратор > АвансыОбороты.Регистратор
	|							КОНЕЦ
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|				И МинимумРегистратор.Район = АвансыОбороты.Район
	|				И МинимумРегистратор.МКД = АвансыОбороты.МКД
	|				И МинимумРегистратор.Абонент = АвансыОбороты.Абонент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МинимумРегистратор.Организация,
	|		МинимумРегистратор.ПериодНачисления,
	|		МинимумРегистратор.Район,
	|		МинимумРегистратор.МКД,
	|		МинимумРегистратор.Абонент,
	|		АвансыОбороты.ДокументОплаты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.ПериодНачисления,
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.МКД,
	|	ВложенныйЗапрос.Абонент,
	|	ВложенныйЗапрос.ДокументОплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	МКД,
	|	Абонент,
	|	ДокументОплаты";
	Возврат Текст;
КонецФункции

Функция РезультатДокументыДляПроведения(Организация,ПериодНачисления,Район,МКД,Абонент,МВТ)
	Запрос  						= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Район",				Район);
	Запрос.УстановитьПараметр("МКД",				МКД);
	Запрос.УстановитьПараметр("Абонент",			Абонент);
	Запрос.УстановитьПараметр("ПериодНачисления",	ПериодНачисления);
	Текст 							= ТекстДокументыДляПроведения();
	
	Если МКД = Неопределено тогда
		Текст 						= СтрЗаменить(Текст,"И (энргВзаиморасчетыПоследовательность.МКД = &МКД)","");
	КонецЕсли;
	
	Если Абонент = Неопределено тогда
		Текст 						= СтрЗаменить(Текст,"И (энргВзаиморасчетыПоследовательность.Абонент = &Абонент)","");
	КонецЕсли;
	
	Запрос.Текст 					= Текст;
	Возврат Запрос.Выполнить();	
КонецФункции

Функция ТекстМВТ_Взаиморасчеты()
	
	Текст 	=
	"ВЫБРАТЬ
	|	энргВзаиморасчетыПоследовательность.Организация КАК Организация,
	|	энргВзаиморасчетыПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргВзаиморасчетыПоследовательность.Район КАК Район,
	|	энргВзаиморасчетыПоследовательность.МКД КАК МКД,
	|	энргВзаиморасчетыПоследовательность.Абонент КАК Абонент,
	|	МИНИМУМ(энргВзаиморасчетыПоследовательность.ДатаРегистратора) КАК ДатаРегистратора
	|ПОМЕСТИТЬ МинимумДатаРегистратора
	|ИЗ
	|	РегистрСведений.энргВзаиморасчетыПоследовательность КАК энргВзаиморасчетыПоследовательность
	|ГДЕ
	|	энргВзаиморасчетыПоследовательность.Организация = &Организация
	|	И энргВзаиморасчетыПоследовательность.ПериодНачисления = &ПериодНачисления
	|	И энргВзаиморасчетыПоследовательность.Район = &Район
	|	И энргВзаиморасчетыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности))
	|	И энргВзаиморасчетыПоследовательность.МКД = &МКД
	|	И энргВзаиморасчетыПоследовательность.Абонент = &Абонент
	|
	|СГРУППИРОВАТЬ ПО
	|	энргВзаиморасчетыПоследовательность.Организация,
	|	энргВзаиморасчетыПоследовательность.ПериодНачисления,
	|	энргВзаиморасчетыПоследовательность.Район,
	|	энргВзаиморасчетыПоследовательность.МКД,
	|	энргВзаиморасчетыПоследовательность.Абонент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимумДатаРегистратора.Организация КАК Организация,
	|	МинимумДатаРегистратора.ПериодНачисления КАК ПериодНачисления,
	|	МинимумДатаРегистратора.Район КАК Район,
	|	МинимумДатаРегистратора.МКД КАК МКД,
	|	МинимумДатаРегистратора.Абонент КАК Абонент,
	|	МинимумДатаРегистратора.ДатаРегистратора КАК ДатаРегистратора,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА энргВзаиморасчетыПоследовательность.ДокРегистратор ССЫЛКА Документ.энргПерерасчет
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДопПорядок
	|ПОМЕСТИТЬ МинимумДопПорядокРегистратора
	|ИЗ
	|	МинимумДатаРегистратора КАК МинимумДатаРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргВзаиморасчетыПоследовательность КАК энргВзаиморасчетыПоследовательность
	|		ПО (энргВзаиморасчетыПоследовательность.Организация = &Организация)
	|			И (энргВзаиморасчетыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргВзаиморасчетыПоследовательность.Район = &Район)
	|			И (энргВзаиморасчетыПоследовательность.МКД = &МКД)
	|			И (энргВзаиморасчетыПоследовательность.Абонент = &Абонент)
	|			И (энргВзаиморасчетыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимумДатаРегистратора.Организация = энргВзаиморасчетыПоследовательность.Организация
	|			И МинимумДатаРегистратора.ПериодНачисления = энргВзаиморасчетыПоследовательность.ПериодНачисления
	|			И МинимумДатаРегистратора.Район = энргВзаиморасчетыПоследовательность.Район
	|			И МинимумДатаРегистратора.МКД = энргВзаиморасчетыПоследовательность.МКД
	|			И МинимумДатаРегистратора.Абонент = энргВзаиморасчетыПоследовательность.Абонент
	|			И МинимумДатаРегистратора.ДатаРегистратора = энргВзаиморасчетыПоследовательность.ДатаРегистратора
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимумДатаРегистратора.Организация,
	|	МинимумДатаРегистратора.ПериодНачисления,
	|	МинимумДатаРегистратора.Район,
	|	МинимумДатаРегистратора.МКД,
	|	МинимумДатаРегистратора.Абонент,
	|	МинимумДатаРегистратора.ДатаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимумДопПорядокРегистратора.Организация КАК Организация,
	|	МинимумДопПорядокРегистратора.ПериодНачисления КАК ПериодНачисления,
	|	МинимумДопПорядокРегистратора.Район КАК Район,
	|	МинимумДопПорядокРегистратора.МКД КАК МКД,
	|	МинимумДопПорядокРегистратора.Абонент КАК Абонент,
	|	МинимумДопПорядокРегистратора.ДатаРегистратора КАК ДатаРегистратора,
	|	МинимумДопПорядокРегистратора.ДопПорядок КАК ДопПорядок,
	|	МИНИМУМ(энргВзаиморасчетыПоследовательность.ДокРегистратор) КАК ДокРегистратор
	|ПОМЕСТИТЬ МинимумРегистратор
	|ИЗ
	|	МинимумДопПорядокРегистратора КАК МинимумДопПорядокРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргВзаиморасчетыПоследовательность КАК энргВзаиморасчетыПоследовательность
	|		ПО (энргВзаиморасчетыПоследовательность.Организация = &Организация)
	|			И (энргВзаиморасчетыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргВзаиморасчетыПоследовательность.Район = &Район)
	|			И (энргВзаиморасчетыПоследовательность.МКД = &МКД)
	|			И (энргВзаиморасчетыПоследовательность.Абонент = &Абонент)
	|			И (энргВзаиморасчетыПоследовательность.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности)))
	|			И МинимумДопПорядокРегистратора.Организация = энргВзаиморасчетыПоследовательность.Организация
	|			И МинимумДопПорядокРегистратора.ПериодНачисления = энргВзаиморасчетыПоследовательность.ПериодНачисления
	|			И МинимумДопПорядокРегистратора.Район = энргВзаиморасчетыПоследовательность.Район
	|			И МинимумДопПорядокРегистратора.МКД = энргВзаиморасчетыПоследовательность.МКД
	|			И МинимумДопПорядокРегистратора.Абонент = энргВзаиморасчетыПоследовательность.Абонент
	|			И МинимумДопПорядокРегистратора.ДатаРегистратора = энргВзаиморасчетыПоследовательность.ДатаРегистратора
	|			И (ВЫБОР
	|				КОГДА МинимумДопПорядокРегистратора.ДопПорядок = 0
	|					ТОГДА энргВзаиморасчетыПоследовательность.ДокРегистратор ССЫЛКА Документ.энргПерерасчет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	МинимумДопПорядокРегистратора.Организация,
	|	МинимумДопПорядокРегистратора.ПериодНачисления,
	|	МинимумДопПорядокРегистратора.Район,
	|	МинимумДопПорядокРегистратора.МКД,
	|	МинимумДопПорядокРегистратора.Абонент,
	|	МинимумДопПорядокРегистратора.ДатаРегистратора,
	|	МинимумДопПорядокРегистратора.ДопПорядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МинимумРегистратор.Организация КАК Организация,
	|	МинимумРегистратор.ПериодНачисления КАК ПериодНачисления,
	|	МинимумРегистратор.Район КАК Район,
	|	МинимумРегистратор.МКД КАК МКД,
	|	МинимумРегистратор.Абонент КАК Абонент
	|ПОМЕСТИТЬ РазличныеАбоненты
	|ИЗ
	|	МинимумРегистратор КАК МинимумРегистратор";	
	Возврат Текст;
КонецФункции

Функция ЗаполнитьМВТВзаиморасчеты(Организация, ПериодНачисления,Район,МКД,Абонент)
	МВТ 							= Новый МенеджерВременныхТаблиц;	
	Запрос  						= Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",ПериодНачисления);
	Запрос.УстановитьПараметр("Район",			Район);
	Запрос.УстановитьПараметр("МКД",			МКД);
	Запрос.УстановитьПараметр("Абонент",		Абонент);
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Текст 							= ТекстМВТ_Взаиморасчеты();	
	Если МКД = Неопределено тогда
		Текст 						= СтрЗаменить(Текст,"И энргВзаиморасчетыПоследовательность.МКД = &МКД","");
		Текст 						= СтрЗаменить(Текст,"И (энргВзаиморасчетыПоследовательность.МКД = &МКД)","");
	КонецЕсли;
	
	Если Абонент = Неопределено тогда
		Текст 						= СтрЗаменить(Текст,"И энргВзаиморасчетыПоследовательность.Абонент = &Абонент","");
		Текст 						= СтрЗаменить(Текст,"И (энргВзаиморасчетыПоследовательность.Абонент = &Абонент)","");
	КонецЕсли;
	
	Запрос.Текст 					= Текст;
	Запрос.Выполнить();
	Возврат МВТ;
КонецФункции

Функция ПровестиВзаиморасчеты(ПараметрыПроведения,МассивДокументовНачисления)

	Организация 							= ПараметрыПроведения.Организация;
	ПериодНачисления						= ПараметрыПроведения.ПериодНачисления;
	Район									= ПараметрыПроведения.Район;
	МассивДокументов						= ПараметрыПроведения.МассивДокументов;
	ДанныеЗадолженности						= ПараметрыПроведения.ДанныеЗадолженности;
	СпособРаспределенияОплаты 				= ПараметрыПроведения.СпособРаспределенияОплаты;
	Исключен  								= Перечисления.энргСостояниеДокументаВПоследовательности.ИсключенИзПоследовательности;
	ПроведенВПоследоватености  				= Перечисления.энргСостояниеДокументаВПоследовательности.ПроведенВПоследовательности;
	Начисления								= ПараметрыПроведения.ДанныеНачислений;
	текДокРегистратор 						= Неопределено;
		
	Параметры 							= Новый Структура("
	|Организация, ПериодНачисления,Район,
	|Авансы,СуммаАванса,ДанныеЗадолженности,
	|СпособРаспределенияОплаты, НастройкиПорядкаПогашения",
	Организация, ПериодНачисления,район,
	ПараметрыПроведения.Авансы,ПараметрыПроведения.СуммаАванса,ДанныеЗадолженности,
	СпособРаспределенияОплаты,ПараметрыПроведения.НастройкиПорядкаПогашения);
		
	для Каждого Документ из МассивДокументов цикл  		
		ОчищатьСтроки 						= Истина;
		Если текДокРегистратор = Документ.ДокРегистратор Тогда
			ОчищатьСтроки 					= Ложь;
		КонецЕсли;
		
		Если Документ.состояниепроведения  = Исключен тогда 			
			// Очищаем данные.
			НаборПоследовательности 		= РегистрыСведений.энргВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();
			НаборПоследовательности.Отбор.ДокРегистратор.установить(Документ.ДокРегистратор);
			НаборПоследовательности.Отбор.Организация.установить(Организация);
			НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
			НаборПоследовательности.Отбор.Район.установить(Район);
			НаборПоследовательности.Отбор.СостояниеПроведения.установить(Документ.СостояниеПроведения);
			НаборПоследовательности.Отбор.МКД.установить(Документ.МКД);
			НаборПоследовательности.Отбор.Абонент.установить(Документ.Абонент);
			НаборПоследовательности.Записать();		
			Продолжить;
		КонецЕсли;
		
		текДокРегистратор 					= Документ.ДокРегистратор;
		
		УслугаДляСписания					= ?(ЗначениеЗаполнено(Документ.Услуга),Документ.Услуга,Неопределено);
		
		ДанныеДокумента  					= Новый Структура;
		ДанныеДокумента.Вставить("Абонент", 			Документ.Абонент);
		ДанныеДокумента.Вставить("МКД",					Документ.МКД); 				
		ДанныеДокумента.Вставить("Сумма",				Документ.Сумма); 		 
		ДанныеДокумента.Вставить("Период",				Документ.ДатаРегистратора);
		ДанныеДокумента.Вставить("Услуга",				Документ.Услуга);
		ДанныеДокумента.Вставить("Кассир",				Документ.Кассир);
		ДанныеДокумента.Вставить("ИсточникПоступления",	Документ.ИсточникПоступления);		
		ДанныеДокумента.Вставить("Регистратор",			текДокРегистратор);
		ДанныеДокумента.Вставить("ЭтоОплата",			Документ.ЭтоОплата);
		
		СтруктураТаблицНаборов 				= СтруктураТаблицНаборов(МассивДокументовНачисления, ОчищатьСтроки, ДанныеДокумента, ПараметрыПроведения, текДокРегистратор);
		
		ДанныеДокумента.Вставить("НаборТаблиц",			СтруктураТаблицНаборов.НаборТаблиц);
		ДанныеДокумента.Вставить("НаборыЗаписей",		СтруктураТаблицНаборов.НаборыЗаписей);
		
		Если Не Документ.ЭтоОплата тогда			
			ДанныеНачисления					= Начисления[текДокРегистратор];									
			Если ДанныеНачисления <> Неопределено тогда				
				УвеличитьЗадолженность(Параметры, ДанныеДокумента, ДанныеНачисления);
			КонецЕсли; 		
		Иначе			
			СписатьЗадолженность(Параметры, ДанныеДокумента, ДанныеДокумента.Сумма,УслугаДляСписания,Документ.Поставщик,Документ.ПериодВзаиморасчетов); 
		КонецЕсли;
		
		// Удаляем не нужные параметры.
		МассивПараметров  						= ПараметрыВзаиморасчетов();
		для Каждого УдаляемыйПараметр из МассивПараметров цикл
			Если Параметры.Свойство(УдаляемыйПараметр) тогда
				Параметры.Удалить(УдаляемыйПараметр);
			КонецЕсли;			
		КонецЦикла;
				
		// Не будем выполнять запись сразу, сначало пройдем всех абонентов.
		Если ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.энргНачисление")
			или ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.энргРаспределениеМКД")
			или ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.энргПлатежноеПоручениеВходящие")
			или ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.энргПоступлениеОплатыЧерезКонтроллера") тогда
			
			НаборыЗаписей 				= Новый Структура("энргВзаиморасчетыПоМесяцам,энргАвансы,энргАвансыИспользованные");			
			НаборТаблиц 				= Новый Структура("энргАвансы,энргАвансыИспользованные,энргВзаиморасчетыПоМесяцам"); 			
			 									
			Если ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.энргПлатежноеПоручениеВходящие")
				или ТипЗнч(текДокРегистратор) = Тип("ДокументСсылка.энргПоступлениеОплатыЧерезКонтроллера") Тогда				
				НаборыЗаписей.Вставить("энргОплатаУслуг",		 	Неопределено);
				НаборыЗаписей.Вставить("энргАвансыПоступившие",	Неопределено);				
				НаборТаблиц.Вставить("энргОплатаУслуг",				Неопределено);
				НаборТаблиц.Вставить("энргАвансыПоступившие",		Неопределено);
			КонецЕсли;  	
			ЗаполнитьЗначенияСвойств(НаборыЗаписей,ДанныеДокумента.НаборыЗаписей);
			ЗаполнитьЗначенияСвойств(НаборТаблиц,ДанныеДокумента.НаборТаблиц);
			
			НаборыОтложеннаяЗапись		= Новый Структура("НаборыЗаписей, НаборТаблиц", НаборыЗаписей, НаборТаблиц);
						
			Если МассивДокументовНачисления.получить(текДокРегистратор) = Неопределено тогда				
				МассивДокументовНачисления.вставить(текДокРегистратор,НаборыОтложеннаяЗапись);
			иначе
				МассивДокументовНачисления[текДокРегистратор] = НаборыОтложеннаяЗапись;
			КонецЕсли;
			ПараметрыПроведения.вставить("ЕстьДокументыНачисления",Истина); 
			Продолжить;
		иначе
			НаборыЗаписей 				= ДанныеДокумента.НаборыЗаписей;
			НаборТаблиц 				= ДанныеДокумента.НаборТаблиц;
			для Каждого  СтрокаНабора из НаборыЗаписей цикл
				СтрокаНабора.Значение.загрузить(НаборТаблиц[СтрокаНабора.ключ]);
			КонецЦикла;			 			
		КонецЕсли;   	
		
		Попытка
			для Каждого СтрокаНаборов из НаборыЗаписей цикл
				СтрокаНаборов.Значение.записать();
			КонецЦикла;		
		Исключение                      
			Представление 				= "Не восстановлена последоватеность по абоненту: " + Документ.Абонент;
			Представление  				= Представление +Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Представление);
			Возврат Истина;
		КонецПопытки;
	КонецЦикла; 
	
	Возврат Ложь;
КонецФункции

Функция СтруктураТаблицНаборов(МассивДокументовНачисления, ОчищатьСтроки, ДанныеДокумента, ПараметрыПроведения, ДокРегистратор)
	
	НаборТаблиц  					= Новый Структура;
	НаборыЗаписей 					= Новый Структура;		
	Если (ТипЗнч(ДокРегистратор) = Тип("ДокументСсылка.энргНачисление")
		или ТипЗнч(ДокРегистратор) = Тип("ДокументСсылка.энргРаспределениеМКД")
		или ТипЗнч(ДокРегистратор) = Тип("ДокументСсылка.энргПлатежноеПоручениеВходящие")
		или ТипЗнч(ДокРегистратор) = Тип("ДокументСсылка.энргПоступлениеОплатыЧерезКонтроллера"))
		и  МассивДокументовНачисления.Получить(ДокРегистратор) <> Неопределено тогда
		
		НаборыЗаписей  				= МассивДокументовНачисления[ДокРегистратор].НаборыЗаписей;
		НаборТаблиц 				= МассивДокументовНачисления[ДокРегистратор].НаборТаблиц;
	иначе 			
		МассивИмен  					= ПараметрыПроведения.НаборыПоТипам.получить(ТипЗнч(ДокРегистратор));
		для Каждого ИмяРегистра из МассивИмен цикл
			Набор  						= РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			Набор.Отбор.регистратор.установить(ДокРегистратор);
			Набор.Прочитать();
			
			Таблица 					= Набор.выгрузить();
			Набор.Очистить();
			НаборыЗаписей.Вставить(ИмяРегистра,Набор);
			НаборТаблиц.Вставить(ИмяРегистра,Таблица);
		КонецЦикла;							
	КонецЕсли;
	
	Если ОчищатьСтроки  Тогда
		для Каждого СтрокаТаблиц из НаборТаблиц цикл
			Строки 						= СтрокаТаблиц.Значение.НайтиСтроки(Новый Структура("Абонент",ДанныеДокумента.Абонент));
			для Каждого Строка из Строки цикл
				СтрокаТаблиц.Значение.Удалить(Строка);
			КонецЦикла;  			
		КонецЦикла; 		
	КонецЕсли;

	Возврат Новый Структура("НаборТаблиц,НаборыЗаписей",НаборТаблиц,НаборыЗаписей);
	
КонецФункции

Функция ПараметрыВзаиморасчетов()
	
	МассивКлючей  = Новый Массив;
	МассивКлючей.Добавить("СнятьТекущие");
	МассивКлючей.Добавить("ВозвратАванса");
	МассивКлючей.Добавить("ДанныеНачисления");
	МассивКлючей.Добавить("Кассир");
	МассивКлючей.Добавить("ИсточникПоступления");
	Возврат МассивКлючей;	
КонецФункции

Функция РезультатЗадолженность(Организация, ПериодНачисления,Район,МКД,Абонент,МВТ,НачалоПериодаРасчета,КонецПериодаРасчета)
	
	Запрос  						= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Район",					Район);
	Запрос.УстановитьПараметр("МКД",					МКД);
	Запрос.УстановитьПараметр("Абонент",				Абонент);
	Запрос.УстановитьПараметр("ПериодНачисления",		ПериодНачисления);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета",	НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаРасчета",	КонецПериодаРасчета);
	Запрос.УстановитьПараметр("СначалаТекущиеНачисления", Константы.энргСначалаГаситьТекущиеНачисления.Получить());
		
	Текст 							= ТекстЗадолженностьНаГраницу();
	
	Если МКД = Неопределено тогда
		Текст 						= СтрЗаменить(Текст,"И МКД = &МКД","");
	КонецЕсли;
	
	Если Абонент = Неопределено тогда
		Текст 						= СтрЗаменить(Текст,"И Абонент = &Абонент","");
	КонецЕсли;
	
	Запрос.Текст 					= Текст;
	Возврат Запрос.Выполнить();	
КонецФункции

Функция РезультатДанныеНачислений(МВТ)
	
	Запрос  						= Новый Запрос;
	Запрос.УстановитьПараметр("СначалаТекущиеНачисления", Константы.энргСначалаГаситьТекущиеНачисления.Получить());
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.Текст 		=
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.МКД КАК МКД,
	|	ВложенныйЗапрос.Абонент КАК Абонент,
	|	ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|	ВложенныйЗапрос.ПериодРасчета КАК ПериодРасчета,
	|	ВложенныйЗапрос.Поставщик КАК Поставщик,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.СуммаНачислений КАК СуммаНачислений,
	|	ВЫБОР
	|		КОГДА &СначалаТекущиеНачисления
	|				И ВложенныйЗапрос.ПериодРасчета = ВложенныйЗапрос.ПериодНачисления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокПериодРасчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпособРаспределенияОплаты.СпособРаспределения, ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения)
	|			ТОГДА ЕСТЬNULL(ПорядокПогашенияУслуг.Порядок, 99999)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокПогашенияУслуги
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыДляПроведения.ПериодНачисления КАК ПериодНачисления,
	|		ДокументыДляПроведения.Район КАК Район,
	|		ДокументыДляПроведения.МКД КАК МКД,
	|		ДокументыДляПроведения.Абонент КАК Абонент,
	|		ДокументыДляПроведения.ДокРегистратор КАК ДокРегистратор,
	|		энргОбъемНачислений.ПериодНачисления КАК ПериодРасчета,
	|		энргОбъемНачислений.Поставщик КАК Поставщик,
	|		энргОбъемНачислений.Услуга КАК Услуга,
	|		СУММА(энргОбъемНачислений.Сумма) КАК СуммаНачислений
	|	ИЗ
	|		ДокументыДляПроведения КАК ДокументыДляПроведения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.энргОбъемНачислений КАК энргОбъемНачислений
	|			ПО ДокументыДляПроведения.ДокРегистратор = энргОбъемНачислений.Регистратор
	|				И (НАЧАЛОПЕРИОДА(ДокументыДляПроведения.датаРегистратора, ДЕНЬ) = НАЧАЛОПЕРИОДА(энргОбъемНачислений.Период, ДЕНЬ))
	|				И ДокументыДляПроведения.Абонент = энргОбъемНачислений.Абонент
	|				И (энргОбъемНачислений.Сумма <> 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументыДляПроведения.ДокРегистратор,
	|		энргОбъемНачислений.ПериодНачисления,
	|		энргОбъемНачислений.Поставщик,
	|		энргОбъемНачислений.Услуга,
	|		ДокументыДляПроведения.ПериодНачисления,
	|		ДокументыДляПроведения.Абонент,
	|		ДокументыДляПроведения.Район,
	|		ДокументыДляПроведения.МКД) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокПогашенияУслуг КАК ПорядокПогашенияУслуг
	|		ПО ВложенныйЗапрос.Услуга = ПорядокПогашенияУслуг.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособРаспределенияОплаты КАК СпособРаспределенияОплаты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ПериодНачисления,
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.МКД,
	|	ВложенныйЗапрос.Абонент,
	|	ВложенныйЗапрос.ДокРегистратор,
	|	ВложенныйЗапрос.Услуга";	
	
	Возврат Запрос.Выполнить(); 	
КонецФункции

Функция ТекстДокументыДляПроведения()
	Текст  =
	"ВЫБРАТЬ
	|	энргВзаиморасчетыПоследовательность.ПериодНачисления КАК ПериодНачисления,
	|	энргВзаиморасчетыПоследовательность.Район КАК Район,
	|	энргВзаиморасчетыПоследовательность.СостояниеПроведения КАК СостояниеПроведения,
	|	энргВзаиморасчетыПоследовательность.МКД КАК МКД,
	|	энргВзаиморасчетыПоследовательность.Абонент КАК Абонент,
	|	энргВзаиморасчетыПоследовательность.ДатаРегистратора КАК ДатаРегистратора,
	|	энргВзаиморасчетыПоследовательность.ДокРегистратор КАК ДокРегистратор,
	|	энргВзаиморасчетыПоследовательность.Сумма КАК Сумма,
	|	энргВзаиморасчетыПоследовательность.ЭтоОплата КАК ЭтоОплата,
	|	энргВзаиморасчетыПоследовательность.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	энргВзаиморасчетыПоследовательность.Услуга КАК Услуга,
	|	энргВзаиморасчетыПоследовательность.Кассир КАК Кассир,
	|	энргВзаиморасчетыПоследовательность.ИсточникПоступления КАК ИсточникПоступления,
	|	энргВзаиморасчетыПоследовательность.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ДокументыДляПроведения
	|ИЗ
	|	МинимумРегистратор КАК МинимумРегистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргВзаиморасчетыПоследовательность КАК энргВзаиморасчетыПоследовательность
	|		ПО (энргВзаиморасчетыПоследовательность.ПериодНачисления = &ПериодНачисления)
	|			И (энргВзаиморасчетыПоследовательность.Район = &Район)
	|			И (энргВзаиморасчетыПоследовательность.МКД = &МКД)
	|			И (энргВзаиморасчетыПоследовательность.Абонент = &Абонент)
	|			И (ВЫБОР
	|				КОГДА МинимумРегистратор.ДатаРегистратора < энргВзаиморасчетыПоследовательность.ДатаРегистратора
	|					ТОГДА ИСТИНА
	|				КОГДА МинимумРегистратор.ДатаРегистратора = энргВзаиморасчетыПоследовательность.ДатаРегистратора
	|					ТОГДА ВЫБОР
	|							КОГДА МинимумРегистратор.ДопПорядок = 0
	|									И энргВзаиморасчетыПоследовательность.ДокРегистратор ССЫЛКА Документ.энргНачисление
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ МинимумРегистратор.ДокРегистратор <= энргВзаиморасчетыПоследовательность.ДокРегистратор
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И МинимумРегистратор.ПериодНачисления = энргВзаиморасчетыПоследовательность.ПериодНачисления
	|			И МинимумРегистратор.Район = энргВзаиморасчетыПоследовательность.Район
	|			И МинимумРегистратор.МКД = энргВзаиморасчетыПоследовательность.МКД
	|			И МинимумРегистратор.Абонент = энргВзаиморасчетыПоследовательность.Абонент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыДляПроведения.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыДляПроведения.Район КАК Район,
	|	ДокументыДляПроведения.СостояниеПроведения КАК СостояниеПроведения,
	|	ДокументыДляПроведения.МКД КАК МКД,
	|	ДокументыДляПроведения.Абонент КАК Абонент,
	|	ДокументыДляПроведения.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыДляПроведения.ДокРегистратор КАК ДокРегистратор,
	|	ВЫБОР
	|		КОГДА ДокументыДляПроведения.ДокРегистратор ССЫЛКА Документ.энргПерерасчет
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДопПорядок,
	|	ДокументыДляПроведения.Сумма КАК Сумма,
	|	ДокументыДляПроведения.ЭтоОплата КАК ЭтоОплата,
	|	ДокументыДляПроведения.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ДокументыДляПроведения.Услуга КАК Услуга,
	|	ДокументыДляПроведения.Кассир КАК Кассир,
	|	ДокументыДляПроведения.ИсточникПоступления КАК ИсточникПоступления,
	|	ДокументыДляПроведения.Поставщик КАК Поставщик
	|ИЗ
	|	ДокументыДляПроведения КАК ДокументыДляПроведения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодНачисления,
	|	Район,
	|	МКД,
	|	Абонент,
	|	ДатаРегистратора,
	|	ДопПорядок,
	|	ДокРегистратор";
	Возврат Текст; 
КонецФункции

Функция ТекстЗадолженностьНаГраницу()
	
	Текст 	=
	"ВЫБРАТЬ
	|	энргСпособыРаспределенияОплатыСрезПоследних.СпособРаспределения КАК СпособРаспределения
	|ПОМЕСТИТЬ СпособРаспределенияОплаты
	|ИЗ
	|	РегистрСведений.энргСпособыРаспределенияОплаты.СрезПоследних(&КонецПериодаРасчета, Организация = &Организация) КАК энргСпособыРаспределенияОплатыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргПорядокПогашенияЗадолженностиСрезПоследних.Услуга КАК Услуга,
	|	энргПорядокПогашенияЗадолженностиСрезПоследних.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПорядокПогашенияУслуг
	|ИЗ
	|	РегистрСведений.энргПорядокПогашенияЗадолженности.СрезПоследних(&КонецПериодаРасчета, Организация = &Организация) КАК энргПорядокПогашенияЗадолженностиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргВзаиморасчетыПоМесяцамОстатки.Район КАК Район,
	|	энргВзаиморасчетыПоМесяцамОстатки.ПериодНачисления КАК ПериодНачисления,
	|	энргВзаиморасчетыПоМесяцамОстатки.МКД КАК МКД,
	|	энргВзаиморасчетыПоМесяцамОстатки.Абонент КАК Абонент,
	|	энргВзаиморасчетыПоМесяцамОстатки.Услуга КАК Услуга,
	|	энргВзаиморасчетыПоМесяцамОстатки.СуммаОстаток КАК СуммаОстаток,
	|	энргВзаиморасчетыПоМесяцамОстатки.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ОстатокНачалоПериода
	|ИЗ
	|	РегистрНакопления.энргВзаиморасчетыПоМесяцам.Остатки(
	|			&НачалоПериодаРасчета,
	|			Район = &Район
	|				И МКД = &МКД
	|				И Абонент = &Абонент) КАК энргВзаиморасчетыПоМесяцамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргВзаиморасчетыПоМесяцамОбороты.Район КАК Район,
	|	энргВзаиморасчетыПоМесяцамОбороты.Период КАК Период,
	|	энргВзаиморасчетыПоМесяцамОбороты.Регистратор КАК Регистратор,
	|	энргВзаиморасчетыПоМесяцамОбороты.ПериодНачисления КАК ПериодНачисления,
	|	энргВзаиморасчетыПоМесяцамОбороты.МКД КАК МКД,
	|	энргВзаиморасчетыПоМесяцамОбороты.Абонент КАК Абонент,
	|	энргВзаиморасчетыПоМесяцамОбороты.Услуга КАК Услуга,
	|	энргВзаиморасчетыПоМесяцамОбороты.СуммаОборот КАК СуммаОборот,
	|	энргВзаиморасчетыПоМесяцамОбороты.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ВзаиморасчетыОбороты
	|ИЗ
	|	РегистрНакопления.энргВзаиморасчетыПоМесяцам.Обороты(
	|			&НачалоПериодаРасчета,
	|			&КонецПериодаРасчета,
	|			Регистратор,
	|			Район = &Район
	|				И МКД = &МКД
	|				И Абонент = &Абонент) КАК энргВзаиморасчетыПоМесяцамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.МКД КАК МКД,
	|	ВложенныйЗапрос.Абонент КАК Абонент,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.Поставщик КАК Поставщик,
	|	ВложенныйЗапрос.ПериодРасчета КАК ПериодРасчета,
	|	СУММА(ВложенныйЗапрос.ЗадолженностьНачалоПериода) КАК ЗадолженностьНачалоПериода,
	|	ВЫБОР
	|		КОГДА &СначалаТекущиеНачисления
	|				И ВложенныйЗапрос.ПериодРасчета = &ПериодНачисления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокПериодРасчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпособРаспределенияОплаты.СпособРаспределения, ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения)
	|			ТОГДА ЕСТЬNULL(ПорядокПогашенияУслуг.Порядок, 99999)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокПогашенияУслуги
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазличныеАбоненты.ПериодНачисления КАК ПериодНачисления,
	|		РазличныеАбоненты.Район КАК Район,
	|		РазличныеАбоненты.МКД КАК МКД,
	|		РазличныеАбоненты.Абонент КАК Абонент,
	|		ОстатокНачалоПериода.Услуга КАК Услуга,
	|		ОстатокНачалоПериода.Поставщик КАК Поставщик,
	|		ОстатокНачалоПериода.ПериодНачисления КАК ПериодРасчета,
	|		ОстатокНачалоПериода.СуммаОстаток КАК ЗадолженностьНачалоПериода
	|	ИЗ
	|		РазличныеАбоненты КАК РазличныеАбоненты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстатокНачалоПериода КАК ОстатокНачалоПериода
	|			ПО РазличныеАбоненты.Район = ОстатокНачалоПериода.Район
	|				И РазличныеАбоненты.МКД = ОстатокНачалоПериода.МКД
	|				И РазличныеАбоненты.Абонент = ОстатокНачалоПериода.Абонент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МинимумРегистратор.ПериодНачисления,
	|		МинимумРегистратор.Район,
	|		МинимумРегистратор.МКД,
	|		МинимумРегистратор.Абонент,
	|		ВзаиморасчетыОбороты.Услуга,
	|		ВзаиморасчетыОбороты.Поставщик,
	|		ВзаиморасчетыОбороты.ПериодНачисления,
	|		СУММА(ВзаиморасчетыОбороты.СуммаОборот)
	|	ИЗ
	|		МинимумРегистратор КАК МинимумРегистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВзаиморасчетыОбороты КАК ВзаиморасчетыОбороты
	|			ПО (ВЫБОР
	|					КОГДА МинимумРегистратор.ДатаРегистратора > ВзаиморасчетыОбороты.Период
	|						ТОГДА ИСТИНА
	|					КОГДА МинимумРегистратор.ДатаРегистратора = ВзаиморасчетыОбороты.Период
	|						ТОГДА ВЫБОР
	|								КОГДА МинимумРегистратор.ДопПорядок = 0
	|										И ВзаиморасчетыОбороты.Регистратор ССЫЛКА Документ.энргНачисление
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ МинимумРегистратор.ДокРегистратор > ВзаиморасчетыОбороты.Регистратор
	|							КОНЕЦ
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|				И МинимумРегистратор.Район = ВзаиморасчетыОбороты.Район
	|				И МинимумРегистратор.МКД = ВзаиморасчетыОбороты.МКД
	|				И МинимумРегистратор.Абонент = ВзаиморасчетыОбороты.Абонент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МинимумРегистратор.ПериодНачисления,
	|		МинимумРегистратор.Район,
	|		МинимумРегистратор.МКД,
	|		МинимумРегистратор.Абонент,
	|		ВзаиморасчетыОбороты.Услуга,
	|		ВзаиморасчетыОбороты.Поставщик,
	|		ВзаиморасчетыОбороты.ПериодНачисления) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокПогашенияУслуг КАК ПорядокПогашенияУслуг
	|		ПО ВложенныйЗапрос.Услуга = ПорядокПогашенияУслуг.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособРаспределенияОплаты КАК СпособРаспределенияОплаты
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ПериодНачисления,
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.МКД,
	|	ВложенныйЗапрос.Абонент,
	|	ВложенныйЗапрос.Услуга,
	|	ВложенныйЗапрос.Поставщик,
	|	ВложенныйЗапрос.ПериодРасчета,
	|	ВЫБОР
	|		КОГДА &СначалаТекущиеНачисления
	|				И ВложенныйЗапрос.ПериодРасчета = &ПериодНачисления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпособРаспределенияОплаты.СпособРаспределения, ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОплаты.ПоУслугамСогласноНастройкамРаспределения)
	|			ТОГДА ЕСТЬNULL(ПорядокПогашенияУслуг.Порядок, 99999)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.ЗадолженностьНачалоПериода) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодНачисления,
	|	Район,
	|	МКД,
	|	Абонент,
	|	ПорядокПериодРасчета,
	|	ПериодРасчета,
	|	ПорядокПогашенияУслуги,
	|	Услуга";
	Возврат Текст;
КонецФункции

Функция НастройкиПорядкаПогашения()
	Запрос  		= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ
	|	энргПорядокПогашенияЗадолженности.Услуга,
	|	энргПорядокПогашенияЗадолженности.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.энргПорядокПогашенияЗадолженности КАК энргПорядокПогашенияЗадолженности
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Результат  = Запрос.Выполнить();
	Возврат Результат;	
КонецФункции

Функция ЗаписатьНаборыДокументовНачисления(Организация, ПериодНачисления,Район,Строение,ПроведенСНарушением,ПроведенВПоследовательности,МассивДокументовНачисления,Абонент)
	
	// Записываем наборы документов начисления сбрасываем состояние и фиксируем транзакцию.
	Попытка
		для Каждого стр из МассивДокументовНачисления цикл
			СтруктураДанных	= стр.Значение;
			НаборыЗаписей  	= СтруктураДанных.НаборыЗаписей;
			НаборТаблиц 	= СтруктураДанных.НаборТаблиц;
			для Каждого Набор из НаборыЗаписей цикл				
				Набор.Значение.загрузить(НаборТаблиц[Набор.ключ]);
				Набор.Значение.записать();
			КонецЦикла; 					   						
		КонецЦикла;
		
		НаборОтложенные 	= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
		НаборОтложенные.Отбор.Организация.Установить(Организация);
		НаборОтложенные.Отбор.ПериодНачисления.Установить(ПериодНачисления);
		НаборОтложенные.Отбор.Район.Установить(Район);				
		НаборОтложенные.Отбор.РазделЗаписи.Установить(Перечисления.энргРазделыЗаписи.Взаиморасчеты);
		НаборОтложенные.Отбор.ЧастныйСектор.Установить(НЕ ЗначениеЗаполнено(Строение));
		НаборОтложенные.Отбор.Строение.Установить(Строение);
		НаборОтложенные.Записать();		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));					
		Возврат Истина;  			
	КонецПопытки;
	
	// Если успешено записали пытаемся изменить состояние последовательности.
	Возврат ИзменитьСостояниеПоследовательности(Организация, ПериодНачисления,Район,ПроведенСНарушением,ПроведенВПоследовательности,Строение,Абонент);	
КонецФункции

Функция ИзменитьСостояниеПоследовательности(Организация, ПериодНачисления,Район,ПроведенСНарушением,ПроведенВПоследовательности,Строение,Абонент)
	Попытка
		НаборПоследовательности  					= РегистрыСведений.энргВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();
		НаборПоследовательности.Отбор.Организация.установить(Организация);
		НаборПоследовательности.Отбор.ПериодНачисления.установить(ПериодНачисления);
		НаборПоследовательности.Отбор.Район.установить(Район);
		НаборПоследовательности.Отбор.СостояниеПроведения.установить(ПроведенСНарушением);
		НаборПоследовательности.Отбор.МКД.установить(Строение);
		Если Абонент <> Неопределено тогда
			НаборПоследовательности.Отбор.Абонент.установить(Абонент);
		КонецЕсли;
		НаборПоследовательности.Прочитать();
		ТаблицаНабора  								= НаборПоследовательности.Выгрузить();
		НаборПоследовательности.Очистить();
		НаборПоследовательности.Записать();
		
		ТаблицаНабора.ЗаполнитьЗначения(ПроведенВПоследовательности,"СостояниеПроведения");
		
		НаборПоследовательности  					= РегистрыСведений.энргВзаиморасчетыПоследовательность.СоздатьНаборЗаписей();
		НаборПоследовательности.Загрузить(ТаблицаНабора);
		НаборПоследовательности.Записать(Ложь);
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции    	

Процедура ДобавитьРасходАванса(ПараметрыОперации, ДанныеДокумента, Сумма)
	
	ТаблицаАвансы 									= ДанныеДокумента.НаборТаблиц.энргАвансы;
	Авансы 											= ПараметрыОперации.Авансы;
	ОсталосьСписать 								= Сумма;
	
	Для Сч = 0 По Авансы.ВГраница() Цикл	
		Списываем 									= Мин(Авансы[Сч].СуммаАванса,ОсталосьСписать);
		ОсталосьСписать 							= ОсталосьСписать - Списываем;
		Авансы[Сч].СуммаАванса 						= Авансы[Сч].СуммаАванса - Списываем;
		
		ЗаписьАвансы  								= ТаблицаАвансы.добавить();
		ЗаписьАвансы.ВидДвижения 					= ВидДвиженияНакопления.Расход;
		ЗаписьАвансы.Активность  					= истина;
		ЗаписьАвансы.Период  						= ДанныеДокумента.Период;			
		ЗаписьАвансы.МКД	  						= ДанныеДокумента.МКД;
		ЗаписьАвансы.Абонент  						= ДанныеДокумента.Абонент;
		ЗаписьАвансы.Сумма 							= Списываем;
		ЗаписьАвансы.ПериодНачисления 				= ПараметрыОперации.ПериодНачисления;
		ЗаписьАвансы.Организация 					= ПараметрыОперации.Организация;
		ЗаписьАвансы.Район  						= ПараметрыОперации.Район;
		ЗаписьАвансы.ДокументОплаты 				= Авансы[Сч].ДокументОплаты;
		
		Если ОсталосьСписать = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = 0  По Сч-1 Цикл
		Авансы.Удалить(Индекс);
	КонецЦикла;
	
КонецПроцедуры

Функция НаборыПоТипам()
	
	Соотвествие  			= Новый Соответствие;	
	МассивРегистров  		= Новый Массив;
	МассивРегистров.Добавить("энргАвансы");
	МассивРегистров.Добавить("энргАвансыИспользованные");
	МассивРегистров.Добавить("энргАвансыПоступившие");
	МассивРегистров.Добавить("энргВзаиморасчетыПоМесяцам");
	МассивРегистров.Добавить("энргОплатаУслуг"); 	
	
	для Каждого Регистр из  МассивРегистров цикл
		Типы 					= Метаданные.РегистрыНакопления[Регистр].СтандартныеРеквизиты.Регистратор.Тип.типы();		
		Для Каждого ТипРегистратора из Типы цикл			
			Если Соотвествие.Получить(ТипРегистратора) = Неопределено тогда
				Массив 			= Новый Массив;
				Массив.Добавить(Регистр);
				Соотвествие.Вставить(ТипРегистратора,Массив);
			иначе
				Соотвествие[ТипРегистратора].добавить(Регистр);
			КонецЕсли;  			
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Соотвествие;
	
КонецФункции

Функция ОписаниеАванса()
	Возврат Новый Структура("ДокументОплаты, СуммаАванса");	
КонецФункции

#КонецОбласти

#Область ОтложенныеДвиженияДокументовНачисления

Процедура ОчиститьНаборыЗаписей(Организация, ПериодНачисления,Район,ЧастныйСектор,Строение,ДокРегистратор,ВводНачальныхОстатков)
	
	НаборСтабильныеПериоды					= РегистрыСведений.энргСтабильныеПериоды.СоздатьНаборЗаписей();
	НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
	НаборСтабильныеПериоды.Отбор.Организация.установить(Организация);
	НаборСтабильныеПериоды.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборСтабильныеПериоды.Отбор.Район.установить(Район);
	НаборСтабильныеПериоды.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
	Если НЕ ЧастныйСектор Тогда 
		НаборСтабильныеПериоды.Отбор.Строение.установить(Строение);
	КонецЕсли;
	НаборСтабильныеПериоды.записать();
	
	НаборСтабильныеПериоды					= РегистрыСведений.энргСтабильныеПериодыШкалы.СоздатьНаборЗаписей();
	НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
	НаборСтабильныеПериоды.Отбор.Организация.установить(Организация);
	НаборСтабильныеПериоды.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборСтабильныеПериоды.Отбор.Район.установить(Район);
	НаборСтабильныеПериоды.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
	Если НЕ ЧастныйСектор Тогда 
		НаборСтабильныеПериоды.Отбор.Строение.установить(Строение);
	КонецЕсли;
	НаборСтабильныеПериоды.записать();
	  	
	НаборСтабильныеПериоды					= РегистрыСведений.энргСтабильныеПериодыИзмерителиНаправлений.СоздатьНаборЗаписей();
	НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
	НаборСтабильныеПериоды.Отбор.Организация.установить(Организация);
	НаборСтабильныеПериоды.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборСтабильныеПериоды.Отбор.Район.установить(Район);
	НаборСтабильныеПериоды.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
	Если НЕ ЧастныйСектор Тогда 
		НаборСтабильныеПериоды.Отбор.Строение.установить(Строение);
	КонецЕсли;
	НаборСтабильныеПериоды.записать();
	
	НаборНомерСтрокСтабПериода 				= РегистрыСведений.энргНомераСтрокСтабильногоПериода.СоздатьНаборЗаписей();
	НаборНомерСтрокСтабПериода.Отбор.Организация.установить(Организация);
	НаборНомерСтрокСтабПериода.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборНомерСтрокСтабПериода.Отбор.Район.установить(Район);
	НаборНомерСтрокСтабПериода.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
	Если НЕ ЧастныйСектор Тогда 
		НаборНомерСтрокСтабПериода.Отбор.Строение.установить(Строение);
	КонецЕсли;
	НаборНомерСтрокСтабПериода.Записать();
	
	НаборМаксимальныеПоказания 				= РегистрыСведений.энргМаксимальныеПоказанияСрез.СоздатьНаборЗаписей();
	НаборМаксимальныеПоказания.Отбор.Организация.установить(Организация);
	НаборМаксимальныеПоказания.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборМаксимальныеПоказания.Отбор.Район.установить(Район);
	НаборМаксимальныеПоказания.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
	Если НЕ ЧастныйСектор Тогда 
		НаборМаксимальныеПоказания.Отбор.Строение.установить(Строение);
	КонецЕсли;
	НаборМаксимальныеПоказания.Записать();
	
	Если ВводНачальныхОстатков тогда
		НаборМаксимальныеПоказания 			= РегистрыСведений.энргМаксимальныеПоказанияСрез.СоздатьНаборЗаписей();
		НаборМаксимальныеПоказания.Отбор.Организация.установить(Организация);
		НаборМаксимальныеПоказания.Отбор.ПериодНачисления.установить(НачалоМесяца(ПериодНачисления-1));
		НаборМаксимальныеПоказания.Отбор.Район.установить(Район);
		НаборМаксимальныеПоказания.Отбор.ЧастныйСектор.установить(ЧастныйСектор);
		Если НЕ ЧастныйСектор Тогда 
			НаборМаксимальныеПоказания.Отбор.Строение.установить(Строение);
		КонецЕсли;
		НаборМаксимальныеПоказания.Записать(); 		
	КонецЕсли; 
	
	НаборОтложенныхДвижений  				= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
	НаборОтложенныхДвижений.Отбор.ДокРегистратор.установить(ДокРегистратор);
	НаборОтложенныхДвижений.Записать();
КонецПроцедуры

Функция РезультатНачальныеОстаткиСтабильногоПериода(Организация, ПериодНачисления,Район,Строение,ПериодРегистрации, Помещение  = Неопределено)
	
	Разделить = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";  
	
	Текст 	=
	"ВЫБРАТЬ
	|	ОтложенныеДвиженияДокументов.Организация КАК Организация,
	|	ОтложенныеДвиженияДокументов.ПериодНачисления КАК ПериодНачисления,
	|	ОтложенныеДвиженияДокументов.Район КАК Район,
	|	ОтложенныеДвиженияДокументов.ЧастныйСектор КАК ЧастныйСектор,
	|	ОтложенныеДвиженияДокументов.Строение КАК Строение,
	|	ОтложенныеДвиженияДокументов.ДокРегистратор КАК ДокРегистратор,
	|	ОтложенныеДвиженияДокументов.ДатаРегистратора КАК ДатаРегистратора
	|ПОМЕСТИТЬ ДокументыДляПроведения
	|ИЗ
	|	РегистрСведений.энргОтложенныеДвиженияДокументов КАК ОтложенныеДвиженияДокументов
	|ГДЕ
	|	ОтложенныеДвиженияДокументов.Организация = &Организация
	|	И ОтложенныеДвиженияДокументов.ПериодНачисления = &Периодначисления
	|	И ОтложенныеДвиженияДокументов.Район = &Район
	|	И ОтложенныеДвиженияДокументов.РазделЗаписи = ЗНАЧЕНИЕ(Перечисление.энргРазделыЗаписи.СтабильныеПериоды)
	|	И ОтложенныеДвиженияДокументов.ЧастныйСектор = &ЧастныйСектор
	|	И ОтложенныеДвиженияДокументов.Строение = &Строение";
	
	Текст 	= Текст + Разделить;
	
	Текст 	= Текст + СтабильныеПериодыВводНачальныхОстатков(Строение, Неопределено);
	
	Текст 	= Текст + Разделить;	
	
	Текст 	= Текст + СтабильныеПериодыДокументыНачисления(Строение, Неопределено);
	
	Если Строение = Неопределено тогда
		Текст						= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.ЧастныйСектор = &ЧастныйСектор","");
		Текст						= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.ЧастныйСектор = &ЧастныйСектор","");
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериоды.ЧастныйСектор = &ЧастныйСектор)","");
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериодыШкалы.ЧастныйСектор = &ЧастныйСектор)","");
		Текст						= СтрЗаменить(Текст,"И (энргСтабильныеПериодыИзмерителиНаправлений.ЧастныйСектор = &ЧастныйСектор)","");
		
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериоды.Строение = &Строение)","");
		Текст 						= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.Строение = &Строение","");
		Текст 						= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.Строение = &Строение","");
		Текст 						= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.Строение = &Строение","");
		Текст 						= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Строение = &Строение)","");
		Текст						= СтрЗаменить(Текст,"И (энргСтабильныеПериодыИзмерителиНаправлений.Строение = &Строение)","");
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериодыШкалы.Строение = &Строение)","");
		
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериоды.Помещение = &Помещение)",""); 		
		Текст 						= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Помещение = &Помещение)","");
		Текст						= СтрЗаменить(Текст,"И (энргСтабильныеПериодыИзмерителиНаправлений.Помещение = &Помещение)","");		
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериодыШкалы.Помещение = &Помещение)","");
	ИначеЕсли НЕ ЗначениеЗаполнено(Строение) Тогда
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериоды.Строение = &Строение)","");
		Текст 						= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.Строение = &Строение","");
		Текст 						= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.Строение = &Строение","");
		Текст 						= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.Строение = &Строение","");
		Текст 						= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Строение = &Строение)","");
		Текст 						= СтрЗаменить(Текст,"И (энргСтабильныеПериодыИзмерителиНаправлений.Строение = &Строение)","");
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериодыШкалы.Строение = &Строение)","");
		
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериоды.Помещение = &Помещение)",""); 		
		Текст 						= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Помещение = &Помещение)","");
		Текст 						= СтрЗаменить(Текст,"И (энргСтабильныеПериодыИзмерителиНаправлений.Помещение = &Помещение)","");		
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериодыШкалы.Помещение = &Помещение)","");
	ИначеЕсли Помещение = Неопределено Тогда 				
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериоды.Помещение = &Помещение)",""); 		
		Текст 						= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.Помещение = &Помещение","");
		Текст 						= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Помещение = &Помещение)","");		
		Текст						= СтрЗаменить(Текст,"И (СтабильныеПериодыШкалы.Помещение = &Помещение)","");
		Текст 						= СтрЗаменить(Текст,"И (энргСтабильныеПериодыИзмерителиНаправлений.Помещение = &Помещение)","");
	КонецЕсли;
	
	МВТ 							= Новый МенеджерВременныхТаблиц;
	Запрос  						= Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Запрос.УстановитьПараметр("ПериодРегистрации",		ПериодРегистрации);
	Запрос.УстановитьПараметр("ПредыдущийПериод",		НачалоМесяца(ПериодНачисления-1));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Периодначисления",		ПериодНачисления);
	Запрос.УстановитьПараметр("Район",					Район);
	Запрос.УстановитьПараметр("Период",					КонецМесяца(ПериодНачисления));
	Запрос.УстановитьПараметр("МоментВремени",			ПериодНачисления);
	
	Если НЕ Строение = Неопределено Тогда
		Запрос.УстановитьПараметр("ЧастныйСектор",		НЕ ЗначениеЗаполнено(Строение));
		Если ЗначениеЗаполнено(Строение) Тогда
			Запрос.УстановитьПараметр("Строение",		Строение);
		КонецЕсли;
		Если Не Помещение = Неопределено Тогда
			Запрос.УстановитьПараметр("Помещение",		Помещение);
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипНачисления",			Перечисления.энргТипыНачислений.ИндивидуальныеНачисления);
	Запрос.Выполнить();
	
	Текст 							=  
	"ВЫБРАТЬ
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериоды","СтабильныеПериодыДокументыНачислений","НомерПозиции,МенялосьСостояниеПУ,МенялосьСостояниеФормулы",Истина,Ложь) + "
	|	0 КАК НомерПозиции,
	|	ЛОЖЬ КАК МенялосьСостояниеПУ,
	|	ЛОЖЬ КАК МенялосьСостояниеФормулы,
	|	ЛОЖЬ КАК ЭтоВводНачальныхОстатков
	|ИЗ
	|	СтабильныеПериодыДокументыНачислений КАК СтабильныеПериодыДокументыНачислений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериоды","СтабильныеПериодыВводНачальныхОстатков","НомерПозиции,МенялосьСостояниеПУ,МенялосьСостояниеФормулы",Истина,Ложь) + "
	|	0 КАК НомерПозиции,
	|	ЛОЖЬ КАК МенялосьСостояниеПУ,
	|	ЛОЖЬ КАК МенялосьСостояниеФормулы,
	|	ИСТИНА КАК ЭтоВводНачальныхОстатков
	|ИЗ
	|	СтабильныеПериодыВводНачальныхОстатков КАК СтабильныеПериодыВводНачальныхОстатков
	|
	|УПОРЯДОЧИТЬ ПО	
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	ЧастныйСектор,
	|	Строение,
	|	ДокРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтабильныеПериодыДокументыНачислений.Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	СтабильныеПериодыДокументыНачислений.Район КАК Район,
	|	СтабильныеПериодыДокументыНачислений.ЧастныйСектор КАК ЧастныйСектор,
	|	СтабильныеПериодыДокументыНачислений.Строение КАК Строение,
	|	СтабильныеПериодыДокументыНачислений.Помещение КАК Помещение,
	|	энргМаксимальныеПоказанияСрез.ПриборУчета КАК ПриборУчета,
	|	энргМаксимальныеПоказанияСрез.Шкала КАК Шкала,
	|	энргМаксимальныеПоказанияСрез.ТарифнаяЗона КАК ТарифнаяЗона,
	|	энргМаксимальныеПоказанияСрез.Показания КАК Показания,
	|	энргМаксимальныеПоказанияСрез.ДокРегистратор КАК ДокРегистратор,
	|	энргМаксимальныеПоказанияСрез.ДатаРегистратора КАК ДатаРегистратора,
	|	ЛОЖЬ КАК ЭтоВводНачальныхОстатков
	|ИЗ
	|	СтабильныеПериодыДокументыНачислений КАК СтабильныеПериодыДокументыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказанияСрез КАК энргМаксимальныеПоказанияСрез
	|		ПО СтабильныеПериодыДокументыНачислений.Организация = энргМаксимальныеПоказанияСрез.Организация
	|			И (СтабильныеПериодыДокументыНачислений.ПериодНачисления = ДОБАВИТЬКДАТЕ(энргМаксимальныеПоказанияСрез.ПериодНачисления, МЕСЯЦ, 1))
	|			И СтабильныеПериодыДокументыНачислений.Район = энргМаксимальныеПоказанияСрез.Район
	|			И СтабильныеПериодыДокументыНачислений.ЧастныйСектор = энргМаксимальныеПоказанияСрез.ЧастныйСектор
	|			И СтабильныеПериодыДокументыНачислений.Строение = энргМаксимальныеПоказанияСрез.Строение
	|			И СтабильныеПериодыДокументыНачислений.Помещение = энргМаксимальныеПоказанияСрез.Помещение
	|			И СтабильныеПериодыДокументыНачислений.ПриборУчета = энргМаксимальныеПоказанияСрез.ПриборУчета
	|			И (СтабильныеПериодыДокументыНачислений.ПриборВведен)
	|			И (энргМаксимальныеПоказанияСрез.Организация = &Организация)
	|			И (энргМаксимальныеПоказанияСрез.ПериодНачисления = &ПредыдущийПериод)
	|			И (энргМаксимальныеПоказанияСрез.Район = &Район)
	|			И (энргМаксимальныеПоказанияСрез.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргМаксимальныеПоказанияСрез.Строение = &Строение)
	|			И (энргМаксимальныеПоказанияСрез.Помещение = &Помещение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.ПериодНачисления,
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.ЧастныйСектор,
	|	ВложенныйЗапрос.Строение,
	|	ВложенныйЗапрос.Помещение,
	|	ВложенныйЗапрос.ПриборУчета,
	|	ВложенныйЗапрос.Шкала,
	|	энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона,
	|	энргВводНачальныхОстатковПоказанияПриборовУчета.ТекущиеПоказания,
	|	ВложенныйЗапрос.ДокРегистратор,
	|	ВложенныйЗапрос.ДатаРегистратора,
	|	ИСТИНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтабильныеПериодыВводНачальныхОстатков.Организация КАК Организация,
	|		СтабильныеПериодыВводНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	|		СтабильныеПериодыВводНачальныхОстатков.Район КАК Район,
	|		СтабильныеПериодыВводНачальныхОстатков.ЧастныйСектор КАК ЧастныйСектор,
	|		СтабильныеПериодыВводНачальныхОстатков.Строение КАК Строение,
	|		СтабильныеПериодыВводНачальныхОстатков.Помещение КАК Помещение,
	|		СтабильныеПериодыВводНачальныхОстатков.ПриборУчета КАК ПриборУчета,
	|		энргВводНачальныхОстатковШкалыПриборовУчета.Шкала КАК Шкала,
	|		СтабильныеПериодыВводНачальныхОстатков.ДокРегистратор КАК ДокРегистратор,
	|		СтабильныеПериодыВводНачальныхОстатков.ДатаРегистратора КАК ДатаРегистратора,
	|		энргВводНачальныхОстатковШкалыПриборовУчета.IDСтроки КАК IDСтроки
	|	ИЗ
	|		СтабильныеПериодыВводНачальныхОстатков КАК СтабильныеПериодыВводНачальныхОстатков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ШкалыПриборовУчета КАК энргВводНачальныхОстатковШкалыПриборовУчета
	|			ПО СтабильныеПериодыВводНачальныхОстатков.ДокРегистратор = энргВводНачальныхОстатковШкалыПриборовУчета.Ссылка
	|				И СтабильныеПериодыВводНачальныхОстатков.IDСтрокиТочкиУчета = энргВводНачальныхОстатковШкалыПриборовУчета.IDСтрокиТочкиУчета
	|				И (СтабильныеПериодыВводНачальныхОстатков.ПриборВведен)) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоказанияПриборовУчета КАК энргВводНачальныхОстатковПоказанияПриборовУчета
	|		ПО ВложенныйЗапрос.ДокРегистратор = энргВводНачальныхОстатковПоказанияПриборовУчета.Ссылка
	|			И ВложенныйЗапрос.IDСтроки = энргВводНачальныхОстатковПоказанияПриборовУчета.IDСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	ЧастныйСектор,
	|	Строение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтабильныеПериодыДокументыНачислений.Организация КАК Организация,
	|	СтабильныеПериодыДокументыНачислений.ПериодНачисления КАК ПериодНачисления,
	|	СтабильныеПериодыДокументыНачислений.ДатаРегистратора КАК ДатаРегистратора,
	|	СтабильныеПериодыДокументыНачислений.ДокРегистратор КАК ДокРегистратор,
	|	0 КАК НомерПозиции,
	|	ПараметрыШкалСтаблиногоПериода.Район КАК Район,
	|	ПараметрыШкалСтаблиногоПериода.ЧастныйСектор КАК ЧастныйСектор,
	|	ПараметрыШкалСтаблиногоПериода.Строение КАК Строение,
	|	ПараметрыШкалСтаблиногоПериода.Помещение КАК Помещение,
	|	ПараметрыШкалСтаблиногоПериода.ТочкаУчета КАК ТочкаУчета,
	|	ПараметрыШкалСтаблиногоПериода.Шкала КАК Шкала,
	|	ПараметрыШкалСтаблиногоПериода.ВидДифференцированности КАК ВидДифференцированности
	|ИЗ
	|	СтабильныеПериодыДокументыНачислений КАК СтабильныеПериодыДокументыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыШкалСтаблиногоПериода КАК ПараметрыШкалСтаблиногоПериода
	|		ПО СтабильныеПериодыДокументыНачислений.Организация = ПараметрыШкалСтаблиногоПериода.Организация
	|			И СтабильныеПериодыДокументыНачислений.ПериодНачисления = ПараметрыШкалСтаблиногоПериода.ПериодНачисления
	|			И СтабильныеПериодыДокументыНачислений.Район = ПараметрыШкалСтаблиногоПериода.Район
	|			И СтабильныеПериодыДокументыНачислений.ЧастныйСектор = ПараметрыШкалСтаблиногоПериода.ЧастныйСектор
	|			И СтабильныеПериодыДокументыНачислений.Строение = ПараметрыШкалСтаблиногоПериода.Строение
	|			И СтабильныеПериодыДокументыНачислений.Помещение = ПараметрыШкалСтаблиногоПериода.Помещение
	|			И СтабильныеПериодыДокументыНачислений.ТочкаУчета = ПараметрыШкалСтаблиногоПериода.ТочкаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтабильныеПериодыВводНачальныхОстатков.Организация,
	|	СтабильныеПериодыВводНачальныхОстатков.ПериодНачисления,
	|	СтабильныеПериодыВводНачальныхОстатков.ДатаРегистратора,
	|	СтабильныеПериодыВводНачальныхОстатков.ДокРегистратор,
	|	0,
	|	СтабильныеПериодыВводНачальныхОстатков.Район,
	|	СтабильныеПериодыВводНачальныхОстатков.ЧастныйСектор,
	|	СтабильныеПериодыВводНачальныхОстатков.Строение,
	|	СтабильныеПериодыВводНачальныхОстатков.Помещение,
	|	СтабильныеПериодыВводНачальныхОстатков.ТочкаУчета,
	|	энргВводНачальныхОстатковШкалыПриборовУчета.Шкала,
	|	энргВводНачальныхОстатковШкалыПриборовУчета.ВидДифференцированности
	|ИЗ
	|	СтабильныеПериодыВводНачальныхОстатков КАК СтабильныеПериодыВводНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ШкалыПриборовУчета КАК энргВводНачальныхОстатковШкалыПриборовУчета
	|		ПО СтабильныеПериодыВводНачальныхОстатков.ДокРегистратор = энргВводНачальныхОстатковШкалыПриборовУчета.Ссылка
	|			И СтабильныеПериодыВводНачальныхОстатков.IDСтрокиТочкиУчета = энргВводНачальныхОстатковШкалыПриборовУчета.IDСтрокиТочкиУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	ЧастныйСектор,
	|	Строение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыИзмерителиНаправлений","ПараметрыИзмерителиСтаблиногоПериода","НомерПозиции,ДатаРегистратора,ДокРегистратор",Истина,Ложь) + "
	|	0 КАК НомерПозиции,
	|	СтабильныеПериодыДокументыНачислений.ДатаРегистратора КАК ДатаРегистратора,
	|	СтабильныеПериодыДокументыНачислений.ДокРегистратор КАК ДокРегистратор	
	|ИЗ
	|	СтабильныеПериодыДокументыНачислений КАК СтабильныеПериодыДокументыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыИзмерителиСтаблиногоПериода КАК ПараметрыИзмерителиСтаблиногоПериода
	|		ПО СтабильныеПериодыДокументыНачислений.Организация = ПараметрыИзмерителиСтаблиногоПериода.Организация
	|			И СтабильныеПериодыДокументыНачислений.ПериодНачисления = ПараметрыИзмерителиСтаблиногоПериода.ПериодНачисления
	|			И СтабильныеПериодыДокументыНачислений.Район = ПараметрыИзмерителиСтаблиногоПериода.Район
	|			И СтабильныеПериодыДокументыНачислений.ЧастныйСектор = ПараметрыИзмерителиСтаблиногоПериода.ЧастныйСектор
	|			И СтабильныеПериодыДокументыНачислений.Строение = ПараметрыИзмерителиСтаблиногоПериода.Строение
	|			И СтабильныеПериодыДокументыНачислений.Помещение = ПараметрыИзмерителиСтаблиногоПериода.Помещение
	|			И СтабильныеПериодыДокументыНачислений.ТочкаУчета = ПараметрыИзмерителиСтаблиногоПериода.ТочкаУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район,
	|	ЧастныйСектор,
	|	Строение";  	                            	
	
	Если Строение = Неопределено тогда		
		Текст				= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.ЧастныйСектор = &ЧастныйСектор)","");
		Текст				= СтрЗаменить(Текст,"И (СтабильныеПериоды.Строение = &Строение)","");
		Текст 				= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.Строение = &Строение","");
		Текст 				= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.Строение = &Строение","");
		Текст 				= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.Строение = &Строение","");
		Текст 				= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Строение = &Строение)","");
		Текст				= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Помещение = &Помещение)","");
	ИначеЕсли НЕ ЗначениеЗаполнено(Строение) Тогда 
		Текст				= СтрЗаменить(Текст,"И (СтабильныеПериоды.Строение = &Строение)","");
		Текст 				= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.Строение = &Строение","");
		Текст 				= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.Строение = &Строение","");
		Текст 				= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.Строение = &Строение","");
		Текст 				= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Строение = &Строение)","");
		Текст				= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Помещение = &Помещение)","");
	ИначеЕсли Помещение = Неопределено Тогда
		Текст				= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.Помещение = &Помещение)","");
	КонецЕсли;
	 	
	Запрос.Текст 			= Текст;
		
	Возврат Запрос.ВыполнитьПакет(); 		
КонецФункции

Функция СтабильныеПериодыВводНачальныхОстатков(Строение, Помещение)
	Текст 	=  
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|	ВложенныйЗапрос.Строение КАК Строение,
	|	ВложенныйЗапрос.Помещение КАК Помещение,
	|	ВложенныйЗапрос.Абонент КАК Абонент,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	|	ВложенныйЗапрос.НомерПозиции КАК НомерПозиции,
	|	ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
	|	ВложенныйЗапрос.ДатаРегистратора КАК ДатаРегистратора,
	|	ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|	ВложенныйЗапрос.ЛСОткрыт КАК ЛСОткрыт,
	|	ВложенныйЗапрос.УслугаПодключена КАК УслугаПодключена,
	|	ВложенныйЗапрос.ПриборВведен КАК ПриборВведен,
	|	ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|	ВложенныйЗапрос.КоличествоПрописанных КАК КоличествоПрописанных,
	|	ВложенныйЗапрос.КоличествоСобственников КАК КоличествоСобственников,
	|	ВложенныйЗапрос.КоличествоПроживающих КАК КоличествоПроживающих,
	|	0 КАК КоличествоЖильцов,
	|	ВложенныйЗапрос.КоличествоКомнат КАК КоличествоКомнат,
	|	ЕСТЬNULL(энргВводНачальныхОстатковЗначениеПлощадей.ЗначениеПлощади, 0) КАК ЗначениеПлощади,
	|	ВложенныйЗапрос.КоэффициентПУ КАК КоэффициентПУ,
	|	ВложенныйЗапрос.РасчетПоФормуле КАК РасчетПоФормуле,
	|	ВложенныйЗапрос.ВидБлагоустройства КАК ВидБлагоустройства,
	|	ВложенныйЗапрос.ТарифнаяГруппа КАК ТарифнаяГруппа,
	|	ВложенныйЗапрос.ДатаПоверки КАК ДатаПоверки,
	|	ВложенныйЗапрос.ОтключатьВНеполивнойСезон КАК ОтключатьВНеполивнойСезон,
	|	ВложенныйЗапрос.Поставщик КАК Поставщик,
	|	ВложенныйЗапрос.ДатаСостоянияПрибора КАК ДатаСостоянияПрибора,
	|	ВложенныйЗапрос.НетВозможностьУстановкиПУ КАК НетВозможностьУстановкиПУ,
	|	ВложенныйЗапрос.IDСтрокиТочкиУчета КАК IDСтрокиТочкиУчета,
	|	ВложенныйЗапрос.ВидСобственности КАК ВидСобственности,
	|	ЗНАЧЕНИЕ(Справочник.энргТочкиУчета.ПустаяСсылка) КАК ЗависимаяТочкаУчета,
	|	0 КАК КоэффициентФормула,
	|	ЗНАЧЕНИЕ(Справочник.энргШкалыПриборовУчета.ПустаяСсылка) КАК Шкала,
	|	ЗНАЧЕНИЕ(Перечисление.энргТипыСхемТеплоснабжения.ПустаяСсылка) КАК ТипСхемы,
	|	ЗНАЧЕНИЕ(Перечисление.энргВидыТепловыхПунктов.ПустаяСсылка) КАК ВидТепловогоПункта,
	|	ЗНАЧЕНИЕ(Перечисление.энргСпособыРаспределенияОбъема.ПустаяСсылка) КАК СпособРаспределенияОбъемаПомещения,
	|	0 КАК ФиксированныйОбъемПотребления,
	|	0 КАК ДоляПотребленияЧислитель,
	|	0 КАК ДоляПотребленияЗнаменатель,
	|	0 КАК КоэффициентРаспределенияОстатка,
	|	ВложенныйЗапрос.СоставнаяУслуга КАК СоставнаяУслуга,
	|	0 КАК ГодПостройки,
	|	0 КАК КоличествоЭтажей,
	|	ВложенныйЗапрос.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|	ЛОЖЬ КАК БлокировочныйАкт,
	|	ВложенныйЗапрос.ИспользоватьДиаметрСечения КАК ИспользоватьДиаметрСечения,
	|	ВложенныйЗапрос.ДиаметрСечения КАК ДиаметрСечения,
	|	ВложенныйЗапрос.Техническая КАК Техническая,
	|	ЗНАЧЕНИЕ(Справочник.энргТочкиУчета.ПустаяСсылка) КАК ТочкаУчетаРодитель
	|ПОМЕСТИТЬ ВсеПараметрыРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Организация КАК Организация,
	|		ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|		ВложенныйЗапрос.Район КАК Район,
	|		ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|		ВложенныйЗапрос.Строение КАК Строение,
	|		ВложенныйЗапрос.Помещение КАК Помещение,
	|		ВложенныйЗапрос.Абонент КАК Абонент,
	|		ВложенныйЗапрос.Услуга КАК Услуга,
	|		ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	|		ВложенныйЗапрос.НомерПозиции КАК НомерПозиции,
	|		ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
	|		ВложенныйЗапрос.ДатаРегистратора КАК ДатаРегистратора,
	|		ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|		ВложенныйЗапрос.ЛСОткрыт КАК ЛСОткрыт,
	|		ВложенныйЗапрос.УслугаПодключена КАК УслугаПодключена,
	|		ВложенныйЗапрос.ПриборВведен КАК ПриборВведен,
	|		ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|		ВложенныйЗапрос.КоличествоПрописанных КАК КоличествоПрописанных,
	|		ВложенныйЗапрос.КоличествоСобственников КАК КоличествоСобственников,
	|		ВложенныйЗапрос.КоличествоПроживающих КАК КоличествоПроживающих,
	|		ВложенныйЗапрос.КоличествоКомнат КАК КоличествоКомнат,
	|		ВложенныйЗапрос.РасчетПоФормуле КАК РасчетПоФормуле,
	|		ВложенныйЗапрос.ВидБлагоустройства КАК ВидБлагоустройства,
	|		ВложенныйЗапрос.ТарифнаяГруппа КАК ТарифнаяГруппа,
	|		ВложенныйЗапрос.ДатаПоверки КАК ДатаПоверки,
	|		ВложенныйЗапрос.ОтключатьВНеполивнойСезон КАК ОтключатьВНеполивнойСезон,
	|		ВложенныйЗапрос.Поставщик КАК Поставщик,
	|		ВложенныйЗапрос.ДатаСостоянияПрибора КАК ДатаСостоянияПрибора,
	|		ВложенныйЗапрос.НетВозможностьУстановкиПУ КАК НетВозможностьУстановкиПУ,
	|		энргВидыУслуг.ВидПлощади КАК ВидПлощади,
	|		ВложенныйЗапрос.IDСтрокиАбонента КАК IDСтрокиАбонента,
	|		ВложенныйЗапрос.КоэффициентПУ КАК КоэффициентПУ,
	|		ВложенныйЗапрос.IDСтрокиТочкиУчета КАК IDСтрокиТочкиУчета,
	|		ВложенныйЗапрос.ВидСобственности КАК ВидСобственности,
	|		ВложенныйЗапрос.СоставнаяУслуга КАК СоставнаяУслуга,
	|		ВложенныйЗапрос.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|		ВложенныйЗапрос.ИспользоватьДиаметрСечения КАК ИспользоватьДиаметрСечения,
	|		ВложенныйЗапрос.ДиаметрСечения КАК ДиаметрСечения,
	|		ВложенныйЗапрос.Техническая КАК Техническая
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВложенныйЗапрос.Организация КАК Организация,
	|			ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|			ВложенныйЗапрос.Район КАК Район,
	|			ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|			ВложенныйЗапрос.Строение КАК Строение,
	|			ВложенныйЗапрос.Помещение КАК Помещение,
	|			ВложенныйЗапрос.Абонент КАК Абонент,
	|			ВложенныйЗапрос.Услуга КАК Услуга,
	|			ВложенныйЗапрос.СоставнаяУслуга КАК СоставнаяУслуга,
	|			ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	|			ВложенныйЗапрос.НомерПозиции КАК НомерПозиции,
	|			ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
	|			ВложенныйЗапрос.ДатаРегистратора КАК ДатаРегистратора,
	|			ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|			ВложенныйЗапрос.ЛСОткрыт КАК ЛСОткрыт,
	|			ВложенныйЗапрос.УслугаПодключена КАК УслугаПодключена,
	|			ВложенныйЗапрос.ПриборВведен КАК ПриборВведен,
	|			ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|			ВложенныйЗапрос.КоличествоПрописанных КАК КоличествоПрописанных,
	|			ВложенныйЗапрос.КоличествоСобственников КАК КоличествоСобственников,
	|			ВложенныйЗапрос.КоличествоПроживающих КАК КоличествоПроживающих,
	|			ВложенныйЗапрос.КоличествоКомнат КАК КоличествоКомнат,
	|			ВложенныйЗапрос.РасчетПоФормуле КАК РасчетПоФормуле,
	|			ЕСТЬNULL(энргВводНачальныхОстатковВидыБлагоустройстваТарифныеКатегории.ВидБлагоустройства, ЗНАЧЕНИЕ(Справочник.энргВидыБлагоустройств.ПустаяСсылка)) КАК ВидБлагоустройства,
	|			ЕСТЬNULL(энргВводНачальныхОстатковВидыБлагоустройстваТарифныеКатегории.ТарифнаяКатегория, ЗНАЧЕНИЕ(Справочник.энргГруппыПотребителей.ПустаяСсылка)) КАК ТарифнаяГруппа,
	|			ВложенныйЗапрос.ДатаПоверки КАК ДатаПоверки,
	|			ВложенныйЗапрос.ОтключатьВНеполивнойСезон КАК ОтключатьВНеполивнойСезон,
	|			ВложенныйЗапрос.Поставщик КАК Поставщик,
	|			ВложенныйЗапрос.ДатаСостоянияПрибора КАК ДатаСостоянияПрибора,
	|			ВложенныйЗапрос.НетВозможностьУстановкиПУ КАК НетВозможностьУстановкиПУ,
	|			ВложенныйЗапрос.IDСтрокиАбонента КАК IDСтрокиАбонента,
	|			ВложенныйЗапрос.КоэффициентПУ КАК КоэффициентПУ,
	|			ВложенныйЗапрос.IDСтрокиТочкиУчета КАК IDСтрокиТочкиУчета,
	|			ВложенныйЗапрос.ВидСобственности КАК ВидСобственности,
	|			ВложенныйЗапрос.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|			ВложенныйЗапрос.ИспользоватьДиаметрСечения КАК ИспользоватьДиаметрСечения,
	|			ВложенныйЗапрос.ДиаметрСечения КАК ДиаметрСечения,
	|			ВложенныйЗапрос.Техническая КАК Техническая
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВложенныйЗапрос.Организация КАК Организация,
	|				ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|				ВложенныйЗапрос.Район КАК Район,
	|				ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|				ВложенныйЗапрос.Строение КАК Строение,
	|				ВложенныйЗапрос.Помещение КАК Помещение,
	|				ВложенныйЗапрос.Абонент КАК Абонент,
	|				ВЫБОР
	|					КОГДА энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка ЕСТЬ NULL
	|						ТОГДА ВложенныйЗапрос.Услуга
	|					ИНАЧЕ энргВводНачальныхОстатковПоставщикиСоставныхУслуг.ЧастьСоставнойУслуги
	|				КОНЕЦ КАК Услуга,
	|				ВЫБОР
	|					КОГДА НЕ энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка ЕСТЬ NULL
	|						ТОГДА ВложенныйЗапрос.Услуга
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.энргВидыУслуг.ПустаяСсылка)
	|				КОНЕЦ КАК СоставнаяУслуга,
	|				ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	|				ВложенныйЗапрос.НомерПозиции КАК НомерПозиции,
	|				ВложенныйЗапрос.ПериодРегистрации КАК ПериодРегистрации,
	|				ВложенныйЗапрос.ДатаРегистратора КАК ДатаРегистратора,
	|				ВложенныйЗапрос.ДокРегистратор КАК ДокРегистратор,
	|				ВложенныйЗапрос.ЛСОткрыт КАК ЛСОткрыт,
	|				ВложенныйЗапрос.УслугаПодключена КАК УслугаПодключена,
	|				ВложенныйЗапрос.ПриборВведен КАК ПриборВведен,
	|				ВложенныйЗапрос.ПриборУчета КАК ПриборУчета,
	|				ВложенныйЗапрос.КоличествоПрописанных КАК КоличествоПрописанных,
	|				ВложенныйЗапрос.КоличествоСобственников КАК КоличествоСобственников,
	|				ВложенныйЗапрос.КоличествоПроживающих КАК КоличествоПроживающих,
	|				ВложенныйЗапрос.КоличествоКомнат КАК КоличествоКомнат,
	|				ВложенныйЗапрос.РасчетПоФормуле КАК РасчетПоФормуле,
	|				ВложенныйЗапрос.ДатаПоверки КАК ДатаПоверки,
	|				ВложенныйЗапрос.ОтключатьВНеполивнойСезон КАК ОтключатьВНеполивнойСезон,
	|				ВЫБОР
	|					КОГДА энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка ЕСТЬ NULL
	|						ТОГДА ВложенныйЗапрос.Поставщик
	|					ИНАЧЕ энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Поставщик
	|				КОНЕЦ КАК Поставщик,
	|				ВложенныйЗапрос.ДатаСостоянияПрибора КАК ДатаСостоянияПрибора,
	|				ВложенныйЗапрос.НетВозможностьУстановкиПУ КАК НетВозможностьУстановкиПУ,
	|				ВложенныйЗапрос.IDСтрокиАбонента КАК IDСтрокиАбонента,
	|				ВложенныйЗапрос.КоэффициентПУ КАК КоэффициентПУ,
	|				ВложенныйЗапрос.IDСтрокиТочкиУчета КАК IDСтрокиТочкиУчета,
	|				ВложенныйЗапрос.ВидСобственности КАК ВидСобственности,
	|				ВложенныйЗапрос.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|				ВложенныйЗапрос.ИспользоватьДиаметрСечения КАК ИспользоватьДиаметрСечения,
	|				ВложенныйЗапрос.ДиаметрСечения КАК ДиаметрСечения,
	|				ВложенныйЗапрос.Техническая КАК Техническая
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ВложенныйЗапрос.Организация КАК Организация,
	|					ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|					ВложенныйЗапрос.Район КАК Район,
	|					энргКлючиПомещений.ЧастныйСектор КАК ЧастныйСектор,
	|					энргКлючиПомещений.Строение КАК Строение,
	|					энргКлючиПомещений.Помещение КАК Помещение,
	|					ВложенныйЗапрос.Абонент КАК Абонент,
	|					энргВводНачальныхОстатковТочкиУчета.Услуга КАК Услуга,
	|					энргВводНачальныхОстатковТочкиУчета.ТочкаУчета КАК ТочкаУчета,
	|					0 КАК НомерПозиции,
	|					&ПериодРегистрации КАК ПериодРегистрации,
	|					ВложенныйЗапрос.Дата КАК ДатаРегистратора,
	|					ВложенныйЗапрос.Регистратор КАК ДокРегистратор,
	|					ВложенныйЗапрос.ЛСОткрыт КАК ЛСОткрыт,
	|					ИСТИНА КАК УслугаПодключена,
	|					НЕ энргВводНачальныхОстатковТочкиУчета.ПриборУчета = ЗНАЧЕНИЕ(Справочник.энргПриборыУчетаАбонента.ПустаяСсылка) КАК ПриборВведен,
	|					энргВводНачальныхОстатковТочкиУчета.ПриборУчета КАК ПриборУчета,
	|					ВложенныйЗапрос.КоличествоПрописанных КАК КоличествоПрописанных,
	|					ВложенныйЗапрос.КоличествоСобственников КАК КоличествоСобственников,
	|					ВложенныйЗапрос.КоличествоПроживающих КАК КоличествоПроживающих,
	|					ВложенныйЗапрос.КоличествоКомнат КАК КоличествоКомнат,
	|					ЛОЖЬ КАК РасчетПоФормуле,
	|					энргВводНачальныхОстатковТочкиУчета.ДатаПоверки КАК ДатаПоверки,
	|					энргВводНачальныхОстатковТочкиУчета.ОтключатьВНеполивнойСезон КАК ОтключатьВНеполивнойСезон,
	|					энргВводНачальныхОстатковТочкиУчета.Поставщик КАК Поставщик,
	|					энргВводНачальныхОстатковТочкиУчета.ДатаВводПрибораУчета КАК ДатаСостоянияПрибора,
	|					энргВводНачальныхОстатковТочкиУчета.НетВозможностьУстановкиПУ КАК НетВозможностьУстановкиПУ,
	|					энргВводНачальныхОстатковТочкиУчета.IDСтроки КАК IDСтрокиТочкиУчета,
	|					энргВводНачальныхОстатковТочкиУчета.ЭтоСоставнаяУслуга КАК ЭтоСоставнаяУслуга,
	|					ВложенныйЗапрос.IDСтрокиАбонента КАК IDСтрокиАбонента,
	|					энргВводНачальныхОстатковТочкиУчета.КоэффициентПУ КАК КоэффициентПУ,
	|					ВложенныйЗапрос.ВидСобственности КАК ВидСобственности,
	|					энргВводНачальныхОстатковТочкиУчета.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|					ЕСТЬNULL(энргДиаметрСеченияТочекУчетаСрезПоследних.Использовать, ЛОЖЬ) КАК ИспользоватьДиаметрСечения,
	|					ЕСТЬNULL(энргДиаметрСеченияТочекУчетаСрезПоследних.ДиаметрСечения, 0) КАК ДиаметрСечения,
	|					энргВводНачальныхОстатковТочкиУчета.Техническая КАК Техническая
	|				ИЗ
	|					(ВЫБРАТЬ
	|						энргВводНачальныхОстатков.Ссылка КАК Регистратор,
	|						энргВводНачальныхОстатков.Дата КАК Дата,
	|						энргВводНачальныхОстатков.Район КАК Район,
	|						энргВводНачальныхОстатковАбоненты.КлючПомещения КАК КлючПомещения,
	|						энргВводНачальныхОстатков.Организация КАК Организация,
	|						энргВводНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	|						энргВводНачальныхОстатковАбоненты.Абонент КАК Абонент,
	|						ИСТИНА КАК ЛСОткрыт,
	|						энргВводНачальныхОстатковАбоненты.IDСтроки КАК IDСтрокиАбонента,
	|						энргВводНачальныхОстатковАбоненты.КоличествоПроживающих КАК КоличествоПроживающих,
	|						энргВводНачальныхОстатковАбоненты.КоличествоПрописанных КАК КоличествоПрописанных,
	|						энргВводНачальныхОстатковАбоненты.КоличествоСобственников КАК КоличествоСобственников,
	|						энргВводНачальныхОстатковАбоненты.КоличествоКомнат КАК КоличествоКомнат,
	|						энргВводНачальныхОстатковАбоненты.ТипСобственностиЖилья КАК ВидСобственности
	|					ИЗ
	|						ДокументыДляПроведения КАК ДокументыДляПроведения
	|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.Абоненты КАК энргВводНачальныхОстатковАбоненты
	|							ПО ДокументыДляПроведения.ДокРегистратор = энргВводНачальныхОстатковАбоненты.Ссылка
	|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков КАК энргВводНачальныхОстатков
	|							ПО ДокументыДляПроведения.ДокРегистратор = энргВводНачальныхОстатков.Ссылка) КАК ВложенныйЗапрос
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ТочкиУчета КАК энргВводНачальныхОстатковТочкиУчета
	|						ПО ВложенныйЗапрос.IDСтрокиАбонента = энргВводНачальныхОстатковТочкиУчета.IDСтрокиАбонента
	|							И ВложенныйЗапрос.Регистратор = энргВводНачальныхОстатковТочкиУчета.Ссылка
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргКлючиПомещений КАК энргКлючиПомещений
	|						ПО ВложенныйЗапрос.КлючПомещения = энргКлючиПомещений.КлючПомещения
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.энргДиаметрСеченияТочекУчета.СрезПоследних КАК энргДиаметрСеченияТочекУчетаСрезПоследних
	|						ПО ВложенныйЗапрос.Регистратор = энргДиаметрСеченияТочекУчетаСрезПоследних.Регистратор
	|							И ВложенныйЗапрос.Организация = энргДиаметрСеченияТочекУчетаСрезПоследних.Организация
	|							И ВложенныйЗапрос.Район = энргДиаметрСеченияТочекУчетаСрезПоследних.Район
	|							И ВложенныйЗапрос.КлючПомещения = энргДиаметрСеченияТочекУчетаСрезПоследних.КлючПомещения
	|							И (энргВводНачальныхОстатковТочкиУчета.ТочкаУчета = энргДиаметрСеченияТочекУчетаСрезПоследних.ТочкаУчета)) КАК ВложенныйЗапрос
	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоставщикиСоставныхУслуг КАК энргВводНачальныхОстатковПоставщикиСоставныхУслуг
	|					ПО ВложенныйЗапрос.ДокРегистратор = энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка
	|						И ВложенныйЗапрос.IDСтрокиТочкиУчета = энргВводНачальныхОстатковПоставщикиСоставныхУслуг.IDСтроки
	|						И (ВложенныйЗапрос.ЭтоСоставнаяУслуга)) КАК ВложенныйЗапрос
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ВидыБлагоустройстваТарифныеКатегории КАК энргВводНачальныхОстатковВидыБлагоустройстваТарифныеКатегории
	|				ПО ВложенныйЗапрос.ДокРегистратор = энргВводНачальныхОстатковВидыБлагоустройстваТарифныеКатегории.Ссылка
	|					И ВложенныйЗапрос.IDСтрокиАбонента = энргВводНачальныхОстатковВидыБлагоустройстваТарифныеКатегории.IDСтрокиАбонента
	|					И ВложенныйЗапрос.Услуга = энргВводНачальныхОстатковВидыБлагоустройстваТарифныеКатегории.Услуга) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.энргВидыУслуг КАК энргВидыУслуг
	|			ПО ВложенныйЗапрос.Услуга = энргВидыУслуг.Ссылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ЗначениеПлощадей КАК энргВводНачальныхОстатковЗначениеПлощадей
	|		ПО ВложенныйЗапрос.ДокРегистратор = энргВводНачальныхОстатковЗначениеПлощадей.Ссылка
	|			И ВложенныйЗапрос.ВидПлощади = энргВводНачальныхОстатковЗначениеПлощадей.ВидПлощади
	|			И ВложенныйЗапрос.IDСтрокиАбонента = энргВводНачальныхОстатковЗначениеПлощадей.IDСтрокиАбонента";
	
	Текст  = Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Текст = Текст + Справочники.энргКлючиНормативов.ТекстОпределенияКлючейНорматива();
	
	Текст  = Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Текст  = Текст +
	"ВЫБРАТЬ
	|	ВсеПараметрыРасчета.*,
	|	КлючиНорматива.КлючНорматива КАК КлючНорматива,
	|	КлючиНорматива.КлючСоцНорматива КАК КлючСоцНорматива,
	|	ЛОЖЬ КАК ЯвляетсяПомещениемСРазделеннымиЛС
	|ПОМЕСТИТЬ СтабильныеПериодыВводНачальныхОстатков
	|ИЗ
	|	ВсеПараметрыРасчета КАК ВсеПараметрыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиНорматива КАК КлючиНорматива
	|		ПО (ВсеПараметрыРасчета.Услуга = КлючиНорматива.Услуга)
	|		И (ВсеПараметрыРасчета.НаправлениеИспользованияТУ = КлючиНорматива.НаправлениеИспользованияТУ)
	|		И (КлючиНорматива.Измеритель = ЗНАЧЕНИЕ(Справочник.энргНаправлениеИспользованияТочекУчета.ОсновноеНаправление))";
	 		
	Возврат Текст;
	
КонецФункции 

Функция СтабильныеПериодыДокументыНачисления(Строение, Помещение)
	
	Текст 	=  
	"ВЫБРАТЬ
	|	энргНомераСтрокСтабильногоПериода.Организация КАК Организация,
	|	энргНомераСтрокСтабильногоПериода.ПериодНачисления КАК ПериодНачисления,
	|	энргНомераСтрокСтабильногоПериода.Район КАК Район,
	|	энргНомераСтрокСтабильногоПериода.ЧастныйСектор КАК ЧастныйСектор,
	|	энргНомераСтрокСтабильногоПериода.Строение КАК Строение,
	|	энргНомераСтрокСтабильногоПериода.Помещение КАК Помещение,
	|	энргНомераСтрокСтабильногоПериода.Услуга КАК Услуга,
	|	энргНомераСтрокСтабильногоПериода.ТочкаУчета КАК ТочкаУчета,
	|	МАКСИМУМ(энргНомераСтрокСтабильногоПериода.НомерПозиции) КАК НомерПозиции
	|ПОМЕСТИТЬ НомерСтрок
	|ИЗ
	|	РегистрСведений.энргНомераСтрокСтабильногоПериода КАК энргНомераСтрокСтабильногоПериода
	|ГДЕ
	|	энргНомераСтрокСтабильногоПериода.Организация = &Организация
	|	И энргНомераСтрокСтабильногоПериода.ПериодНачисления = &ПредыдущийПериод
	|	И энргНомераСтрокСтабильногоПериода.Район = &Район
	|	И энргНомераСтрокСтабильногоПериода.ЧастныйСектор = &ЧастныйСектор
	|	И энргНомераСтрокСтабильногоПериода.Строение = &Строение
	|	И энргНомераСтрокСтабильногоПериода.Помещение = &Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	энргНомераСтрокСтабильногоПериода.Организация,
	|	энргНомераСтрокСтабильногоПериода.ПериодНачисления,
	|	энргНомераСтрокСтабильногоПериода.Район,
	|	энргНомераСтрокСтабильногоПериода.ЧастныйСектор,
	|	энргНомераСтрокСтабильногоПериода.Строение,
	|	энргНомераСтрокСтабильногоПериода.Помещение,
	|	энргНомераСтрокСтабильногоПериода.Услуга,
	|	энргНомераСтрокСтабильногоПериода.ТочкаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	0 КАК НомерПозиции,
	|	ЛОЖЬ КАК БлокировочныйАкт,
	| "+ энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериоды","СтабильныеПериоды","Организация,ПериодНачисления,НомерПозиции,БлокировочныйАкт") + "
	|ПОМЕСТИТЬ ПараметрыСтаблиногоПериода
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериоды КАК СтабильныеПериоды
	|		ПО НомерСтрок.Организация = СтабильныеПериоды.Организация
	|			И НомерСтрок.ПериодНачисления = СтабильныеПериоды.ПериодНачисления
	|			И НомерСтрок.Район = СтабильныеПериоды.Район
	|			И НомерСтрок.ЧастныйСектор = СтабильныеПериоды.ЧастныйСектор
	|			И НомерСтрок.Строение = СтабильныеПериоды.Строение
	|			И НомерСтрок.Помещение = СтабильныеПериоды.Помещение
	|			И НомерСтрок.Услуга = СтабильныеПериоды.Услуга
	|			И НомерСтрок.ТочкаУчета = СтабильныеПериоды.ТочкаУчета
	|			И НомерСтрок.НомерПозиции = СтабильныеПериоды.НомерПозиции
	|			И (СтабильныеПериоды.Организация = &Организация)
	|			И (СтабильныеПериоды.ПериодНачисления = &ПредыдущийПериод)
	|			И (СтабильныеПериоды.Район = &Район)
	|			И (СтабильныеПериоды.ЧастныйСектор = &ЧастныйСектор)
	|			И (СтабильныеПериоды.Строение = &Строение)
	|			И (СтабильныеПериоды.Помещение = &Помещение)
	|ГДЕ
	|	СтабильныеПериоды.ЛСОткрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	| "+ энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериоды","ПараметрыСтаблиногоПериода","ПериодРегистрации,ДатаРегистратора,ДокРегистратор",Истина,Ложь) + "
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	ДокументыДляПроведения.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыДляПроведения.ДокРегистратор КАК ДокРегистратор	
	|ПОМЕСТИТЬ СтабильныеПериодыДокументыНачислений
	|ИЗ
	|	ПараметрыСтаблиногоПериода КАК ПараметрыСтаблиногоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПроведения КАК ДокументыДляПроведения
	|		ПО ПараметрыСтаблиногоПериода.Организация = ДокументыДляПроведения.Организация
	|			И ПараметрыСтаблиногоПериода.ПериодНачисления = ДокументыДляПроведения.ПериодНачисления
	|			И ПараметрыСтаблиногоПериода.Район = ДокументыДляПроведения.Район
	|			И ПараметрыСтаблиногоПериода.ЧастныйСектор = ДокументыДляПроведения.ЧастныйСектор
	|			И (ВЫБОР
	|					КОГДА ДокументыДляПроведения.ЧастныйСектор
	|						ТОГДА ИСТИНА 
	|					ИНАЧЕ ПараметрыСтаблиногоПериода.Строение = ДокументыДляПроведения.Строение
	|				КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыШкалы","СтабильныеПериодыШкалы","Организация,ПериодНачисления,НомерПозиции,ДатаРегистратора,ДокРегистратор") + "		
	|ПОМЕСТИТЬ ПараметрыШкалСтаблиногоПериода
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыШкалы КАК СтабильныеПериодыШкалы
	|		ПО НомерСтрок.Организация = СтабильныеПериодыШкалы.Организация
	|			И НомерСтрок.ПериодНачисления = СтабильныеПериодыШкалы.ПериодНачисления
	|			И НомерСтрок.Район = СтабильныеПериодыШкалы.Район
	|			И НомерСтрок.ЧастныйСектор = СтабильныеПериодыШкалы.ЧастныйСектор
	|			И НомерСтрок.Строение = СтабильныеПериодыШкалы.Строение
	|			И НомерСтрок.Помещение = СтабильныеПериодыШкалы.Помещение
	|			И НомерСтрок.ТочкаУчета = СтабильныеПериодыШкалы.ТочкаУчета	
	|			И НомерСтрок.НомерПозиции = СтабильныеПериодыШкалы.НомерПозиции
	|			И (СтабильныеПериодыШкалы.Организация = &Организация)
	|			И (СтабильныеПериодыШкалы.ПериодНачисления = &ПредыдущийПериод)
	|			И (СтабильныеПериодыШкалы.Район = &Район)
	|			И (СтабильныеПериодыШкалы.ЧастныйСектор = &ЧастныйСектор)
	|			И (СтабильныеПериодыШкалы.Строение = &Строение)
	|			И (СтабильныеПериодыШкалы.Помещение = &Помещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыИзмерителиНаправлений","энргСтабильныеПериодыИзмерителиНаправлений","Организация,ПериодНачисления,НомерПозиции,ДатаРегистратора,ДокРегистратор") + "		
	|ПОМЕСТИТЬ ПараметрыИзмерителиСтаблиногоПериода
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыИзмерителиНаправлений КАК энргСтабильныеПериодыИзмерителиНаправлений
	|		ПО НомерСтрок.Организация = энргСтабильныеПериодыИзмерителиНаправлений.Организация
	|			И НомерСтрок.ПериодНачисления = энргСтабильныеПериодыИзмерителиНаправлений.ПериодНачисления
	|			И НомерСтрок.Район = энргСтабильныеПериодыИзмерителиНаправлений.Район
	|			И НомерСтрок.ЧастныйСектор = энргСтабильныеПериодыИзмерителиНаправлений.ЧастныйСектор
	|			И НомерСтрок.Строение = энргСтабильныеПериодыИзмерителиНаправлений.Строение
	|			И НомерСтрок.Помещение = энргСтабильныеПериодыИзмерителиНаправлений.Помещение
	|			И НомерСтрок.ТочкаУчета = энргСтабильныеПериодыИзмерителиНаправлений.ТочкаУчета	
	|			И НомерСтрок.НомерПозиции = энргСтабильныеПериодыИзмерителиНаправлений.НомерПозиции
	|			И (энргСтабильныеПериодыИзмерителиНаправлений.Организация = &Организация)
	|			И (энргСтабильныеПериодыИзмерителиНаправлений.ПериодНачисления = &ПредыдущийПериод)
	|			И (энргСтабильныеПериодыИзмерителиНаправлений.Район = &Район)
	|			И (энргСтабильныеПериодыИзмерителиНаправлений.ЧастныйСектор = &ЧастныйСектор)
	|			И (энргСтабильныеПериодыИзмерителиНаправлений.Строение = &Строение)
	|			И (энргСтабильныеПериодыИзмерителиНаправлений.Помещение = &Помещение)";
		
	Возврат Текст;
	
КонецФункции  

#КонецОбласти

#Область ОтложенныеДвиженияДокументовНачисленияМКД

Процедура ОчиститьНаборыЗаписейМКД(Организация,ПериодНачисления,Район,МКД = Неопределено)
	
	НаборСтабильныеПериоды					= РегистрыСведений.энргСтабильныеПериодыМКД.СоздатьНаборЗаписей();
	НаборСтабильныеПериоды.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
	НаборСтабильныеПериоды.Отбор.Организация.установить(Организация);
	НаборСтабильныеПериоды.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборСтабильныеПериоды.Отбор.Район.установить(Район);
	Если Не МКД = Неопределено  Тогда
		НаборСтабильныеПериоды.Отбор.МКД.установить(МКД);
	КонецЕсли;
	НаборСтабильныеПериоды.записать();
	
	НаборСтабильныеПериодыШкалы				= РегистрыСведений.энргСтабильныеПериодыМКДШкалы.СоздатьНаборЗаписей();
	НаборСтабильныеПериодыШкалы.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
	НаборСтабильныеПериодыШкалы.Отбор.Организация.установить(Организация);
	НаборСтабильныеПериодыШкалы.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборСтабильныеПериодыШкалы.Отбор.Район.установить(Район);
	Если Не МКД = Неопределено  Тогда
		НаборСтабильныеПериодыШкалы.Отбор.МКД.установить(МКД);
	КонецЕсли;
	НаборСтабильныеПериодыШкалы.записать();
	
	НаборСоставУзлов					= РегистрыСведений.энргСтабильныеПериодыМКДСоставУзловУчета.СоздатьНаборЗаписей();
	НаборСоставУзлов.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапретаРедактирования",Истина);
	НаборСоставУзлов.Отбор.Организация.установить(Организация);
	НаборСоставУзлов.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборСоставУзлов.Отбор.Район.установить(Район);
	Если Не МКД = Неопределено  Тогда
		НаборСоставУзлов.Отбор.МКД.установить(МКД);
	КонецЕсли;
	НаборСоставУзлов.записать();
	
	НаборНомерСтрокСтабПериода 				= РегистрыСведений.энргНомераСтрокСтабильногоПериодаМКД.СоздатьНаборЗаписей();
	НаборНомерСтрокСтабПериода.Отбор.Организация.установить(Организация);
	НаборНомерСтрокСтабПериода.Отбор.Район.установить(Район);
	НаборНомерСтрокСтабПериода.Отбор.ПериодНачисления.установить(ПериодНачисления);
	Если Не МКД = Неопределено  Тогда
		НаборНомерСтрокСтабПериода.Отбор.МКД.установить(МКД);
	КонецЕсли;
	НаборНомерСтрокСтабПериода.Записать();
	
	НаборМаксимальныеПоказания 				= РегистрыСведений.энргМаксимальныеПоказанияСрезМКД.СоздатьНаборЗаписей();
	НаборМаксимальныеПоказания.Отбор.Организация.установить(Организация);
	НаборМаксимальныеПоказания.Отбор.ПериодНачисления.установить(ПериодНачисления);
	НаборМаксимальныеПоказания.Отбор.Район.установить(Район);
	Если Не МКД = Неопределено  Тогда
		НаборМаксимальныеПоказания.Отбор.МКД.установить(МКД);
	КонецЕсли;
	НаборМаксимальныеПоказания.Записать();    	
	
	//НаборМаксимальныеПоказания 			= РегистрыСведений.энргМаксимальныеПоказанияСрезМКД.СоздатьНаборЗаписей();
	//НаборМаксимальныеПоказания.Отбор.Организация.установить(Организация);
	//НаборМаксимальныеПоказания.Отбор.ПериодНачисления.установить(ДобавитьМесяц(ПериодНачисления,-1));
	//НаборМаксимальныеПоказания.Отбор.Район.установить(Район);
	//Если Не МКД = Неопределено  Тогда
	//	НаборМаксимальныеПоказания.Отбор.МКД.установить(МКД);
	//КонецЕсли;
	//НаборМаксимальныеПоказания.Записать();  
	
	НаборОтложенныхДвижений  				= РегистрыСведений.энргОтложенныеДвиженияДокументов.СоздатьНаборЗаписей();
	НаборОтложенныхДвижений.Отбор.Организация.установить(Организация);
	НаборОтложенныхДвижений.Отбор.ПериодНачисления.установить(ДобавитьМесяц(ПериодНачисления,-1));
	НаборОтложенныхДвижений.Отбор.Район.установить(Район);
	Если Не МКД = Неопределено  Тогда
		НаборОтложенныхДвижений.Отбор.ЧастныйСектор.установить(Ложь);
		НаборОтложенныхДвижений.Отбор.Строение.установить(МКД);
	КонецЕсли;
	НаборОтложенныхДвижений.Отбор.РазделЗаписи.установить(Перечисления.энргРазделыЗаписи.СтабильныеПериодыМКД);
	НаборОтложенныхДвижений.Записать();
	
КонецПроцедуры

Функция РезультатНачальныеОстаткиСтабильногоПериодаМКД(Организация, ПериодНачисления,Район,Строение,ПериодРегистрации)
	Разделить = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";  
	
	Текст 	=
	"ВЫБРАТЬ
	|	ОтложенныеДвиженияДокументов.Организация КАК Организация,
	|	ОтложенныеДвиженияДокументов.ПериодНачисления КАК ПериодНачисления,
	|	ОтложенныеДвиженияДокументов.Район КАК Район,
	|	ОтложенныеДвиженияДокументов.ЧастныйСектор КАК ЧастныйСектор,
	|	ОтложенныеДвиженияДокументов.Строение КАК Строение,
	|	ОтложенныеДвиженияДокументов.ДокРегистратор КАК ДокРегистратор,
	|	ОтложенныеДвиженияДокументов.ДатаРегистратора КАК ДатаРегистратора
	|ПОМЕСТИТЬ ДокументыДляПроведения
	|ИЗ
	|	РегистрСведений.энргОтложенныеДвиженияДокументов КАК ОтложенныеДвиженияДокументов
	|ГДЕ
	|	ОтложенныеДвиженияДокументов.Организация = &Организация
	|	И ОтложенныеДвиженияДокументов.ПериодНачисления = &Периодначисления
	|	И ОтложенныеДвиженияДокументов.Район = &Район
	|	И ОтложенныеДвиженияДокументов.РазделЗаписи = ЗНАЧЕНИЕ(Перечисление.энргРазделыЗаписи.СтабильныеПериодыМКД)
	|	И НЕ ОтложенныеДвиженияДокументов.ЧастныйСектор
	|	И ОтложенныеДвиженияДокументов.Строение = &Строение";
	
	Если Строение = Неопределено Тогда
		 Текст 						= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.Строение = &Строение","");
	КонецЕсли;
		
	//Текст 	= Текст + Разделить;
	//
	//Текст 	= Текст + СтабильныеПериодыВводНачальныхОстатковМКД();
	
	Текст 							= Текст + Разделить;	
	
	Текст 							= Текст + СтабильныеПериодыДокументыНачисленияМКД(Строение);
		
	МВТ 							= Новый МенеджерВременныхТаблиц;
	Запрос  						= Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц 	= МВТ;
	Если Не Строение = Неопределено Тогда
		Запрос.УстановитьПараметр("Строение",			Строение);	
	КонецЕсли;	
	Запрос.УстановитьПараметр("ПериодРегистрации",		ПериодРегистрации);
	Запрос.УстановитьПараметр("ПредыдущийПериод",		НачалоМесяца(ПериодНачисления-1));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Периодначисления",		ПериодНачисления);
	Запрос.УстановитьПараметр("Район",					Район);
	Запрос.УстановитьПараметр("Период",					КонецМесяца(ПериодНачисления));
	Запрос.Выполнить();
	
	Текст 							=  
	"ВЫБРАТЬ
	|	0 КАК НомерПозиции,
	|	ЛОЖЬ КАК МенялосьСостояниеПУ,
	|	ЛОЖЬ КАК ВводНачальныхОстатков,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыМКД","ДокументыНачальныхОстатков","НомерПозиции,МенялосьСостояниеПУ,ВводНачальныхОстатков") + "
	|	
	|ИЗ
	|	ДокументыНачальныхОстатков КАК ДокументыНачальныхОстатков
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	РасчетныеДанные.Организация,
	//|	РасчетныеДанные.ПериодНачисления,
	//|	РасчетныеДанные.Район,
	//|	РасчетныеДанные.МКД,
	//|	РасчетныеДанные.Услуга,
	//|	РасчетныеДанные.ТочкаУчета,
	//|	0,
	//|	&ПериодРегистрации,
	//|	РасчетныеДанные.Дата,
	//|	РасчетныеДанные.Регистратор,
	//|	РасчетныеДанные.Бойлер,
	//|	РасчетныеДанные.ВидБлагоустройства,
	//|	РасчетныеДанные.ВидДифференцированности,
	//|	РасчетныеДанные.ДатаСостоянияПрибора,
	//|	РасчетныеДанные.ЗначениеПлощади,
	//|	РасчетныеДанные.КлючНорматива,
	//|	РасчетныеДанные.КоэффициентПУ,
	//|	ЛОЖЬ,
	//|	РасчетныеДанные.МКДОткрыт,
	//|	РасчетныеДанные.НетВозможностьУстановкиПУ,
	//|	РасчетныеДанные.Поставщик,
	//|	РасчетныеДанные.ПриборВведен,
	//|	РасчетныеДанные.ПриборУчета,
	//|	РасчетныеДанные.РасчетПоФормуле,
	//|	РасчетныеДанные.СоставнаяУслуга,
	//|	РасчетныеДанные.УслугаПодключена,
	//|	РасчетныеДанные.ФормулаРасчета,
	//|	РасчетныеДанные.Шкала,
	//|	РасчетныеДанные.Этажность,
	//|	ИСТИНА
	//|ИЗ
	//|	РасчетныеДанные КАК РасчетныеДанные
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ДокРегистратор,
	//|	Организация,
	//|	ПериодНачисления,
	//|	Район,
	//|	МКД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыНачальныхОстатков.Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	ДокументыНачальныхОстатков.Район КАК Район,
	|	ДокументыНачальныхОстатков.МКД КАК МКД,
	|	энргМаксимальныеПоказанияСрез.ПриборУчета КАК ПриборУчета,
	|	энргМаксимальныеПоказанияСрез.Шкала КАК Шкала,
	|	энргМаксимальныеПоказанияСрез.ТарифнаяЗона КАК ТарифнаяЗона,
	|	энргМаксимальныеПоказанияСрез.Показания КАК Показания,
	|	энргМаксимальныеПоказанияСрез.ДокРегистратор КАК ДокРегистратор,
	|	энргМаксимальныеПоказанияСрез.ДатаРегистратора КАК ДатаРегистратора
	|ИЗ
	|	ДокументыНачальныхОстатков КАК ДокументыНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргМаксимальныеПоказанияСрезМКД КАК энргМаксимальныеПоказанияСрез
	|		ПО ДокументыНачальныхОстатков.Организация = энргМаксимальныеПоказанияСрез.Организация
	|			И (ДокументыНачальныхОстатков.ПериодНачисления = ДОБАВИТЬКДАТЕ(энргМаксимальныеПоказанияСрез.ПериодНачисления, МЕСЯЦ, 1))
	|			И ДокументыНачальныхОстатков.Район = энргМаксимальныеПоказанияСрез.Район
	|			И ДокументыНачальныхОстатков.МКД = энргМаксимальныеПоказанияСрез.МКД
	|			И ДокументыНачальныхОстатков.ПриборУчета = энргМаксимальныеПоказанияСрез.ПриборУчета
	|			И (ДокументыНачальныхОстатков.ПриборВведен)
	|			И (энргМаксимальныеПоказанияСрез.Организация = &Организация)
	|			И (энргМаксимальныеПоказанияСрез.ПериодНачисления = &ПредыдущийПериод)
	|			И (энргМаксимальныеПоказанияСрез.Район = &Район)
	|			И (энргМаксимальныеПоказанияСрез.МКД = &Строение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодНачисления,
	|	Район
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыНачальныхОстатков.Организация КАК Организация,
	|	ДокументыНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыНачальныхОстатков.ДокРегистратор КАК ДокРегистратор,
	|	0 КАК НомерПозиции,	
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыМКДШкалы","ПараметрыШкалСтаблиногоПериода","Организация,ПериодНачисления,ДокРегистратор,НомерПозиции") + "
	|ИЗ
	|	ДокументыНачальныхОстатков КАК ДокументыНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыШкалСтаблиногоПериода КАК ПараметрыШкалСтаблиногоПериода
	|		ПО ДокументыНачальныхОстатков.Организация = ПараметрыШкалСтаблиногоПериода.Организация
	|			И ДокументыНачальныхОстатков.ПериодНачисления = ПараметрыШкалСтаблиногоПериода.ПериодНачисления
	|			И ДокументыНачальныхОстатков.Район = ПараметрыШкалСтаблиногоПериода.Район
	|			И ДокументыНачальныхОстатков.МКД = ПараметрыШкалСтаблиногоПериода.МКД
	|			И ДокументыНачальныхОстатков.ТочкаУчета = ПараметрыШкалСтаблиногоПериода.ТочкаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыНачальныхОстатков.Организация КАК Организация,
	|	ДокументыНачальныхОстатков.ПериодНачисления КАК ПериодНачисления,
	|	ДокументыНачальныхОстатков.ДокРегистратор КАК ДокРегистратор,
	|	0 КАК НомерПозиции,	
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыМКДСоставУзловУчета","СтаблиныеПериодыСоставУзла","Организация,ПериодНачисления,ДокРегистратор,НомерПозиции") + "
	|ИЗ
	|	ДокументыНачальныхОстатков КАК ДокументыНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтаблиныеПериодыСоставУзла КАК СтаблиныеПериодыСоставУзла
	|		ПО ДокументыНачальныхОстатков.Организация = СтаблиныеПериодыСоставУзла.Организация
	|			И ДокументыНачальныхОстатков.ПериодНачисления = СтаблиныеПериодыСоставУзла.ПериодНачисления
	|			И ДокументыНачальныхОстатков.Район = СтаблиныеПериодыСоставУзла.Район
	|			И ДокументыНачальныхОстатков.МКД = СтаблиныеПериодыСоставУзла.МКД
	|			И ДокументыНачальныхОстатков.ТочкаУчета = СтаблиныеПериодыСоставУзла.ТочкаУчета";   	                            	
	
	Если Строение = Неопределено Тогда
		Текст 		= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.МКД = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И (СтабильныеПериоды.МКД = &Строение)","");
		Текст		= СтрЗаменить(Текст,"И (СтабильныеПериоды.МКД = &Строение)","");
		Текст 		= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.МКД = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.МКД = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.МКД = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И (энргМаксимальныеПоказанияСрез.МКД = &Строение)","");
	КонецЕсли;
	
	Запрос.Текст 			= Текст;
	
	Возврат Запрос.ВыполнитьПакет();
КонецФункции
 
Функция СтабильныеПериодыВводНачальныхОстатковМКД()
	Текст 	=  
	"ВЫБРАТЬ
	|	энргВводНачальныхОстатковДанныеТочекУчета.Ссылка КАК Регистратор,
	|	ДокументыДляПроведения.ДатаРегистратора КАК Дата,
	|	энргВводНачальныхОстатков.Район КАК Район,
	|	энргВводНачальныхОстатковДанныеТочекУчета.МКД КАК МКД,
	|	ДокументыДляПроведения.Организация,
	|	ДокументыДляПроведения.ПериодНачисления,
	|	энргВводНачальныхОстатковДанныеТочекУчета.Услуга,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ТочкаУчета,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ВидДифференцированности,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ДатаПодключенияПУ,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ПриборУчета,
	|	ВЫБОР
	|		КОГДА энргВводНачальныхОстатковДанныеТочекУчета.КоэффициентПУ = 0
	|			ТОГДА 1
	|		ИНАЧЕ энргВводНачальныхОстатковДанныеТочекУчета.КоэффициентПУ
	|	КОНЕЦ КАК КоэффициентПУ,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ДатаПоверки,
	|	энргВводНачальныхОстатковДанныеТочекУчета.РасчетПоФормуле,
	//|	энргВводНачальныхОстатков.ГруппаПотребителей,
	|	энргВводНачальныхОстатковДанныеТочекУчета.Поставщик,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ЭтоСоставнаяУслуга,
	|	энргВводНачальныхОстатковДанныеТочекУчета.IDСтроки,
	|	энргВводНачальныхОстатковДанныеТочекУчета.ЗависимаяТочка КАК ЗависимаяТочкаУчета,
	|	энргВводНачальныхОстатковДанныеТочекУчета.КоэффициентФормулы КАК КоэффициентРасчета
	|ПОМЕСТИТЬ ДанныеТочекУчета
	|ИЗ
	|	Документ.энргВводНачальныхОстатковМКД.ТочкиУчета КАК энргВводНачальныхОстатковДанныеТочекУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПроведения КАК ДокументыДляПроведения
	|		ПО энргВводНачальныхОстатковДанныеТочекУчета.Ссылка = ДокументыДляПроведения.ДокРегистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатковМКД КАК энргВводНачальныхОстатков
	|		ПО энргВводНачальныхОстатковДанныеТочекУчета.Ссылка = энргВводНачальныхОстатков.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТочекУчета.Регистратор,
	|	ДанныеТочекУчета.Организация,
	|	ДанныеТочекУчета.ПериодНачисления,
	|	ДанныеТочекУчета.Абонент,
	|	ДанныеТочекУчета.Район,
	|	ДанныеТочекУчета.МКД,
	|	ВЫБОР
	|		КОГДА энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка ЕСТЬ NULL 
	|			ТОГДА ДанныеТочекУчета.Услуга
	|		ИНАЧЕ энргВводНачальныхОстатковПоставщикиСоставныхУслуг.ЧастьСоставнойУслуги
	|	КОНЕЦ КАК Услуга,
	|	ДанныеТочекУчета.ТочкаУчета,
	|	ДанныеТочекУчета.ВидДифференцированности,
	|	ДанныеТочекУчета.ДатаПодключенияПУ,
	|	ДанныеТочекУчета.ПриборУчета,
	|	ДанныеТочекУчета.КоэффициентПУ,
	|	ДанныеТочекУчета.ДатаПоверки,
	|	ДанныеТочекУчета.РасчетПоФормуле,
	//|	ДанныеТочекУчета.ГруппаПотребителей,
	|	ДанныеТочекУчета.Дата,
	|	ВЫБОР
	|		КОГДА энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка ЕСТЬ NULL 
	|			ТОГДА ДанныеТочекУчета.Поставщик
	|		ИНАЧЕ энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Поставщик
	|	КОНЕЦ КАК Поставщик,
	|	ДанныеТочекУчета.ЗависимаяТочкаУчета,
	|	ДанныеТочекУчета.КоэффициентРасчета
	|ПОМЕСТИТЬ ДанныеУслуг
	|ИЗ
	|	ДанныеТочекУчета КАК ДанныеТочекУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоставщикиСоставныхУслуг КАК энргВводНачальныхОстатковПоставщикиСоставныхУслуг
	|		ПО ДанныеТочекУчета.Регистратор = энргВводНачальныхОстатковПоставщикиСоставныхУслуг.Ссылка
	|			И (ДанныеТочекУчета.ЭтоСоставнаяУслуга)
	|			И ДанныеТочекУчета.IDСтроки = энргВводНачальныхОстатковПоставщикиСоставныхУслуг.IDСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУслуг.Регистратор,
	|	ДанныеУслуг.Организация,
	|	ДанныеУслуг.ПериодНачисления,
	|	ДанныеУслуг.Абонент,
	|	ДанныеУслуг.Район,
	|	ДанныеУслуг.МКД,
	|	ДанныеУслуг.Услуга КАК Услуга,
	|	ДанныеУслуг.ТочкаУчета,
	|	ДанныеУслуг.ВидДифференцированности,
	|	ДанныеУслуг.ДатаПодключенияПУ,
	|	ДанныеУслуг.ПриборУчета,
	|	ДанныеУслуг.КоэффициентПУ,
	|	ДанныеУслуг.ДатаПоверки,
	|	ДанныеУслуг.РасчетПоФормуле,
	//|	ДанныеУслуг.ГруппаПотребителей,
	|	ДанныеУслуг.Дата,
	|	ДанныеУслуг.Поставщик КАК Поставщик,
	|	ВЫБОР
	|		КОГДА энргВидыУслуг.ВидПлощади ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(перечисление.энргВидыПлощадей.ОбщаяПлощадь)
	|		КОГДА энргВидыУслуг.ВидПлощади = ЗНАЧЕНИЕ(Перечисление.энргВидыПлощадей.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(перечисление.энргВидыПлощадей.ОбщаяПлощадь)
	|		ИНАЧЕ энргВидыУслуг.ВидПлощади
	|	КОНЕЦ КАК ВидПлощади,
	|	ДанныеУслуг.ЗависимаяТочкаУчета,
	|	ДанныеУслуг.КоэффициентРасчета
	|ПОМЕСТИТЬ ДанныеВидаПлощадейУслуг
	|ИЗ
	|	ДанныеУслуг КАК ДанныеУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.энргВидыУслуг КАК энргВидыУслуг
	|		ПО ДанныеУслуг.Услуга = энргВидыУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВидаПлощадейУслуг.Регистратор,
	|	ДанныеВидаПлощадейУслуг.Организация,
	|	ДанныеВидаПлощадейУслуг.ПериодНачисления,
	|	ДанныеВидаПлощадейУслуг.Абонент,
	|	ДанныеВидаПлощадейУслуг.Район,
	|	ДанныеВидаПлощадейУслуг.МКД,
	|	ДанныеВидаПлощадейУслуг.Услуга,
	|	ДанныеВидаПлощадейУслуг.ТочкаУчета,
	|	ДанныеВидаПлощадейУслуг.ВидДифференцированности,
	|	ДанныеВидаПлощадейУслуг.ДатаПодключенияПУ,
	|	ДанныеВидаПлощадейУслуг.ПриборУчета,
	|	ДанныеВидаПлощадейУслуг.КоэффициентПУ,
	|	ДанныеВидаПлощадейУслуг.ДатаПоверки,
	|	ДанныеВидаПлощадейУслуг.РасчетПоФормуле,
	|	ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона, ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка)) КАК ТарифнаяЗона,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.ДатаПоказаний, ДАТАВРЕМЯ(1, 1, 1))) КАК МаксДатаПоказаний,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковКоличествоПрописанных.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодКоличествоПрописанных,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковЗначениеПлощадей.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодЗначПлощадей,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковАбоненты.ДатаОткрытияЛС, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодКоличествоКомнат,
	|	ЕСТЬNULL(энргВводНачальныхОстатковАбоненты.ВидБлагоустройств, ЗНАЧЕНИЕ(Справочник.энргВидыБлагоустройств.ПустаяСсылка)) КАК ВидБлагоустройства,
	//|	ДанныеВидаПлощадейУслуг.ГруппаПотребителей,
	|	ДанныеВидаПлощадейУслуг.Дата,
	|	ДанныеВидаПлощадейУслуг.Поставщик,
	|	ДанныеВидаПлощадейУслуг.ВидПлощади,
	|	ДанныеВидаПлощадейУслуг.ЗависимаяТочкаУчета,
	|	ДанныеВидаПлощадейУслуг.КоэффициентРасчета
	|ПОМЕСТИТЬ МаксимальныеДаты
	|ИЗ
	|	ДанныеВидаПлощадейУслуг КАК ДанныеВидаПлощадейУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоказанияПриборовУчета КАК энргВводНачальныхОстатковПоказанияПриборовУчета
	|		ПО ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковПоказанияПриборовУчета.Ссылка
	|			И ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковПоказанияПриборовУчета.Абонент
	|			И ДанныеВидаПлощадейУслуг.ПриборУчета = энргВводНачальныхОстатковПоказанияПриборовУчета.ПриборУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.УдалитьКоличествоПрописанных КАК энргВводНачальныхОстатковКоличествоПрописанных
	|		ПО ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковКоличествоПрописанных.Абонент
	|			И ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковКоличествоПрописанных.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ЗначениеПлощадей КАК энргВводНачальныхОстатковЗначениеПлощадей
	|		ПО ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковЗначениеПлощадей.Абонент
	|			И ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковЗначениеПлощадей.Ссылка
	|			И ДанныеВидаПлощадейУслуг.ВидПлощади = энргВводНачальныхОстатковЗначениеПлощадей.ВидПлощади
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.Абоненты КАК энргВводНачальныхОстатковАбоненты
	|		ПО ДанныеВидаПлощадейУслуг.Абонент = энргВводНачальныхОстатковАбоненты.Абонент
	|			И ДанныеВидаПлощадейУслуг.Регистратор = энргВводНачальныхОстатковВидыБлагоустройств.Ссылка|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВидаПлощадейУслуг.Регистратор,
	|	ДанныеВидаПлощадейУслуг.Организация,
	|	ДанныеВидаПлощадейУслуг.ПериодНачисления,
	|	ДанныеВидаПлощадейУслуг.Абонент,
	|	ДанныеВидаПлощадейУслуг.Район,
	|	ДанныеВидаПлощадейУслуг.ВидПлощади,
	|	ДанныеВидаПлощадейУслуг.МКД,
	|	ДанныеВидаПлощадейУслуг.Услуга,
	|	ДанныеВидаПлощадейУслуг.ТочкаУчета,
	|	ДанныеВидаПлощадейУслуг.ВидДифференцированности,
	|	ДанныеВидаПлощадейУслуг.ДатаПодключенияПУ,
	|	ДанныеВидаПлощадейУслуг.ПриборУчета,
	|	ДанныеВидаПлощадейУслуг.КоэффициентПУ,
	|	ДанныеВидаПлощадейУслуг.ДатаПоверки,
	|	ДанныеВидаПлощадейУслуг.РасчетПоФормуле,
	|	ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона, ЗНАЧЕНИЕ(Справочник.энргТарифныеЗоны.ПустаяСсылка)),
	|	ЕСТЬNULL(энргВводНачальныхОстатковВидыБлагоустройств.ВидБлагоустройств, ЗНАЧЕНИЕ(Справочник.энргВидыБлагоустройств.ПустаяСсылка)),
	//|	ДанныеВидаПлощадейУслуг.ГруппаПотребителей,
	|	ДанныеВидаПлощадейУслуг.Дата,
	|	ДанныеВидаПлощадейУслуг.Поставщик,
	|	ДанныеВидаПлощадейУслуг.ЗависимаяТочкаУчета,
	|	ДанныеВидаПлощадейУслуг.КоэффициентРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДаты.Регистратор,
	|	МаксимальныеДаты.Организация,
	|	МаксимальныеДаты.ПериодНачисления,
	|	МаксимальныеДаты.Абонент,
	|	МаксимальныеДаты.Район,
	|	МаксимальныеДаты.МКД,
	|	МаксимальныеДаты.Услуга,
	|	МаксимальныеДаты.ТочкаУчета,
	|	МаксимальныеДаты.ВидДифференцированности,
	|	МаксимальныеДаты.ДатаПодключенияПУ,
	|	МаксимальныеДаты.ПриборУчета,
	|	МаксимальныеДаты.КоэффициентПУ,
	|	МаксимальныеДаты.ДатаПоверки,
	|	МаксимальныеДаты.ТарифнаяЗона,
	|	МаксимальныеДаты.РасчетПоФормуле,
	|	МаксимальныеДаты.МаксДатаПоказаний,
	|	МаксимальныеДаты.ПериодКоличествоПрописанных,
	|	МаксимальныеДаты.ПериодКоличествоКомнат,
	|	МаксимальныеДаты.ПериодЗначПлощадей,
	|	МаксимальныеДаты.ВидБлагоустройства,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.НомерСтроки, 0)) КАК ПоказанияНомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковКоличествоПрописанных.НомерСтроки, 0)) КАК КоличествоПрописанныхНомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковЗначениеПлощадей.НомерСтроки, 0)) КАК ПериодЗначПлощадейНомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(энргВводНачальныхОстатковКоличествоКомнат.НомерСтроки, 0)) КАК КоличествоКомнатНомерСтроки,
	//|	МаксимальныеДаты.ГруппаПотребителей,
	|	МаксимальныеДаты.Дата,
	|	МаксимальныеДаты.Поставщик,
	|	МаксимальныеДаты.ВидПлощади,
	|	МаксимальныеДаты.ЗависимаяТочкаУчета,
	|	МаксимальныеДаты.КоэффициентРасчета
	|ПОМЕСТИТЬ МаксимальныеНомераСтрок
	|ИЗ
	|	МаксимальныеДаты КАК МаксимальныеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоказанияПриборовУчета КАК энргВводНачальныхОстатковПоказанияПриборовУчета
	|		ПО МаксимальныеДаты.Регистратор = энргВводНачальныхОстатковПоказанияПриборовУчета.Ссылка
	|			И МаксимальныеДаты.Абонент = энргВводНачальныхОстатковПоказанияПриборовУчета.Абонент
	|			И МаксимальныеДаты.ПриборУчета = энргВводНачальныхОстатковПоказанияПриборовУчета.ПриборУчета
	|			И МаксимальныеДаты.ТарифнаяЗона = энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона
	|			И МаксимальныеДаты.МаксДатаПоказаний = энргВводНачальныхОстатковПоказанияПриборовУчета.ДатаПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.УдалитьКоличествоПрописанных КАК энргВводНачальныхОстатковКоличествоПрописанных
	|		ПО МаксимальныеДаты.Абонент = энргВводНачальныхОстатковКоличествоПрописанных.Абонент
	|			И МаксимальныеДаты.Регистратор = энргВводНачальныхОстатковКоличествоПрописанных.Ссылка
	|			И МаксимальныеДаты.ПериодКоличествоПрописанных = энргВводНачальныхОстатковКоличествоПрописанных.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ЗначениеПлощадей КАК энргВводНачальныхОстатковЗначениеПлощадей
	|		ПО МаксимальныеДаты.Абонент = энргВводНачальныхОстатковЗначениеПлощадей.Абонент
	|			И МаксимальныеДаты.Регистратор = энргВводНачальныхОстатковЗначениеПлощадей.Ссылка
	|			И МаксимальныеДаты.ВидПлощади = энргВводНачальныхОстатковЗначениеПлощадей.ВидПлощади
	|			И МаксимальныеДаты.ПериодЗначПлощадей = энргВводНачальныхОстатковЗначениеПлощадей.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.УдалитьКоличествоКомнат КАК энргВводНачальныхОстатковКоличествоКомнат
	|		ПО МаксимальныеДаты.Абонент = энргВводНачальныхОстатковКоличествоКомнат.Абонент
	|			И МаксимальныеДаты.Регистратор = энргВводНачальныхОстатковКоличествоКомнат.Ссылка
	|			И МаксимальныеДаты.ПериодКоличествоКомнат = энргВводНачальныхОстатковКоличествоКомнат.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДаты.Регистратор,
	|	МаксимальныеДаты.Организация,
	|	МаксимальныеДаты.ПериодНачисления,
	|	МаксимальныеДаты.Абонент,
	|	МаксимальныеДаты.Район,
	|	МаксимальныеДаты.МКД,
	|	МаксимальныеДаты.Услуга,
	|	МаксимальныеДаты.ТочкаУчета,
	|	МаксимальныеДаты.ВидДифференцированности,
	|	МаксимальныеДаты.ДатаПодключенияПУ,
	|	МаксимальныеДаты.ПриборУчета,
	|	МаксимальныеДаты.КоэффициентПУ,
	|	МаксимальныеДаты.ДатаПоверки,
	|	МаксимальныеДаты.РасчетПоФормуле,
	|	МаксимальныеДаты.ТарифнаяЗона,
	|	МаксимальныеДаты.МаксДатаПоказаний,
	|	МаксимальныеДаты.ПериодКоличествоПрописанных,
	|	МаксимальныеДаты.ПериодКоличествоКомнат,
	|	МаксимальныеДаты.ПериодЗначПлощадей,
	|	МаксимальныеДаты.ВидБлагоустройства,
	//|	МаксимальныеДаты.ГруппаПотребителей,
	|	МаксимальныеДаты.Дата,
	|	МаксимальныеДаты.Поставщик,
	|	МаксимальныеДаты.ВидПлощади,
	|	МаксимальныеДаты.ЗависимаяТочкаУчета,
	|	МаксимальныеДаты.КоэффициентРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеНомераСтрок.Регистратор,
	|	МаксимальныеНомераСтрок.Организация,
	|	МаксимальныеНомераСтрок.ПериодНачисления,
	|	МаксимальныеНомераСтрок.Абонент,
	|	МаксимальныеНомераСтрок.Район,
	|	МаксимальныеНомераСтрок.МКД,
	|	МаксимальныеНомераСтрок.Услуга,
	|	МаксимальныеНомераСтрок.ТочкаУчета,
	|	МаксимальныеНомераСтрок.ВидДифференцированности,
	|	МаксимальныеНомераСтрок.ДатаПодключенияПУ,
	|	МаксимальныеНомераСтрок.ПриборУчета,
	|	МаксимальныеНомераСтрок.КоэффициентПУ,
	|	МаксимальныеНомераСтрок.ДатаПоверки,
	|	МаксимальныеНомераСтрок.РасчетПоФормуле,
	|	МаксимальныеНомераСтрок.ТарифнаяЗона,
	|	ЕСТЬNULL(энргВводНачальныхОстатковЗначениеПлощадей.ЗначениеПлощади, 0) КАК Площадь,
	|	ЕСТЬNULL(энргВводНачальныхОстатковКоличествоПрописанных.Прописанных, 0) КАК КоличествоПрописанных,
	|	ЕСТЬNULL(энргВводНачальныхОстатковКоличествоКомнат.Количество, 0) КАК КоличествоКомнат,
	|	ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.Показание, 0) КАК Показания,
	|	ЕСТЬNULL(энргВводНачальныхОстатковПоказанияПриборовУчета.ДатаПоказаний, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоказаний,
//	|	МаксимальныеНомераСтрок.ГруппаПотребителей,
	|	МаксимальныеНомераСтрок.ВидБлагоустройства,
	|	МаксимальныеНомераСтрок.Дата,
	|	ЕСТЬNULL(энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон.ОтключатьВНеполивнойСезон, ЛОЖЬ) КАК ОтключатьВНеполивнойСезон,
	|	МаксимальныеНомераСтрок.Поставщик,
	|	МаксимальныеНомераСтрок.ЗависимаяТочкаУчета,
	|	МаксимальныеНомераСтрок.КоэффициентРасчета,
	|	Значение(Справочник.энргКлючиНормативов.ПустаяСсылка) КАК КлючНорматива,
	|	Ложь КАК НетВозможностьУстановкиПУ
	|ПОМЕСТИТЬ РасчетныеДанные
	|ИЗ
	|	МаксимальныеНомераСтрок КАК МаксимальныеНомераСтрок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ПоказанияПриборовУчета КАК энргВводНачальныхОстатковПоказанияПриборовУчета
	|		ПО МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковПоказанияПриборовУчета.Ссылка
	|			И МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковПоказанияПриборовУчета.Абонент
	|			И МаксимальныеНомераСтрок.ПриборУчета = энргВводНачальныхОстатковПоказанияПриборовУчета.ПриборУчета
	|			И МаксимальныеНомераСтрок.ТарифнаяЗона = энргВводНачальныхОстатковПоказанияПриборовУчета.ТарифнаяЗона
	|			И МаксимальныеНомераСтрок.МаксДатаПоказаний = энргВводНачальныхОстатковПоказанияПриборовУчета.ДатаПоказаний
	|			И МаксимальныеНомераСтрок.ПоказанияНомерСтроки = энргВводНачальныхОстатковПоказанияПриборовУчета.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.УдалитьКоличествоПрописанных КАК энргВводНачальныхОстатковКоличествоПрописанных
	|		ПО МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковКоличествоПрописанных.Абонент
	|			И МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковКоличествоПрописанных.Ссылка
	|			И МаксимальныеНомераСтрок.ПериодКоличествоПрописанных = энргВводНачальныхОстатковКоличествоПрописанных.Период
	|			И МаксимальныеНомераСтрок.КоличествоПрописанныхНомерСтроки = энргВводНачальныхОстатковКоличествоПрописанных.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.ЗначениеПлощадей КАК энргВводНачальныхОстатковЗначениеПлощадей
	|		ПО МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковЗначениеПлощадей.Абонент
	|			И МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковЗначениеПлощадей.Ссылка
	|			И МаксимальныеНомераСтрок.ВидПлощади = энргВводНачальныхОстатковЗначениеПлощадей.ВидПлощади
	|			И МаксимальныеНомераСтрок.ПериодЗначПлощадей = энргВводНачальныхОстатковЗначениеПлощадей.Период
	|			И МаксимальныеНомераСтрок.ПериодЗначПлощадейНомерСтроки = энргВводНачальныхОстатковЗначениеПлощадей.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.УдалитьОтключаемыеВНеполивнойСезон КАК энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон
	|		ПО МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон.Абонент
	|			И МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон.Ссылка
	|			И МаксимальныеНомераСтрок.Услуга = энргВводНачальныхОстатковОтключаемыеВНеполивнойСезон.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.энргВводНачальныхОстатков.УдалитьКоличествоКомнат КАК энргВводНачальныхОстатковКоличествоКомнат
	|		ПО МаксимальныеНомераСтрок.Абонент = энргВводНачальныхОстатковКоличествоКомнат.Абонент
	|			И МаксимальныеНомераСтрок.Регистратор = энргВводНачальныхОстатковКоличествоКомнат.Ссылка
	|			И МаксимальныеНомераСтрок.ПериодКоличествоКомнат = энргВводНачальныхОстатковКоличествоКомнат.Период
	|			И МаксимальныеНомераСтрок.КоличествоКомнатНомерСтроки = энргВводНачальныхОстатковКоличествоКомнат.НомерСтроки";
	
	Возврат Текст;
КонецФункции

Функция СтабильныеПериодыДокументыНачисленияМКД(Строение)
	
	Текст 			=  
	"ВЫБРАТЬ
	|	энргНомераСтрокСтабильногоПериода.Организация КАК Организация,
	|	энргНомераСтрокСтабильногоПериода.ПериодНачисления КАК ПериодНачисления,
	|	энргНомераСтрокСтабильногоПериода.Район КАК Район,
	|	энргНомераСтрокСтабильногоПериода.МКД КАК МКД,
	|	энргНомераСтрокСтабильногоПериода.Услуга КАК Услуга,
	|	энргНомераСтрокСтабильногоПериода.ТочкаУчета КАК ТочкаУчета,
	|	МАКСИМУМ(энргНомераСтрокСтабильногоПериода.НомерПозиции) КАК НомерПозиции
	|ПОМЕСТИТЬ НомерСтрок
	|ИЗ
	|	РегистрСведений.энргНомераСтрокСтабильногоПериодаМКД КАК энргНомераСтрокСтабильногоПериода
	|ГДЕ
	|	энргНомераСтрокСтабильногоПериода.Организация = &Организация
	|	И энргНомераСтрокСтабильногоПериода.ПериодНачисления = &ПредыдущийПериод
	|	И энргНомераСтрокСтабильногоПериода.Район = &Район
	|	И энргНомераСтрокСтабильногоПериода.МКД = &Строение
	|
	|СГРУППИРОВАТЬ ПО
	|	энргНомераСтрокСтабильногоПериода.Организация,
	|	энргНомераСтрокСтабильногоПериода.ПериодНачисления,
	|	энргНомераСтрокСтабильногоПериода.Район,
	|	энргНомераСтрокСтабильногоПериода.МКД,
	|	энргНомераСтрокСтабильногоПериода.Услуга,
	|	энргНомераСтрокСтабильногоПериода.ТочкаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	0 КАК НомерПозиции,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыМКД","СтабильныеПериоды","Организация,ПериодНачисления,НомерПозиции,ДатаРегистратора,ДокРегистратор") + "
	|		
	|ПОМЕСТИТЬ ПараметрыСтаблиногоПериода
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыМКД КАК СтабильныеПериоды
	|		ПО НомерСтрок.Организация = СтабильныеПериоды.Организация
	|			И НомерСтрок.ПериодНачисления = СтабильныеПериоды.ПериодНачисления
	|			И НомерСтрок.Район = СтабильныеПериоды.Район
	|			И НомерСтрок.МКД = СтабильныеПериоды.МКД
	|			И НомерСтрок.Услуга = СтабильныеПериоды.Услуга
	|			И НомерСтрок.ТочкаУчета = СтабильныеПериоды.ТочкаУчета	
	|			И НомерСтрок.НомерПозиции = СтабильныеПериоды.НомерПозиции
	|			И (СтабильныеПериоды.Организация = &Организация)
	|			И (СтабильныеПериоды.ПериодНачисления = &ПредыдущийПериод)
	|			И (СтабильныеПериоды.Район = &Район)
	|			И (СтабильныеПериоды.МКД = &Строение)	
	|ГДЕ
	|	СтабильныеПериоды.МКДОткрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыМКДШкалы","СтабильныеПериодыШкалы","Организация,ПериодНачисления,НомерПозиции,ДокРегистратор") + "
	|		
	|ПОМЕСТИТЬ ПараметрыШкалСтаблиногоПериода
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыМКДШкалы КАК СтабильныеПериодыШкалы
	|		ПО НомерСтрок.Организация = СтабильныеПериодыШкалы.Организация
	|			И НомерСтрок.ПериодНачисления = СтабильныеПериодыШкалы.ПериодНачисления
	|			И НомерСтрок.Район = СтабильныеПериодыШкалы.Район
	|			И НомерСтрок.МКД = СтабильныеПериодыШкалы.МКД
	|			И НомерСтрок.ТочкаУчета = СтабильныеПериодыШкалы.ТочкаУчета	
	|			И НомерСтрок.НомерПозиции = СтабильныеПериодыШкалы.НомерПозиции
	|			И (СтабильныеПериодыШкалы.Организация = &Организация)
	|			И (СтабильныеПериодыШкалы.ПериодНачисления = &ПредыдущийПериод)
	|			И (СтабильныеПериодыШкалы.Район = &Район)
	|			И (СтабильныеПериодыШкалы.МКД = &Строение)	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыМКДСоставУзловУчета","энргСтабильныеПериодыМКДСоставУзловУчета","Организация,ПериодНачисления,НомерПозиции,ДокРегистратор") + "
	|		
	|ПОМЕСТИТЬ СтаблиныеПериодыСоставУзла
	|ИЗ
	|	НомерСтрок КАК НомерСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргСтабильныеПериодыМКДСоставУзловУчета КАК энргСтабильныеПериодыМКДСоставУзловУчета
	|		ПО НомерСтрок.Организация = энргСтабильныеПериодыМКДСоставУзловУчета.Организация
	|			И НомерСтрок.ПериодНачисления = энргСтабильныеПериодыМКДСоставУзловУчета.ПериодНачисления
	|			И НомерСтрок.Район = энргСтабильныеПериодыМКДСоставУзловУчета.Район
	|			И НомерСтрок.МКД = энргСтабильныеПериодыМКДСоставУзловУчета.МКД
	|			И НомерСтрок.ТочкаУчета = энргСтабильныеПериодыМКДСоставУзловУчета.ТочкаУчета	
	|			И НомерСтрок.НомерПозиции = энргСтабильныеПериодыМКДСоставУзловУчета.НомерПозиции
	|			И (энргСтабильныеПериодыМКДСоставУзловУчета.Организация = &Организация)
	|			И (энргСтабильныеПериодыМКДСоставУзловУчета.ПериодНачисления = &ПредыдущийПериод)
	|			И (энргСтабильныеПериодыМКДСоставУзловУчета.Район = &Район)
	|			И (энргСтабильныеПериодыМКДСоставУзловУчета.МКД = &Строение) 	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	ДокументыДляПроведения.ДатаРегистратора КАК ДатаРегистратора,
	|	ДокументыДляПроведения.ДокРегистратор КАК ДокРегистратор,
	|" + энргНачисления.СформироватьСтрокуДляЗапроса("энргСтабильныеПериодыМКД","ПараметрыСтаблиногоПериода","ПериодРегистрации,ДатаРегистратора,ДокРегистратор") + "	
	|ПОМЕСТИТЬ ДокументыНачальныхОстатков
	|ИЗ
	|	ПараметрыСтаблиногоПериода КАК ПараметрыСтаблиногоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПроведения КАК ДокументыДляПроведения
	|		ПО ПараметрыСтаблиногоПериода.Организация = ДокументыДляПроведения.Организация
	|			И ПараметрыСтаблиногоПериода.ПериодНачисления = ДокументыДляПроведения.ПериодНачисления
	|			И ПараметрыСтаблиногоПериода.Район = ДокументыДляПроведения.Район
	|			И ПараметрыСтаблиногоПериода.МКД = ДокументыДляПроведения.Строение";
		
	Если Строение = Неопределено Тогда
		Текст 		= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.МКД = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И (СтабильныеПериоды.МКД = &Строение)","");
		Текст 		= СтрЗаменить(Текст,"И энргНомераСтрокСтабильногоПериода.Строение = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И МаксимальныеПоказанияСрезПоследних.МКД = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И ОтложенныеДвиженияДокументов.МКД = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И (СтабильныеПериодыШкалы.МКД = &Строение)","");
		Текст 		= СтрЗаменить(Текст,"И СтабильныеПериодыШкалы.МКД = &Строение","");
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыМКДСоставУзловУчета.МКД = &Строение)","");
		Текст 		= СтрЗаменить(Текст,"И энргСтабильныеПериодыМКДСоставУзловУчета.МКД = &Строение","");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область СреднийОбъемПотребленияАбонентов

Функция РезультатаЗапросаСреднегоПотребленияАбонентов(Организация, ПериодНачисления,Район,Строение,Помещение)
	
	ГраницыПериода  								= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления);
	НачалоПериодаРасчета							= ГраницыПериода.НачалоОП;
	
	Запрос  			= Новый Запрос;
	Запрос.УстановитьПараметр("Район",				Район);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодНачисления",	ПериодНачисления);
	Текст 				= ТекстЗапросаСреднийОбъемАбонентов();
	
	Если НЕ Строение = Неопределено Тогда
		ЧастныйСектор 	= Строение = Справочники.энргСтроения.ПустаяСсылка();
		Запрос.УстановитьПараметр("ЧастныйСектор",ЧастныйСектор);
		Если ЧастныйСектор Тогда
			Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериоды.Строение = &Строение)","");
			Текст 		= СтрЗаменить(Текст,"И (энргРасчетСреднегоОбъема.Строение = &Строение)","");
			Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериоды.Помещение = &Помещение)","");
			Текст 		= СтрЗаменить(Текст,"И (энргРасчетСреднегоОбъема.Помещение = &Помещение)","");
		ИначеЕсли Помещение = Неопределено Тогда
			Запрос.УстановитьПараметр("Строение",Строение);
			
			Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериоды.Помещение = &Помещение)","");
			Текст 		= СтрЗаменить(Текст,"И (энргРасчетСреднегоОбъема.Помещение = &Помещение)","");
		Иначе
			Запрос.УстановитьПараметр("Помещение",Помещение);
		КонецЕсли;		 		
	Иначе
		Текст 			= СтрЗаменить(Текст,"И (энргСтабильныеПериоды.ЧастныйСектор = &ЧастныйСектор)","");
		Текст 			= СтрЗаменить(Текст,"И (энргРасчетСреднегоОбъема.ЧастныйСектор = &ЧастныйСектор)","");
		Текст 			= СтрЗаменить(Текст,"И (энргСтабильныеПериоды.Строение = &Строение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргРасчетСреднегоОбъема.Строение = &Строение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргСтабильныеПериоды.Помещение = &Помещение)","");
		Текст 			= СтрЗаменить(Текст,"И (энргРасчетСреднегоОбъема.Помещение = &Помещение)","");
	КонецЕсли;	
	
	Запрос.Текст 		= Текст;
	Результат  			= Запрос.Выполнить();
	Возврат результат;
КонецФункции

Функция ТекстЗапросаСреднийОбъемАбонентов()
	текст  = 
	"ВЫБРАТЬ
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.Организация КАК Организация,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.Услуга КАК Услуга,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.НаправлениеИспользованияТУ КАК НаправлениеИспользованияТУ,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.КоличествоПоказаний КАК КоличествоПоказаний,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.КоличествоПериодов КАК КоличествоПериодов,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.ЗаПрошлыйГод КАК ЗаПрошлыйГод,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.ПоВсемНачислениям КАК ПоВсемНачислениям,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.НачислятьСреднийОбъемНеБолееМесяцев КАК НачислятьСреднийОбъемНеБолееМесяцев
	|ПОМЕСТИТЬ НастройкиРасчетаСреднегоПотребления
	|ИЗ
	|	РегистрСведений.энргНастройкиРасчетаСреднегоПотребления.СрезПоследних(&ПериодНачисления, Организация = &Организация И Район =&Район) КАК энргНастройкиРасчетаСреднегоПотребленияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргРасчетСреднегоОбъема.Район КАК Район,
	|	энргРасчетСреднегоОбъема.ЧастныйСектор КАК ЧастныйСектор,
	|	энргРасчетСреднегоОбъема.Строение КАК Строение,
	|	энргРасчетСреднегоОбъема.Помещение КАК Помещение,
	|	энргРасчетСреднегоОбъема.ТочкаУчета КАК ТочкаУчета,
	|	СтабильныеПериоды.Услуга КАК Услуга,
	|	энргРасчетСреднегоОбъема.Шкала КАК Шкала,
	|	энргРасчетСреднегоОбъема.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МАКСИМУМ(энргРасчетСреднегоОбъема.ПериодНачисления) КАК КонецПериода,
	|	МАКСИМУМ(СтабильныеПериоды.КоличествоПоказаний) КАК КоличествоПоказаний,
	|	МАКСИМУМ(СтабильныеПериоды.КоличествоПериодов) КАК КоличествоПериодов,
	|	МАКСИМУМ(СтабильныеПериоды.ЗаПрошлыйГод) КАК ЗаПрошлыйГод,
	|	МАКСИМУМ(СтабильныеПериоды.ПоВсемНачислениям) КАК ПоВсемНачислениям
	|ПОМЕСТИТЬ ТочкиДляРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		энргСтабильныеПериоды.Район КАК Район,
	|		энргСтабильныеПериоды.Строение КАК Строение,
	|		энргСтабильныеПериоды.ЧастныйСектор КАК ЧастныйСектор,
	|		энргСтабильныеПериоды.Помещение КАК Помещение,
	|		энргСтабильныеПериоды.ТочкаУчета КАК ТочкаУчета,
	|		энргСтабильныеПериоды.Услуга КАК Услуга,
	|		НастройкиРасчетаСреднегоПотребления.КоличествоПоказаний КАК КоличествоПоказаний,
	|		НастройкиРасчетаСреднегоПотребления.КоличествоПериодов КАК КоличествоПериодов,
	|		НастройкиРасчетаСреднегоПотребления.ЗаПрошлыйГод КАК ЗаПрошлыйГод,
	|		НастройкиРасчетаСреднегоПотребления.ПоВсемНачислениям КАК ПоВсемНачислениям,
	|		НастройкиРасчетаСреднегоПотребления.НачислятьСреднийОбъемНеБолееМесяцев КАК НачислятьСреднийОбъемНеБолееМесяцев
	|	ИЗ
	|		РегистрСведений.энргСтабильныеПериоды КАК энргСтабильныеПериоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиРасчетаСреднегоПотребления КАК НастройкиРасчетаСреднегоПотребления
	|			ПО энргСтабильныеПериоды.Услуга = НастройкиРасчетаСреднегоПотребления.Услуга
	|				И энргСтабильныеПериоды.НаправлениеИспользованияТУ = НастройкиРасчетаСреднегоПотребления.НаправлениеИспользованияТУ
	|				И (энргСтабильныеПериоды.Организация = &Организация)
	|				И (энргСтабильныеПериоды.ПериодНачисления = &ПериодНачисления)
	|				И (энргСтабильныеПериоды.Район = &Район)
	|				И (энргСтабильныеПериоды.ЧастныйСектор = &ЧастныйСектор)
	|				И (энргСтабильныеПериоды.Строение = &Строение)
	|				И (энргСтабильныеПериоды.Помещение = &Помещение)
	|				И (энргСтабильныеПериоды.ЛСОткрыт)
	|				И (энргСтабильныеПериоды.УслугаПодключена)
	|				И (энргСтабильныеПериоды.НомерПозиции = 0)) КАК СтабильныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъема КАК энргРасчетСреднегоОбъема
	|		ПО СтабильныеПериоды.Район = энргРасчетСреднегоОбъема.Район
	|			И СтабильныеПериоды.Строение = энргРасчетСреднегоОбъема.Строение
	|			И СтабильныеПериоды.ЧастныйСектор = энргРасчетСреднегоОбъема.ЧастныйСектор
	|			И СтабильныеПериоды.Помещение = энргРасчетСреднегоОбъема.Помещение
	|			И СтабильныеПериоды.ТочкаУчета = энргРасчетСреднегоОбъема.ТочкаУчета
	|			И (энргРасчетСреднегоОбъема.ПериодНачисления < &ПериодНачисления)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргРасчетСреднегоОбъема.Район,
	|	энргРасчетСреднегоОбъема.ЧастныйСектор,
	|	энргРасчетСреднегоОбъема.Строение,
	|	энргРасчетСреднегоОбъема.Помещение,
	|	энргРасчетСреднегоОбъема.ТочкаУчета,
	|	СтабильныеПериоды.Услуга,
	|	энргРасчетСреднегоОбъема.Шкала,
	|	энргРасчетСреднегоОбъема.ТарифнаяЗона
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(энргРасчетСреднегоОбъема.ПериодНачисления, МЕСЯЦ)) >= МАКСИМУМ(СтабильныеПериоды.КоличествоПоказаний) И
	|	РАЗНОСТЬДАТ(МАКСИМУМ(энргРасчетСреднегоОбъема.ПериодНачисления), &ПериодНачисления, МЕСЯЦ) < МАКСИМУМ(СтабильныеПериоды.НачислятьСреднийОбъемНеБолееМесяцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|	ВложенныйЗапрос.Строение КАК Строение,
	|	ВложенныйЗапрос.Помещение КАК Помещение,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	|	ВложенныйЗапрос.Шкала КАК Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ВложенныйЗапрос.КонецПериода КАК КонецПериода,
	|	МИНИМУМ(ВложенныйЗапрос.НачалоПериода) КАК НачалоПериода
	|ПОМЕСТИТЬ ПериодыРасчетаСреднего
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТочкиДляРасчета.Район КАК Район,
	|		ТочкиДляРасчета.ЧастныйСектор КАК ЧастныйСектор,
	|		ТочкиДляРасчета.Строение КАК Строение,
	|		ТочкиДляРасчета.Помещение КАК Помещение,
	|		ТочкиДляРасчета.Услуга КАК Услуга,
	|		ТочкиДляРасчета.ТочкаУчета КАК ТочкаУчета,
	|		ТочкиДляРасчета.Шкала КАК Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона КАК ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода КАК КонецПериода,
	|		МАКСИМУМ(энргРасчетСреднегоОбъема.ПериодНачисления) КАК НачалоПериода
	|	ИЗ
	|		ТочкиДляРасчета КАК ТочкиДляРасчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъема КАК энргРасчетСреднегоОбъема
	|			ПО ТочкиДляРасчета.Район = энргРасчетСреднегоОбъема.Район
	|				И ТочкиДляРасчета.ЧастныйСектор = энргРасчетСреднегоОбъема.ЧастныйСектор
	|				И ТочкиДляРасчета.Строение = энргРасчетСреднегоОбъема.Строение
	|				И ТочкиДляРасчета.Помещение = энргРасчетСреднегоОбъема.Помещение
	|				И ТочкиДляРасчета.ТочкаУчета = энргРасчетСреднегоОбъема.ТочкаУчета
	|				И ТочкиДляРасчета.Шкала = энргРасчетСреднегоОбъема.Шкала
	|				И ТочкиДляРасчета.ТарифнаяЗона = энргРасчетСреднегоОбъема.ТарифнаяЗона
	|				И (энргРасчетСреднегоОбъема.ПериодНачисления <= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета.КонецПериода, МЕСЯЦ, -ТочкиДляРасчета.КоличествоПериодов + 1))
	|				И (энргРасчетСреднегоОбъема.Организация = &Организация)
	|				И (энргРасчетСреднегоОбъема.Район = &Район)
	|				И (энргРасчетСреднегоОбъема.ЧастныйСектор = &ЧастныйСектор)
	|				И (энргРасчетСреднегоОбъема.Строение = &Строение)
	|				И (энргРасчетСреднегоОбъема.Помещение = &Помещение)
	|				И (НЕ ТочкиДляРасчета.ЗаПрошлыйГод)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.ЧастныйСектор,
	|		ТочкиДляРасчета.Строение,
	|		ТочкиДляРасчета.Помещение,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.ЧастныйСектор,
	|		ТочкиДляРасчета.Строение,
	|		ТочкиДляРасчета.Помещение,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода,
	|		МИНИМУМ(энргРасчетСреднегоОбъема.ПериодНачисления)
	|	ИЗ
	|		ТочкиДляРасчета КАК ТочкиДляРасчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъема КАК энргРасчетСреднегоОбъема
	|			ПО ТочкиДляРасчета.Район = энргРасчетСреднегоОбъема.Район
	|				И ТочкиДляРасчета.ЧастныйСектор = энргРасчетСреднегоОбъема.ЧастныйСектор
	|				И ТочкиДляРасчета.Строение = энргРасчетСреднегоОбъема.Строение
	|				И ТочкиДляРасчета.Помещение = энргРасчетСреднегоОбъема.Помещение
	|				И ТочкиДляРасчета.ТочкаУчета = энргРасчетСреднегоОбъема.ТочкаУчета
	|				И ТочкиДляРасчета.Шкала = энргРасчетСреднегоОбъема.Шкала
	|				И ТочкиДляРасчета.ТарифнаяЗона = энргРасчетСреднегоОбъема.ТарифнаяЗона
	|				И (энргРасчетСреднегоОбъема.ПериодНачисления <= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета.КонецПериода, МЕСЯЦ, -ТочкиДляРасчета.КоличествоПоказаний + 1))
	|				И (энргРасчетСреднегоОбъема.ПериодНачисления >= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета.КонецПериода, МЕСЯЦ, -ТочкиДляРасчета.КоличествоПериодов + 1 + 1))
	|				И (энргРасчетСреднегоОбъема.Организация = &Организация)
	|				И (энргРасчетСреднегоОбъема.Район = &Район)
	|				И (энргРасчетСреднегоОбъема.ЧастныйСектор = &ЧастныйСектор)
	|				И (энргРасчетСреднегоОбъема.Строение = &Строение)
	|				И (энргРасчетСреднегоОбъема.Помещение = &Помещение)
	|				И (НЕ ТочкиДляРасчета.ЗаПрошлыйГод)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.ЧастныйСектор,
	|		ТочкиДляРасчета.Строение,
	|		ТочкиДляРасчета.Помещение,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.ЧастныйСектор,
	|		ТочкиДляРасчета.Строение,
	|		ТочкиДляРасчета.Помещение,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода,
	|		МИНИМУМ(энргРасчетСреднегоОбъема.ПериодНачисления)
	|	ИЗ
	|		ТочкиДляРасчета КАК ТочкиДляРасчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъема КАК энргРасчетСреднегоОбъема
	|			ПО ТочкиДляРасчета.Район = энргРасчетСреднегоОбъема.Район
	|				И ТочкиДляРасчета.ЧастныйСектор = энргРасчетСреднегоОбъема.ЧастныйСектор
	|				И ТочкиДляРасчета.Строение = энргРасчетСреднегоОбъема.Строение
	|				И ТочкиДляРасчета.Помещение = энргРасчетСреднегоОбъема.Помещение
	|				И ТочкиДляРасчета.ТочкаУчета = энргРасчетСреднегоОбъема.ТочкаУчета
	|				И ТочкиДляРасчета.Шкала = энргРасчетСреднегоОбъема.Шкала
	|				И ТочкиДляРасчета.ТарифнаяЗона = энргРасчетСреднегоОбъема.ТарифнаяЗона
	|				И (энргРасчетСреднегоОбъема.ПериодНачисления < НАЧАЛОПЕРИОДА(&ПериодНачисления, ГОД))
	|				И (энргРасчетСреднегоОбъема.ПериодНачисления >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ПериодНачисления, ГОД), ГОД, -1))
	|				И (энргРасчетСреднегоОбъема.Организация = &Организация)
	|				И (энргРасчетСреднегоОбъема.Район = &Район)
	|				И (энргРасчетСреднегоОбъема.ЧастныйСектор = &ЧастныйСектор)
	|				И (энргРасчетСреднегоОбъема.Строение = &Строение)
	|				И (энргРасчетСреднегоОбъема.Помещение = &Помещение)
	|				И (ТочкиДляРасчета.ЗаПрошлыйГод)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.ЧастныйСектор,
	|		ТочкиДляРасчета.Строение,
	|		ТочкиДляРасчета.Помещение,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.ЧастныйСектор,
	|	ВложенныйЗапрос.Строение,
	|	ВложенныйЗапрос.Помещение,
	|	ВложенныйЗапрос.Услуга,
	|	ВложенныйЗапрос.ТочкаУчета,
	|	ВложенныйЗапрос.Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона,
	|	ВложенныйЗапрос.КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.ЧастныйСектор КАК ЧастныйСектор,
	|	ВложенныйЗапрос.Строение КАК Строение,
	|	ВложенныйЗапрос.Помещение КАК Помещение,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	|	ВложенныйЗапрос.Шкала КАК Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ВложенныйЗапрос.КонецПериода КАК КонецПериода,
	|	ВложенныйЗапрос.НачалоПериода КАК НачалоПериода,
	|	ВложенныйЗапрос.ОбъемУслуги КАК ОбъемУслуги,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.КолВоМесяцев = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос.ОбъемУслуги / ВложенныйЗапрос.КолВоМесяцев
	|		КОНЕЦ КАК ЧИСЛО(15, 6)) КАК Объем
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПериодыРасчетаСреднего.Район КАК Район,
	|		ПериодыРасчетаСреднего.ЧастныйСектор КАК ЧастныйСектор,
	|		ПериодыРасчетаСреднего.Строение КАК Строение,
	|		ПериодыРасчетаСреднего.Помещение КАК Помещение,
	|		ПериодыРасчетаСреднего.Услуга КАК Услуга,
	|		ПериодыРасчетаСреднего.ТочкаУчета КАК ТочкаУчета,
	|		ПериодыРасчетаСреднего.Шкала КАК Шкала,
	|		ПериодыРасчетаСреднего.ТарифнаяЗона КАК ТарифнаяЗона,
	|		ПериодыРасчетаСреднего.КонецПериода КАК КонецПериода,
	|		ПериодыРасчетаСреднего.НачалоПериода КАК НачалоПериода,
	|		СУММА(энргРасчетСреднегоОбъема.ОбъемУслуги) КАК ОбъемУслуги,
	|		РАЗНОСТЬДАТ(ПериодыРасчетаСреднего.НачалоПериода, ПериодыРасчетаСреднего.КонецПериода, МЕСЯЦ) + 1 КАК КолВоМесяцев
	|	ИЗ
	|		ПериодыРасчетаСреднего КАК ПериодыРасчетаСреднего
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъема КАК энргРасчетСреднегоОбъема
	|			ПО ПериодыРасчетаСреднего.Район = энргРасчетСреднегоОбъема.Район
	|				И ПериодыРасчетаСреднего.ЧастныйСектор = энргРасчетСреднегоОбъема.ЧастныйСектор
	|				И ПериодыРасчетаСреднего.Строение = энргРасчетСреднегоОбъема.Строение
	|				И ПериодыРасчетаСреднего.Помещение = энргРасчетСреднегоОбъема.Помещение
	|				И ПериодыРасчетаСреднего.ТочкаУчета = энргРасчетСреднегоОбъема.ТочкаУчета
	|				И ПериодыРасчетаСреднего.Шкала = энргРасчетСреднегоОбъема.Шкала
	|				И ПериодыРасчетаСреднего.ТарифнаяЗона = энргРасчетСреднегоОбъема.ТарифнаяЗона
	|				И (энргРасчетСреднегоОбъема.ПериодНачисления МЕЖДУ ПериодыРасчетаСреднего.НачалоПериода И ПериодыРасчетаСреднего.КонецПериода)
	|				И (энргРасчетСреднегоОбъема.Организация = &Организация)
	|				И (энргРасчетСреднегоОбъема.Район = &Район)
	|				И (энргРасчетСреднегоОбъема.ЧастныйСектор = &ЧастныйСектор)
	|				И (энргРасчетСреднегоОбъема.Строение = &Строение)
	|				И (энргРасчетСреднегоОбъема.Помещение = &Помещение)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПериодыРасчетаСреднего.Район,
	|		ПериодыРасчетаСреднего.ЧастныйСектор,
	|		ПериодыРасчетаСреднего.Строение,
	|		ПериодыРасчетаСреднего.Помещение,
	|		ПериодыРасчетаСреднего.Услуга,
	|		ПериодыРасчетаСреднего.ТочкаУчета,
	|		ПериодыРасчетаСреднего.Шкала,
	|		ПериодыРасчетаСреднего.ТарифнаяЗона,
	|		ПериодыРасчетаСреднего.КонецПериода,
	|		ПериодыРасчетаСреднего.НачалоПериода) КАК ВложенныйЗапрос"; 
	Возврат Текст;
КонецФункции

#КонецОбласти

#Область СреднийОбъемПотребленияМКД

Функция РезультатаЗапросаСреднегоПотребленияМКД(Организация, ПериодНачисления,район,МКД)
	
	ГраницыПериода  								= энргРаботаСПериодомДействия.ГраницыРасчетногоПериода(Организация, ПериодНачисления);
	НачалоПериодаРасчета							= ГраницыПериода.НачалоОП;
	
	Запрос  										= Новый Запрос;
	Запрос.УстановитьПараметр("Район",				Район);
	Запрос.УстановитьПараметр("Период",				НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("ПериодНачисления",	ПериодНачисления);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодВвода",		ДобавитьМесяц(ПериодНачисления,-2));
	Запрос.УстановитьПараметр("НачалоПериода",		ДобавитьМесяц(НачалоМесяца(ПериодНачисления),-6));
	Запрос.УстановитьПараметр("КонецПериода",		НачалоМесяца(ПериодНачисления)-1);
	Текст 			= ТекстЗапросаСреднийОбъемМКД();
	Если МКД <> Неопределено тогда
		Запрос.УстановитьПараметр("МКД",МКД);
	иначе
		Текст 		= СтрЗаменить(Текст,"И (энргСтабильныеПериодыМКД.МКД = &МКД)","");
		Текст 		= СтрЗаменить(Текст,"И (энргРасчетСреднегоОбъемаМКД.МКД = &МКД)","")
	КонецЕсли;  	
	
	Запрос.Текст 									= Текст;
	Результат  										= Запрос.Выполнить();
	Возврат результат;
	
КонецФункции

Функция ТекстЗапросаСреднийОбъемМКД()
	
	Текст  = 
	"ВЫБРАТЬ
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.Организация КАК Организация,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.Услуга КАК Услуга,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.КоличествоПоказаний КАК КоличествоПоказаний,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.КоличествоПериодов КАК КоличествоПериодов,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.ЗаПрошлыйГод КАК ЗаПрошлыйГод,
	|	энргНастройкиРасчетаСреднегоПотребленияСрезПоследних.ПоВсемНачислениям КАК ПоВсемНачислениям
	|ПОМЕСТИТЬ НастройкиРасчетаСреднегоПотребления
	|ИЗ
	|	РегистрСведений.энргНастройкиРасчетаСреднегоПотребления.СрезПоследних(
	|			&ПериодНачисления,
	|			Организация = &Организация
	|				И Район = &Район) КАК энргНастройкиРасчетаСреднегоПотребленияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	энргРасчетСреднегоОбъемаМКД.Район КАК Район,
	|	энргРасчетСреднегоОбъемаМКД.МКД КАК МКД,
	|	энргРасчетСреднегоОбъемаМКД.ТочкаУчета КАК ТочкаУчета,
	|	СтабильныеПериодыМКД.Услуга КАК Услуга,
	|	энргРасчетСреднегоОбъемаМКД.Шкала КАК Шкала,
	|	энргРасчетСреднегоОбъемаМКД.ТарифнаяЗона КАК ТарифнаяЗона,
	|	МАКСИМУМ(энргРасчетСреднегоОбъемаМКД.ПериодНачисления) КАК КонецПериода,
	|	МАКСИМУМ(СтабильныеПериодыМКД.КоличествоПериодов) КАК КоличествоПериодов,
	|	МАКСИМУМ(СтабильныеПериодыМКД.ЗаПрошлыйГод) КАК ЗаПрошлыйГод,
	|	МАКСИМУМ(СтабильныеПериодыМКД.ПоВсемНачислениям) КАК ПоВсемНачислениям
	|ПОМЕСТИТЬ ТочкиДляРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		энргСтабильныеПериодыМКД.Район КАК Район,
	|		энргСтабильныеПериодыМКД.МКД КАК МКД,
	|		энргСтабильныеПериодыМКД.ТочкаУчета КАК ТочкаУчета,
	|		энргСтабильныеПериодыМКД.Услуга КАК Услуга,
	|		НастройкиРасчетаСреднегоПотребления.КоличествоПериодов КАК КоличествоПериодов,
	|		НастройкиРасчетаСреднегоПотребления.ЗаПрошлыйГод КАК ЗаПрошлыйГод,
	|		НастройкиРасчетаСреднегоПотребления.ПоВсемНачислениям КАК ПоВсемНачислениям
	|	ИЗ
	|		РегистрСведений.энргСтабильныеПериодыМКД КАК энргСтабильныеПериодыМКД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиРасчетаСреднегоПотребления КАК НастройкиРасчетаСреднегоПотребления
	|			ПО энргСтабильныеПериодыМКД.Услуга = НастройкиРасчетаСреднегоПотребления.Услуга
	|				И (энргСтабильныеПериодыМКД.Организация = &Организация)
	|				И (энргСтабильныеПериодыМКД.ПериодНачисления = &ПериодНачисления)
	|				И (энргСтабильныеПериодыМКД.Район = &Район)
	|				И (энргСтабильныеПериодыМКД.МКД = &МКД)
	|				И (энргСтабильныеПериодыМКД.МКДОткрыт)
	|				И (энргСтабильныеПериодыМКД.УслугаПодключена)
	|				И (энргСтабильныеПериодыМКД.НомерПозиции = 0)) КАК СтабильныеПериодыМКД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъемаМКД КАК энргРасчетСреднегоОбъемаМКД
	|		ПО СтабильныеПериодыМКД.Район = энргРасчетСреднегоОбъемаМКД.Район
	|			И СтабильныеПериодыМКД.МКД = энргРасчетСреднегоОбъемаМКД.МКД
	|			И СтабильныеПериодыМКД.ТочкаУчета = энргРасчетСреднегоОбъемаМКД.ТочкаУчета
	|			И (энргРасчетСреднегоОбъемаМКД.ПериодНачисления < &ПериодНачисления)
	|
	|СГРУППИРОВАТЬ ПО
	|	энргРасчетСреднегоОбъемаМКД.Район,
	|	энргРасчетСреднегоОбъемаМКД.МКД,
	|	энргРасчетСреднегоОбъемаМКД.ТочкаУчета,
	|	СтабильныеПериодыМКД.Услуга,
	|	энргРасчетСреднегоОбъемаМКД.Шкала,
	|	энргРасчетСреднегоОбъемаМКД.ТарифнаяЗона
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(энргРасчетСреднегоОбъемаМКД.ПериодНачисления, МЕСЯЦ)) >= МАКСИМУМ(СтабильныеПериодыМКД.КоличествоПериодов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.МКД КАК МКД,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	|	ВложенныйЗапрос.Шкала КАК Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ВложенныйЗапрос.КонецПериода КАК КонецПериода,
	|	МИНИМУМ(ВложенныйЗапрос.НачалоПериода) КАК НачалоПериода
	|ПОМЕСТИТЬ ПериодыРасчетаСреднего
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТочкиДляРасчета.Район КАК Район,
	|		ТочкиДляРасчета.МКД КАК МКД,
	|		ТочкиДляРасчета.Услуга КАК Услуга,
	|		ТочкиДляРасчета.ТочкаУчета КАК ТочкаУчета,
	|		ТочкиДляРасчета.Шкала КАК Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона КАК ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода КАК КонецПериода,
	|		МАКСИМУМ(энргРасчетСреднегоОбъемаМКД.ПериодНачисления) КАК НачалоПериода
	|	ИЗ
	|		ТочкиДляРасчета КАК ТочкиДляРасчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъемаМКД КАК энргРасчетСреднегоОбъемаМКД
	|			ПО ТочкиДляРасчета.Район = энргРасчетСреднегоОбъемаМКД.Район
	|				И ТочкиДляРасчета.МКД = энргРасчетСреднегоОбъемаМКД.МКД
	|				И ТочкиДляРасчета.ТочкаУчета = энргРасчетСреднегоОбъемаМКД.ТочкаУчета
	|				И ТочкиДляРасчета.Шкала = энргРасчетСреднегоОбъемаМКД.Шкала
	|				И ТочкиДляРасчета.ТарифнаяЗона = энргРасчетСреднегоОбъемаМКД.ТарифнаяЗона
	|				И (энргРасчетСреднегоОбъемаМКД.ПериодНачисления <= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета.КонецПериода, МЕСЯЦ, -6 + 1))
	|				И (энргРасчетСреднегоОбъемаМКД.Организация = &Организация)
	|				И (энргРасчетСреднегоОбъемаМКД.Район = &Район)
	|				И (энргРасчетСреднегоОбъемаМКД.МКД = &МКД)
	|				И (НЕ ТочкиДляРасчета.ЗаПрошлыйГод)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.МКД,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.МКД,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода,
	|		МИНИМУМ(энргРасчетСреднегоОбъемаМКД.ПериодНачисления)
	|	ИЗ
	|		ТочкиДляРасчета КАК ТочкиДляРасчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъемаМКД КАК энргРасчетСреднегоОбъемаМКД
	|			ПО ТочкиДляРасчета.Район = энргРасчетСреднегоОбъемаМКД.Район
	|				И ТочкиДляРасчета.МКД = энргРасчетСреднегоОбъемаМКД.МКД
	|				И ТочкиДляРасчета.ТочкаУчета = энргРасчетСреднегоОбъемаМКД.ТочкаУчета
	|				И ТочкиДляРасчета.Шкала = энргРасчетСреднегоОбъемаМКД.Шкала
	|				И ТочкиДляРасчета.ТарифнаяЗона = энргРасчетСреднегоОбъемаМКД.ТарифнаяЗона
	|				И (энргРасчетСреднегоОбъемаМКД.ПериодНачисления <= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета.КонецПериода, МЕСЯЦ, -3 + 1))
	|				И (энргРасчетСреднегоОбъемаМКД.ПериодНачисления >= ДОБАВИТЬКДАТЕ(ТочкиДляРасчета.КонецПериода, МЕСЯЦ, -5 + 1))
	|				И (энргРасчетСреднегоОбъемаМКД.Организация = &Организация)
	|				И (энргРасчетСреднегоОбъемаМКД.Район = &Район)
	|				И (энргРасчетСреднегоОбъемаМКД.МКД = &МКД)
	|				И (НЕ ТочкиДляРасчета.ЗаПрошлыйГод)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.МКД,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.МКД,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода,
	|		МИНИМУМ(энргРасчетСреднегоОбъемаМКД.ПериодНачисления)
	|	ИЗ
	|		ТочкиДляРасчета КАК ТочкиДляРасчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъемаМКД КАК энргРасчетСреднегоОбъемаМКД
	|			ПО ТочкиДляРасчета.Район = энргРасчетСреднегоОбъемаМКД.Район
	|				И ТочкиДляРасчета.МКД = энргРасчетСреднегоОбъемаМКД.МКД
	|				И ТочкиДляРасчета.ТочкаУчета = энргРасчетСреднегоОбъемаМКД.ТочкаУчета
	|				И ТочкиДляРасчета.Шкала = энргРасчетСреднегоОбъемаМКД.Шкала
	|				И ТочкиДляРасчета.ТарифнаяЗона = энргРасчетСреднегоОбъемаМКД.ТарифнаяЗона
	|				И (энргРасчетСреднегоОбъемаМКД.ПериодНачисления < НАЧАЛОПЕРИОДА(&ПериодНачисления, ГОД))
	|				И (энргРасчетСреднегоОбъемаМКД.ПериодНачисления >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ПериодНачисления, ГОД), ГОД, -1))
	|				И (энргРасчетСреднегоОбъемаМКД.Организация = &Организация)
	|				И (энргРасчетСреднегоОбъемаМКД.Район = &Район)
	|				И (энргРасчетСреднегоОбъемаМКД.МКД = &МКД)
	|				И (ТочкиДляРасчета.ЗаПрошлыйГод)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТочкиДляРасчета.Район,
	|		ТочкиДляРасчета.МКД,
	|		ТочкиДляРасчета.Услуга,
	|		ТочкиДляРасчета.ТочкаУчета,
	|		ТочкиДляРасчета.Шкала,
	|		ТочкиДляРасчета.ТарифнаяЗона,
	|		ТочкиДляРасчета.КонецПериода) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Район,
	|	ВложенныйЗапрос.МКД,
	|	ВложенныйЗапрос.Услуга,
	|	ВложенныйЗапрос.ТочкаУчета,
	|	ВложенныйЗапрос.Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона,
	|	ВложенныйЗапрос.КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Район КАК Район,
	|	ВложенныйЗапрос.МКД КАК МКД,
	|	ВложенныйЗапрос.Услуга КАК Услуга,
	|	ВложенныйЗапрос.ТочкаУчета КАК ТочкаУчета,
	|	ВложенныйЗапрос.Шкала КАК Шкала,
	|	ВложенныйЗапрос.ТарифнаяЗона КАК ТарифнаяЗона,
	|	ВложенныйЗапрос.КонецПериода КАК КонецПериода,
	|	ВложенныйЗапрос.НачалоПериода КАК НачалоПериода,
	|	ВложенныйЗапрос.ОбъемУслуги КАК ОбъемУслуги,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.КолВоМесяцев = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос.ОбъемУслуги / ВложенныйЗапрос.КолВоМесяцев
	|		КОНЕЦ КАК ЧИСЛО(15, 6)) КАК Объем
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПериодыРасчетаСреднего.Район КАК Район,
	|		ПериодыРасчетаСреднего.МКД КАК МКД,
	|		ПериодыРасчетаСреднего.Услуга КАК Услуга,
	|		ПериодыРасчетаСреднего.ТочкаУчета КАК ТочкаУчета,
	|		ПериодыРасчетаСреднего.Шкала КАК Шкала,
	|		ПериодыРасчетаСреднего.ТарифнаяЗона КАК ТарифнаяЗона,
	|		ПериодыРасчетаСреднего.КонецПериода КАК КонецПериода,
	|		ПериодыРасчетаСреднего.НачалоПериода КАК НачалоПериода,
	|		СУММА(энргРасчетСреднегоОбъемаМКД.ОбъемУслуги) КАК ОбъемУслуги,
	|		РАЗНОСТЬДАТ(ПериодыРасчетаСреднего.НачалоПериода, ПериодыРасчетаСреднего.КонецПериода, МЕСЯЦ) + 1 КАК КолВоМесяцев
	|	ИЗ
	|		ПериодыРасчетаСреднего КАК ПериодыРасчетаСреднего
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.энргРасчетСреднегоОбъемаМКД КАК энргРасчетСреднегоОбъемаМКД
	|			ПО ПериодыРасчетаСреднего.Район = энргРасчетСреднегоОбъемаМКД.Район
	|				И ПериодыРасчетаСреднего.МКД = энргРасчетСреднегоОбъемаМКД.МКД
	|				И ПериодыРасчетаСреднего.ТочкаУчета = энргРасчетСреднегоОбъемаМКД.ТочкаУчета
	|				И ПериодыРасчетаСреднего.Шкала = энргРасчетСреднегоОбъемаМКД.Шкала
	|				И ПериодыРасчетаСреднего.ТарифнаяЗона = энргРасчетСреднегоОбъемаМКД.ТарифнаяЗона
	|				И (энргРасчетСреднегоОбъемаМКД.ПериодНачисления МЕЖДУ ПериодыРасчетаСреднего.НачалоПериода И ПериодыРасчетаСреднего.КонецПериода)
	|				И (энргРасчетСреднегоОбъемаМКД.Организация = &Организация)
	|				И (энргРасчетСреднегоОбъемаМКД.Район = &Район)
	|				И (энргРасчетСреднегоОбъемаМКД.МКД = &МКД)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПериодыРасчетаСреднего.Район,
	|		ПериодыРасчетаСреднего.МКД,
	|		ПериодыРасчетаСреднего.Услуга,
	|		ПериодыРасчетаСреднего.ТочкаУчета,
	|		ПериодыРасчетаСреднего.Шкала,
	|		ПериодыРасчетаСреднего.ТарифнаяЗона,
	|		ПериодыРасчетаСреднего.КонецПериода,
	|		ПериодыРасчетаСреднего.НачалоПериода) КАК ВложенныйЗапрос"; 
	Возврат Текст;	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Процедура УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(ЗначенияБлокировки,ИмяПоследовательности, Отказ = Ложь, Заголовок = "") Экспорт
	
	ПараметрыБлокировки = Новый Структура();
	ПараметрыБлокировки.Вставить("ТипТаблицы", "РегистрСведений." + ИмяПоследовательности);
	ПараметрыБлокировки.Вставить("ИмяТаблицы", "");
	
	энргОбщегоНазначения.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки, , Отказ, Заголовок);
КонецПроцедуры

Функция ПараметрыЗаписиЖурнала(ИмяОперации,ПериодНачисления,Район)
	ПараметрыЗаписиЖурнала  = Новый Структура();
	
	СоотвествиеОпераций  	= Новый Структура;	
	СоотвествиеОпераций.Вставить("ОтложенныеДвиженияДокументовНачисленияМКД",			"Работа с последовательностями (биллинг). Чтение данных на начало периода расчета");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностьСтабильныеПериодыМКД",	"Работа с последовательностями (биллинг). События мкд");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностьПоказанияПУМКД",		"Работа с последовательностями (биллинг). Показания мкд");
	СоотвествиеОпераций.Вставить("ОтложенныеДвиженияДокументовНачисления",				"Работа с последовательностями (биллинг). Чтение данных на начало периода расчета (мкд)");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностьСтабильныеПериоды",		"Работа с последовательностями (биллинг). События абонентов");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностьПоказанияПУ",			"Работа с последовательностями (биллинг). Показания абонентов");
	СоотвествиеОпераций.Вставить("ВосстановитьПоследовательностиВзаиморасчетов",		"Работа с последовательностями (биллинг). Взаиморасчеты с абонентами");
	СоотвествиеОпераций.Вставить("ПерерасчетСреднихНачислений",							"Работа с начислениями (биллинг). Перерасчет средних начислений");
	
	ПараметрыЗаписиЖурнала.Вставить("ИмяОперации",СоотвествиеОпераций[ИмяОперации]);
	ПараметрыЗаписиЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Информация);
	ПараметрыЗаписиЖурнала.Вставить("Метаданные",РегистрыСведений.энргСтабильныеПериодыМКД);
	ПараметрыЗаписиЖурнала.Вставить("КомментарийСтарт","Запуск по району " 		+ Район + " за период" + Формат(ПериодНачисления,"ДФ='ММММ гггг'"));
	ПараметрыЗаписиЖурнала.Вставить("КомментарийСтоп","Завершение по району " 	+ Район + " за период" + Формат(ПериодНачисления,"ДФ='ММММ гггг'"));
	Возврат ПараметрыЗаписиЖурнала;
КонецФункции

Функция ОписаниеСтрокиСтабильногоПериодаМКД(ИмяРегистра, ИсключаяСвойства)
	
	мИсключаяСвойства 		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаяСвойства,",");
	
	Результат  				= "";
	Коллекции 				= Новый Массив;
	Коллекции.Добавить("Измерения");
	Коллекции.Добавить("Ресурсы");
	НомерСвойства  			= 0;
	Для Сч = 0 По Коллекции.ВГраница() Цикл
		КоллекцияСвойств  	= Метаданные.РегистрыСведений[ИмяРегистра][Коллекции[Сч]];
		
		Для Каждого Свойство Из КоллекцияСвойств Цикл
			Если Не мИсключаяСвойства.Найти(Свойство.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Результат 		= Результат + ?(НомерСвойства > 0, ",", "") + Свойство.Имя;
			НомерСвойства	= НомерСвойства + 1;
		КонецЦикла;		 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СравнитьСтроки(НоваяСтрока, ПрошлаяСтрока, СвойстваСтроки)
	
	РазлиныеСвойства  = Новый Массив;
	
	Для Каждого Свойство Из СвойстваСтроки Цикл
		Если  НЕ НоваяСтрока[Свойство] = ПрошлаяСтрока[Свойство] Тогда
			РазлиныеСвойства.Добавить(Свойство);
		КонецЕсли;		
	КонецЦикла;

	Возврат РазлиныеСвойства;
КонецФункции

#КонецОбласти




